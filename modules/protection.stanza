#use-added-syntax(jitx)
defpackage ocdb/modules/protection :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import ocdb/utils/design-vars
  import ocdb/utils/bundles

; Attach ESD protection to the provided bundle. To be extended with properties, solvers for general use.
public defn esd-clamp (bundle:JITXObject, gnd:JITXObject) -> JITXObject :
  inside pcb-module:
    match(port-type(bundle)) :
      (pb:Bundle) :
        if pb == can :
          inst clamp : ocdb/components/nexperia/PESD1CAN/component
          net (clamp.c[1] bundle.canh)
          net (clamp.c[2] bundle.canl)
          net (clamp.common gnd)
          bundle
        ; ESD clamp and power protection for usb
        else if pb == usb-2 :
          inst clamp : ocdb/components/texas-instruments/TPD3S0x4/module
          net (bundle, clamp.usb-in)
          net (clamp.usb-in.vbus.vdd, clamp.en)
          ; Return protected port
          clamp.usb-out
        else if pb == gpio :
          inst tvs : ocdb/components/toshiba/DF2B6M4ASL-L3F/component
          net (tvs.p[1] bundle.gpio)
          net (tvs.p[2] gnd)
          bundle
        else:
          bundle

; Isolate unidirectional digital logic pins, associated with power domains A and B. B considered to be distal from A
public defn isolate-logic (pins:Tuple<[JITXObject JITXObject]>, pwr-A:JITXObject, pwr-B:JITXObject):
  inside pcb-module:
    val outputs-vec = Vector<[JITXObject JITXObject]>()
    val inputs-vec = Vector<[JITXObject JITXObject]>()
    for i in 0 to length(pins) do:
      if has-property?(pins[i][0].digital-io) is False or has-property?(pins[i][1].digital-io) is False:
        fatal("isoloate-logic only works for digital-logic pins")
    ; Determine directionality for logic pins. Out on A(or in on B) = output. In on A (or out on B) = input.
      if property(pins[i][0].type) == "o" or property(pins[i][1].type) == "i" :
        add(outputs-vec, pins[i]) 
      else if property(pins[i][0].type) == "i" or property(pins[i][1].type) == "o" :
        add(inputs-vec, pins[i])
      else:
        ; Otherwise assume that the connection is an output.
        println("Assuming that %_ is an output for isolation." % [pins[i][0]])
        add(outputs-vec, [pins[i][0] pins[i][1]]) 
    val outputs = to-tuple(outputs-vec)
    val inputs = to-tuple(inputs-vec)
    ; println("Num out:%_ Num in:%_" % [length(outputs) length(inputs)])

    ; Instantiate Si86xx logic isolators
    if length(pins) == 1:
      inst iso : ocdb/components/si-labs/Si862x/module(0)  
      if length(outputs) == 1:
        net (pwr-A iso.vdd1)
        net (pwr-B iso.vdd2)
        net (outputs[0][0] iso.vdd1-in[0])
        net (outputs[0][1] iso.vdd2-out[0])
      else if length(inputs) == 1:
        net (pwr-B iso.vdd1)
        net (pwr-A iso.vdd2)
        net (inputs[0][1] iso.vdd1-in[0])
        net (inputs[0][0] iso.vdd2-out[0])
    else if length(pins) == 2:
      if length(outputs) == 2:
        inst iso : ocdb/components/si-labs/Si862x/module(0)  
        net (outputs[0][0] iso.vdd1-in[0])
        net (outputs[1][0] iso.vdd1-in[1])
        net (pwr-A iso.vdd1)
        net (outputs[0][1] iso.vdd2-out[0])
        net (outputs[1][1] iso.vdd2-out[1])
        net (pwr-B iso.vdd2)
      else if length(inputs) == 2:
        inst iso : ocdb/components/si-labs/Si862x/module(0)  
        net (inputs[0][0] iso.vdd1-in[0])
        net (inputs[1][0] iso.vdd1-in[1])
        net (pwr-B iso.vdd1)
        net (inputs[0][1] iso.vdd2-out[0])
        net (inputs[1][1] iso.vdd2-out[1])
        net (pwr-A iso.vdd2)
      else if length(outputs) == 1 and length(inputs) == 1 :
        inst iso : ocdb/components/si-labs/Si862x/module(1)  
        net (outputs[0][0] iso.vdd1-in[0])
        net (outputs[0][1] iso.vdd2-out[0])
        net (pwr-A iso.vdd1)
        net (inputs[0][1] iso.vdd2-in[0])
        net (inputs[1][1] iso.vdd1-out[0])
        net (pwr-B iso.vdd2)
    else if length(pins) > 2 and length(pins) <= 4:
      if length(outputs) >= length(inputs):
        inst iso : ocdb/components/si-labs/Si864x/module(length(inputs))  
        net (pwr-A iso.vdd1)
        net (pwr-B iso.vdd2)
        for (o in outputs, idx in 0 to length(outputs)) do :
          net (o[0] iso.vdd1-in[idx])
          net (o[1] iso.vdd2-out[idx])
        for (i in inputs, idx in 0 to length(inputs)) do :
          net (i[0] iso.vdd1-out[idx])
          net (i[1] iso.vdd2-in[idx])
      else if length(outputs) < length(inputs):
        inst iso : ocdb/components/si-labs/Si864x/module(length(outputs))  
        net (pwr-B iso.vdd1)
        net (pwr-A iso.vdd2)
        for (i in inputs, idx in 0 to length(inputs)) do :
          net (i[1] iso.vdd1-in[idx])
          net (i[0] iso.vdd2-out[idx])
        for (o in outputs, idx in 0 to length(outputs)) do :
          net (o[1] iso.vdd1-out[idx])
          net (o[0] iso.vdd2-in[idx])
    ; TODO support any number of logic isolators by recursing appropriately.

; Given input rail, returns isolated power rail
public defn isolate-power (pwr-in:JITXObject):
  inside pcb-module:
    inst iso : ocdb/components/texas-instruments/SN6501/module
    net (pwr-in iso.vin)
  iso.vout
