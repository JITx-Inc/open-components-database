#use-added-syntax(jitx)
defpackage ocdb/solvers/voltage-divider:
  import core
  import collections
  import math
  import jitx with :
    prefix(Resistor) => EModel-
  import jitx/commands
  import ocdb/defaults
  import ocdb/generic-components
  import ocdb/generator-utils
  import ocdb/checks
  import ocdb/design-vars
  import ocdb/db-parts
  import ocdb/tolerance


defstruct Ratio :
  high: Double
  low: Double
  loss: Double

public defstruct VoltageDividerSolution :
  r1: Resistor
  r2: Resistor
  vo: Toleranced

public defn voltage-divider-solver (v-in: Toleranced,
                             v-out: Toleranced,
                             current: Double) -> VoltageDividerSolution|False:
  ; Look for highest acceptable tolerance in EIA standard values: [20% 10% 5% 2% 1% 0.5% 0.25% 0.1%]
  val current-tolerance = 0.1
  val goal-r-hi = (typ-value(v-in) - typ-value(v-out)) / current
  val goal-r-lo = typ-value(v-out) / current
  label<VoltageDividerSolution|False> return :
    for tol in std-tols do :
      ; std-tols are in % instead of being unitless
      val tolerance = tol / 100.
      if check-output-voltage-range(v-in,
                                    v-out,
                                    goal-r-lo,
                                    goal-r-hi,
                                    (- tolerance), tolerance, (- tolerance), tolerance,
                                    0., 0., 0., 0.) :
        println("-> Tolerance %_%%" % [tol])
        val solution = voltage-divider-solver(v-in, v-out, current, tolerance, current-tolerance)
        if solution is VoltageDividerSolution :
          return(solution)

public defn voltage-divider-solver (v-in: Toleranced,
                                    v-out: Toleranced,
                                    current: Double,
                                    tolerance: Double,
                                    current-tolerance: Double) -> VoltageDividerSolution|False :
  fatal("Current specified to the voltage-divider-solver cannot be 0.0") when current == 0.0
  val goal-r-hi = (typ-value(v-in) - typ-value(v-out)) / current
  val goal-r-lo = typ-value(v-out) / current
  ; Find best resistors matching output requirement
  val hi-res = get-resistance-values(goal-r-hi, tolerance, current-tolerance)
  val lo-res = get-resistance-values(goal-r-lo, tolerance, current-tolerance)

  label<VoltageDividerSolution|False> return :
    for ratio in determine-and-sort-fitting-resistance-pairs(v-in, v-out, tolerance, hi-res, lo-res) do :
      println("    - Querying resistors for R1=%_Ω R2=%_Ω" % [high(ratio), low(ratio)])
      val r-his = query-resistors(high(ratio), tolerance)
      val r-los = query-resistors(low(ratio), tolerance)

      if length(r-his) >= 3 and length(r-los) >= 3 :
        val r-hi-cmp = r-his[0]
        val r-lo-cmp = r-los[0]
        val vo = study-solution(v-in, r-hi-cmp, r-lo-cmp)

        if in-range?(v-out, vo) :
          println("      Solved: mpn1=%_, mpn2=%_, v-out=(min=%_V, nom=%_V, max=%_V), current=%_A"
                  % [mpn(r-hi-cmp), mpn(r-lo-cmp), min-value(v-out), typ-value(v-out), max-value(v-out), typ-value(v-out) / low(ratio)])
          return(VoltageDividerSolution(r-hi-cmp, r-lo-cmp, vo))
        else :
          println("      Ignoring: not a solution when taking into account TCRs.")
      else :
        println("      Ignoring: there must at least 3 resistors of each type")

    println("   No solution.")

defn get-resistance-values (goal-r: Double, r-tol: Double, current-tol: Double) -> Tuple<Double> :
  query-available-resistance-values(["min-resistance" => (1. - current-tol) * goal-r,
                                     "max-resistance" => (1. + current-tol) * goal-r,
                                     "tolerance" => r-tol,
                                     "minimum_quantity" => 1,
                                     "mounting" => PREFERRED-MOUNTING,
                                     "case" => get-valid-pkg-list(),
                                     "min-stock" => 5 * DESIGN-QUANTITY], ["tcr"])

defn determine-and-sort-fitting-resistance-pairs (v-in: Toleranced,
                                                  v-out: Toleranced,
                                                  tol: Double,
                                                  hi-res: Tuple<Double>,
                                                  lo-res: Tuple<Double>) :
  qsort{loss, _} $
    for rh in hi-res seq-cat :
      for rl in lo-res seq? :
        val vo = compute-output-voltage-range(v-in,
                                              rl,
                                              rh,
                                              (- tol), tol, (- tol), tol,
                                              0., 0., 0., 0.)
        if in-range?(v-out, vo) :
          val loss = abs(typ-value(v-out) - typ-value(vo))
          One(Ratio(rh, rl, loss))
        else :
          None()

public defn compute-output-voltage-range (v-in: Toleranced,
                                          r-lo-val, r-hi-val,
                                          min-lo-tol, max-lo-tol, min-hi-tol, max-hi-tol,
                                          min-lo-dr, max-lo-dr, min-hi-dr, max-hi-dr) -> Toleranced :
  val vo-min = min-value(v-in) * (r-lo-val * (1.0 + min-lo-dr)) * (1.0 + min-lo-tol)
                     / ( (r-lo-val * (1.0 + min-lo-dr)) * (1.0 + min-lo-tol)
                      + (r-hi-val  * (1.0 + max-hi-dr)) * (1.0 + max-hi-tol))
  val vo-max = max-value(v-in) * (r-lo-val * (1.0 + max-lo-dr)) * (1.0 + max-lo-tol)
                     / ( (r-lo-val * (1.0 + max-lo-dr)) * (1.0 + max-lo-tol)
                     + (r-hi-val  * (1.0 + min-hi-dr)) * (1.0 + min-hi-tol))
  val vo-nom = typ-value(v-in) * (r-lo-val) / ( (r-lo-val) + (r-hi-val) )

  min-typ-max(vo-min, vo-nom, vo-max)

public defn check-output-voltage-range (v-in: Toleranced,
                                        v-out: Toleranced,
                                        r-lo-val, r-hi-val,
                                        min-lo-tol, max-lo-tol, min-hi-tol, max-hi-tol,
                                        min-lo-dr, max-lo-dr, min-hi-dr, max-hi-dr) -> True|False :
  val vo = compute-output-voltage-range(v-in,
                                        r-lo-val, r-hi-val,
                                        min-lo-tol, max-lo-tol, min-hi-tol, max-hi-tol,
                                        min-lo-dr, max-lo-dr, min-hi-dr, max-hi-dr)
  in-range?(v-out, vo)

defn query-resistors (resistance: Double, tol: Double) -> Tuple<Resistor> :
  Resistors(["resistance" => resistance,
             "tolerance" => tol,
             "minimum_quantity" => 1,
             "mounting" => PREFERRED-MOUNTING,
             "case" => get-valid-pkg-list(),
             "min-stock" => 5 * DESIGN-QUANTITY,
             "_exist" => ["tcr"]],
            25)

defn study-solution (v-in: Toleranced, r-hi: Resistor, r-lo: Resistor) -> Toleranced :
  val lo-drs = [delta-resistance(r-lo, OPERATING-TEMPERATURE[0]), 0., delta-resistance(r-lo, OPERATING-TEMPERATURE[1])]
  val hi-drs = [delta-resistance(r-hi, OPERATING-TEMPERATURE[0]), 0., delta-resistance(r-hi, OPERATING-TEMPERATURE[1])]

  ; Calculate worst case.
  ; TCR can be + or - here. It's a tolerance, not an absolute change in resistance
  val lo-tolerance = tolerance(r-lo) as MinMaxRange
  val hi-tolerance = tolerance(r-hi) as MinMaxRange
  println("      Checking solution for existing components with: tol1=%_, tol2=%_" % [hi-tolerance, lo-tolerance])

  compute-output-voltage-range(v-in,
                               resistance(r-lo),
                               resistance(r-hi),
                               min(lo-tolerance),
                               max(lo-tolerance),
                               min(hi-tolerance),
                               max(hi-tolerance),
                               minimum(lo-drs),
                               maximum(lo-drs),
                               minimum(hi-drs),
                               maximum(hi-drs))
