#use-added-syntax(jitx)
defpackage ocdb/modules/passive-circuits :
  import core
  import collections
  import math
  import jitx with :
    prefix(Resistor) => EModel-
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import ocdb/utils/checks
  import ocdb/utils/design-vars
  import ocdb/utils/db-parts
  import ocdb/modules/solvers/voltage-divider
  import ocdb/utils/property-structs



;======================================================
;================= Voltage Divider ====================
;======================================================

public pcb-module voltage-divider (-- source-voltage:Toleranced
                                      divider-output:Toleranced
                                      current:Double = 5.0e-6) :
  pin in
  pin out
  pin lo
  val solution = voltage-divider-solver(source-voltage, divider-output, current)
  match(solution: VoltageDividerSolution) :
    public inst r-hi : to-jitx(r1(solution))
    public inst r-lo : to-jitx(r2(solution))
    net (r-hi.p[1] in)
    net (r-lo.p[1] r-hi.p[2] out)
    net (r-lo.p[2] lo)
    property(r-lo.operating-point) = OperatingPoint(min-max(0.0, typ-value(divider-output)),       min-max(0.0, typ-value(divider-output) / property(r-lo.resistance)))
    property(r-hi.operating-point) = OperatingPoint(min-max(0.0, typ-value(source-voltage) - typ-value(divider-output)), min-max(0.0, (typ-value(source-voltage) - typ-value(divider-output))/ property(r-hi.resistance)))
    property(self.output-voltage) = vo(solution)

  else :
    fatal("No solution for voltage divider.")

public pcb-module voltage-divider (-- source-voltage:Double
                                    divider-output:Double
                                    tolerance:Double = 10.0
                                    current:Double = 5.0e-6) :
  pin in
  pin out
  pin lo
  val solution = voltage-divider-solver(typ(source-voltage), tol%(divider-output, 10.0), current, tolerance / 100.0, 0.15)
  match(solution: VoltageDividerSolution) :
    public inst r-hi : to-jitx(r1(solution))
    public inst r-lo : to-jitx(r2(solution))
    net (r-hi.p[1] in)
    net (r-lo.p[1] r-hi.p[2] out)
    net (r-lo.p[2] lo)
    property(r-lo.operating-point) = OperatingPoint(min-max(0.0, divider-output),       min-max(0.0, divider-output / property(r-lo.resistance)))
    property(r-hi.operating-point) = OperatingPoint(min-max(0.0, source-voltage - divider-output), min-max(0.0, (source-voltage - divider-output)/ property(r-hi.resistance)))
    property(self.output-voltage) = vo(solution)

  else :
    fatal("No solution for voltage divider.")

public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-out:Toleranced) :
  ; Target current through divider is 10x input current (if known), otherwise set current to be 1ma
  val current =
    if has-property?(out.i-input) : property(out.i-input) * 10.0
    else : 1.0e-3
  make-voltage-divider(in, out, lo, v-out, current)

public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-out:Toleranced,
                                  current:Double) :
  println("Solving voltage divider [in=%_, out=%_, low=%_, v-out=(min=%_V, nom=%_V, max=%_V), current=%_A]"
          % [ref(in), ref(out), ref(lo), min-value(v-out), typ-value(v-out), max-value(v-out), current])
  ;Extract voltages from input pin
  val v-in = property(in.voltage)

  val solution = voltage-divider-solver(v-in, v-out, current)
  match(solution: VoltageDividerSolution) :
    make-voltage-divider-module(in, out, lo, v-out, to-jitx(r1(solution)), to-jitx(r2(solution)), vo(solution))
  else :
    fatal("No solution for voltage divider.")

public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-in:Toleranced,
                                  v-out:Toleranced,
                                  current:Double) :
  ; println("Solving voltage divider [in=%_, out=%_, low=%_, v-out=(min=%_V, nom=%_V, max=%_V), current=%_A]"
  ;         % [ref(in), ref(out), ref(lo), v-out[0], v-out[1], v-out[2], current])
  ;Extract voltages from input pin
  val solution = voltage-divider-solver(v-in, v-out, current)
  match(solution: VoltageDividerSolution) :
    make-voltage-divider-module(in, out, lo, v-out, to-jitx(r1(solution)), to-jitx(r2(solution)), vo(solution))
  else :
    fatal("No solution for voltage divider.")

; Generator function for voltage-divider module. This gets called at the top level
; Parameters
; ------------
; in : input pin, with annotated voltage [min nom max] (V)
; out : output pin. Gets annotated with [min nom max] (V)
; lo : low side pin (usually gnd)
; v-out : Allowable output voltage range [min nom max] (V)
; current : desired dc current of voltage divider (A) assumes output is connected to high-impedance.
; tol : desired tolerance of resistor (in %)
; returns true if fitting resistors were found else false
public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-out:Toleranced,
                                  current:Double,
                                  tol:Double) :
  val current-tol = 10.
  make-voltage-divider(in, out, lo, v-out, current, tol, current-tol)

; current-tol : Tolerance on the output current (in %)
public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-out:Toleranced,
                                  current:Double,
                                  tol:Double,
                                  current-tol: Double) :
  println("Solving voltage divider [in=%_, out=%_, low=%_, v-out=(min=%_V, nom=%_V, max=%_V), current=%_A, resistor-tol=%_%%]"
          % [ref(in), ref(out), ref(lo), min-value(v-out), typ-value(v-out), max-value(v-out), current, tol])
  val tolerance = tol / 100.
  val current-tolerance = current-tol / 100.
  val v-in = property(in.voltage)

  val solution = voltage-divider-solver(v-in, v-out, current, tolerance, current-tolerance)
  match(solution: VoltageDividerSolution) :
    make-voltage-divider-module(in, out, lo, v-out, to-jitx(r1(solution)), to-jitx(r2(solution)), vo(solution))
    solution
  else :
    fatal("No solution for voltage divider.")

defn make-voltage-divider-module (in: JITXObject, out: JITXObject, lo: JITXObject,
                                  v-out: Toleranced,
                                  r-hi-cmp: InstantiableType, r-lo-cmp: InstantiableType,
                                  vo: Toleranced) :

  inside pcb-module :
    property(out.voltage) = vo

    ; Instantiate resistors, create netlist
    inst r-hi : r-hi-cmp
    inst r-lo : r-lo-cmp
    net (r-hi.p[1] in)
    net (r-lo.p[1] r-hi.p[2] out)
    net (r-lo.p[2] lo)

    val vin = typ-value(vo) * (property(r-lo.resistance) + property(r-hi.resistance)) / property(r-lo.resistance)
    property(r-lo.operating-point) = OperatingPoint(min-max(0.0, typ-value(vo)),       min-max(0.0, typ-value(vo) / property(r-lo.resistance)))
    property(r-hi.operating-point) = OperatingPoint(min-max(0.0, vin - typ-value(vo)), min-max(0.0, (vin - typ-value(vo))/ property(r-hi.resistance)))

    ; [TODO] check. voltage-levels and other check.stanza functions already adapted for JITXObjects.
    ; Check true output against requirement
    ; check voltage-levels(out, v-out)
