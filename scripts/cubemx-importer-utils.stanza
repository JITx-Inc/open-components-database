defpackage ocdb/scripts/cubemx-importer-utils:
  import core
  import collections
  import jitx
  import pcre

; Algorithm to sanitize pin names.
defn sanitize-pin-name (s:String) -> String:
  var s*: String = s
  val chars = " (/-"
  for c in chars do:
    match(index-of-char(s*, c)):
      (i:Int): s* = s*[0 to i]
      (_:?): false
  s*

defn get-numbers-in-string (s:String) -> Vector<[Int, Int]>:
  val arr = Vector<[Int, Int]>()
  var start = -1
  var end = -1
  for i in 0 to length(s) do :
    if (digit?(s[i])) :
      if (start == -1) :
        start = i
    else if (start >= 0) :
      end = i
      ;println(("6: Adding %_ from %_ to %_") % [s, start, end])
      add(arr, [start, end])
      start = -1
      end = -1

  if (start >= 0) :
    end = length(s)
    ;println(("7: Adding %_ from %_ to %_") % [s, start, end])
    add(arr, [start, end])
  arr

public defn extract-pin-name (raw:String) -> String:
  val ret1 = sanitize-pin-name(raw)
  ;println(ret1)
  ;handle special cases first
  val arr = get-numbers-in-string(ret1)
  val l = length(ret1)
  if ( suffix?(ret1, "_C") or
      suffix?(ret1, "_INN") or
      suffix?(ret1, "_VINM") or
      prefix?(ret1, "DSI_D") or
      prefix?(ret1, "DSIHOST_D") or
      prefix?(ret1, "DDR_DQS")) :
    ; These have array length of 1
    val [start, end] = arr[0]
    val pref = ret1[0 to start]
    val sufx = ret1[end to l]
    val num = ret1[start to end]
    val ret = to-string("%_%_[%_]" % [pref, sufx, num])
    ;println("1: %_ ==> %_" % [raw, ret])
    ret
  else if ( prefix?(ret1, "UCPD1_DBCC")):
    ; These have array length of 1
    val [start, end] = arr[1]
    val num = ret1[start to end]
    val ret = to-string("UCPD1_DBCC[%_]" % [num])
    ;println("2: %_ ==> %_" % [raw, ret])
    ret
  else if ( length(arr) == 0 or
            prefix?(ret1, "VDD") or
            prefix?(ret1, "VSS") or
            prefix?(ret1, "RF") or
            prefix?(ret1, "BYPASS") or
            prefix?(ret1, "V12PHYHS") or
            prefix?(ret1, "V15SMPS")) :
    ;println("3: %_ ==> %_" % [raw, ret1])
    ret1
  else if (index-of-chars(ret1 , "OSC32") is-not False ) :
    val ret2 = ret1[0 to index-of-chars(ret1 , "OSC32")]
    val [start, end] = arr[0]
    val pref = ret2[0 to start]
    val sufx = ret2[end to length(ret2)]
    val num = ret2[start to end]
    val ret = to-string("%_%_[%_]" % [pref, sufx, num])
    ;println("4: %_ ==> %_" % [raw, ret])
    ret
  else if ((index-of-chars(ret1, "BOOT") is-not False ) and
              (not prefix?(ret1, "BOOT"))) :
    val ret2 = ret1[0 to index-of-chars(ret1 , "BOOT")]
    val [start, end] = arr[0]
    val pref = ret2[0 to start]
    val sufx = ret2[end to length(ret2)]
    val num = ret2[start to end]
    val ret = to-string("%_%_[%_]" % [pref, sufx, num])
    ;println("5: %_ ==> %_" % [raw, ret])
    ret
  else if (length(arr) == 1) :
    val [start, end] = arr[0]
    ;println("6: start:%_ ==> end:%_" % [start, end])
    val pref = ret1[0 to start]
    val sufx = ret1[end to l]
    val num = ret1[start to end]
    val ret = to-string("%_%_[%_]" % [pref, sufx, num])
    ;println("6: num = %_, %_ ==> %_" % [num, raw, ret])
    ret
  else :
    ;println("7: %_ ==> %_" % [raw, ret1])
    ret1

; Algorithm to convert a string to a Ref. 
; - "abcdef1" becomes abcdef[1]
; - "123" becomes p[123]
public defn ref-ify (s:String) -> Ref:
  ; internal helper. Returns the baseref and integer if the value ends in a number, 
  ; false otherwise
  defn ends-in-number? (s) -> False|[String, Int]:
    var ref-end:Int = length(s) - 1
    while digit?(s[ref-end]) and ref-end > 0:
      ref-end = ref-end - 1
    val [start, end] = [s[0 through ref-end], s[(ref-end + 1) to false]]
    if empty?(end):
      false
    else:
      [start, to-int(end)]

  defn has-array-bracket? (s) -> False|[String, Int]:
    val match-result = regex-match("(.*)\\[([0-9]+)\\]", s)
    if empty?(match-result) :
      false
    else:
      val [start, end] = [match-result[1], match-result[2]]
      ;println("start %_, end %_" % [start, end])
      [start, to-int(end) as Int]

  ; internal helper. Prints failure message.
  defn fail () -> Void:
    throw(Exception("Could not parse %_ as a pin or pad ref." % [s]))
  
  ; main program
  defn driver (s:String):
    if letter?(s[0]):
      ; extract the ref from a string
      match(has-array-bracket?(s)):
        (_:False): Ref(s)
        (p:[String, Int]):
          val [prefix, postfix] = p
          IndexRef(Ref(prefix), postfix)
    else if digit?(s[0]):
      match(to-int(s)):
        (i:Int): IndexRef(Ref("p"), i)
        (_:?): fail()
    else:
      fail()
  
  ; Launch!
  driver(s)
