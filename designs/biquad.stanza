#use-added-syntax(jitx)
defpackage ocdb/designs/biquad :

  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import ocdb/utils/bundles
  import ocdb/utils/connects
  import ocdb/utils/defaults
  import ocdb/utils/design-vars
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/property-structs
  import ocdb/utils/checks
  import ocdb/utils/micro-controllers

val BOARD-SHAPE = RoundedRectangle(50.0, 50.0, 0.25)

; BiQuad is an amplifier structure for creating
; high Q filters with low component sensitivity
public defstruct BiQuadFilter :
  center : Double     ;  Center Frequency
  bandwidth : Double  ;  Filter bandwidth centered on Center Frequency
  gain : Double       ;  Gain

public defstruct BiQuadSolution :
  Rf : Double
  Rg : Double
  Rb : Double
  Cb : Double

public defn center-freq (s:BiQuadSolution) -> Double :
  1.0 / ( 2.0 * PI * Rf(s) * Cb(s) )

public defn bandwidth (s:BiQuadSolution) -> Double :
  1.0 / ( 2.0 * PI * Rb(s) * Cb(s) )

public defn gain (s:BiQuadSolution) -> Double :
  Rb(s) / Rg(s)

public defmethod print (o:OutputStream, s:BiQuadSolution) :
  print(o, "BiQuad solution: Rf=%_ Rg=%_ Rb=%_ Cb=%_uF" % [Rf(s), Rg(s), Rb(s), Cb(s) * 1.0e6])

public defn biquad-lowpass-circuit (sol:BiQuadSolution, part:Instantiable) :
  pcb-module biquad-circuit :
    pin VCC
    pin VEE
    pin VREF
    pin VOUT
    pin VIN
    ; <TODO> fill out rest of connectivity for low-pass
    inst r1 : chip-resistor(1.0e3)
  biquad-circuit

public defn biquad-highpass-circuit (sol:BiQuadSolution, part:Instantiable) :
  pcb-module biquad-circuit :
    pin VCC
    pin VEE
    pin VREF
    pin VOUT
    pin VIN
    ; <TODO> fill out rest of connectivity for high-pass
    inst r1 : chip-resistor(1.0e3)
  biquad-circuit

public defn biquad-bandpass-circuit (sol:BiQuadSolution, part:Instantiable ) :
  pcb-module biquad-circuit :
    pin VCC
    pin VEE
    pin VREF
    pin VOUT
    pin VIN

    ; Source our resistors and capacitors for the design
    val pRf = chip-resistor(Rf(sol))
    val pRb = chip-resistor(Rb(sol))
    val pRg = chip-resistor(Rg(sol))
    val pCb = ceramic-cap(Cb(sol))

    ; For the inverter feedback resistors, we want to select
    ; one of the resistors that we have already spec'd. Any will
    ; likely do fine.
    val pRi = pRf

    ; need 3 amplifiers per BiQuad solution
    val numOpamps = 3
    inst opamp : part[numOpamps]

    inst pCapDecoupleL : ceramic-cap(2.2e-6)[numOpamps]
    inst pCapDecoupleS : ceramic-cap(10.0e-9)[numOpamps]

    for i in 0 to numOpamps do :
      net (VCC, opamp[i].V+)
      net (VEE, opamp[i].V-)
      net (VCC, pCapDecoupleL[i].p[1] pCapDecoupleS[i].p[1])
      net (VEE, pCapDecoupleL[i].p[2] pCapDecoupleS[i].p[2])

    ; Inverter
    inst Ri1 : pRi
    inst Ri2 : pRi

    net invInput (Ri1.p[1])
    net (Ri1.p[2], opamp[0].-IN, Ri2.p[1])
    net (VREF, opamp[0].+IN)
    net (VOUT, opamp[0].OUT, Ri2.p[2])
    schematic-group([Ri1, Ri2, pCapDecoupleL[0], pCapDecoupleS[0], opamp[0]]) = inverter

    ; Feedback Integrator
    inst Rf1 : pRf
    inst Rf2 : pRf
    inst Cf : pCb

    net (VOUT, Rf1.p[1])
    net (Rf1.p[2], opamp[1].-IN, Cf.p[1])
    net (opamp[1].OUT, Rf2.p[1], Cf.p[2])
    net (VREF, opamp[1].+IN)
    net fb (Rf2.p[2])
    schematic-group([Rf1, Rf2, Cf, pCapDecoupleL[1], pCapDecoupleS[1], opamp[1]]) = feedback

    ; Input Integrator
    inst Rg : pRg
    inst Rb : pRb
    inst Cb : pCb

    net (VIN, Rg.p[1])
    net (fb, Rg.p[2], opamp[2].-IN, Rb.p[1], Cb.p[1])
    net (Rb.p[2], Cb.p[2], opamp[2].OUT, invInput)
    net (VREF, opamp[2].+IN)
    schematic-group([Rg, Rb, Cb, pCapDecoupleL[2], pCapDecoupleS[2], opamp[2]]) = integrator
  ; return the circuit
  biquad-circuit


pcb-module biquad:  
  port power : power

  val solution = BiQuadSolution(1000.0, 2000.0, 3000.0, 10.0e-9)
  val my-amp = ocdb/components/analog-devices/ADA4004/component

  inst filter : biquad-bandpass-circuit(solution, my-amp)
  schematic-group([filter]) = filter

  net gnd (filter.VEE)
  net P3V3 (filter.VCC)
  net (gnd filter.VREF)
  net in (filter.VIN)
  net out (filter.VOUT)

  symbol(P3V3) = ocdb/utils/symbols/altium-power-bar-sym
  symbol(gnd) = ocdb/utils/symbols/ground-sym  

make-default-board(biquad, 4, BOARD-SHAPE)
view-board()
view-schematic()