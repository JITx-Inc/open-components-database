; This design contains a set of components with explicitly created properties,
; intended to drive the pcb-checks run by ocdb/utils/checks/check-design function.
;
; It is not intended as a meaningful schematic, rather a dummy project that shows
; all the properties required to set for passives and actives when running your code.
;
; It is also useful as a development harness for hacking on ocdb/utils/checks when
; needed.
;
#use-added-syntax(jitx)
defpackage ocdb/designs/comprehensive-checks :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/property-structs
  import ocdb/utils/box-symbol
  import ocdb/utils/passive-checks/resonator-checks
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/bundles


;==============================================================================
;=========================== Resistor Properties ==============================
;==============================================================================
pcb-component resistor :
  reference-prefix = "R"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = resistor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.resistor)    = true
  property(self.resistance)  = 1.0e3
  property(self.rated-power) = 5.0
  property(self.rated-temperature) = min-max(-55.0, 100.0)


;==============================================================================
;============================ Inductor Properties =============================
;==============================================================================
pcb-component inductor :
  reference-prefix = "L"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = inductor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.inductor)       = true
  property(self.dc-resistance)  = 16.0
  property(self.rated-power)    = 5.0
  property(self.inductance)     = 1.0e-6
  property(self.rated-temperature) = min-max(-55.0, 100.0)

;==============================================================================
;============================ Capacitor Properties =============================
;==============================================================================
pcb-component ceramic-capacitor :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = resistor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "ceramic"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-9
  property(self.rated-voltage)     = 24.0

pcb-component electrolytic-cap :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "electrolytic"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 24.0
  property(self.anode)             = "tantalum"
  property(self.electrolyte)       = "manganese-dioxide"
  property(self.rated-current-pk)  = 1.0e-6

pcb-component mica-cap :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "mica"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 24.0

pcb-component mylar-cap :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "mylar"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 24.0


;==============================================================================
;=========================== Resonator Properties =============================
;==============================================================================
pcb-component crystal-resonator :
  reference-prefix = "X"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]

  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = crystal-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.rated-temperature) = min-max(-55.0, 100.0)

  ; Set the crystal resonator properties
  property(self.crystal-resonator) =
    CrystalResonator(
      load-capacitance, shunt-capacitance, motional-capacitance,
      ESR, frequency, frequency-tolerance, max-drive-level
    ) where :
      val load-capacitance = 9.0e-12
      val shunt-capacitance = 1.31e-12
      val motional-capacitance = 4.41e-15
      val ESR = 60.0
      val frequency = 16.0e6
      val frequency-tolerance = 10.0e-6
      val max-drive-level = 100.0e-6

pcb-module resonator-module :
  public inst X1 : crystal-resonator
  public inst C1 : ceramic-capacitor
  property(C1.tolerance) = Toleranced(1.0, 0.01, 0.01)
  val intf = CrystalOscillator(
    max-critical-gain, drive-level,
    c-pin, frequency-tolerance, frequency
  ) where :
    val max-critical-gain = 2.0e-3
    val drive-level = 100.0e-6
    val c-pin = 3.0e-12
    val frequency-tolerance = 20.0e-6
    val frequency = 16.0e6

  check-resonator(X1, intf, C1)
  net (X1.p[1], C1.p[1])
  net (X1.p[2], C1.p[2])

;==============================================================================
;============================= Generic Properties =============================
;==============================================================================
pcb-component component :
  pin-properties :
    [ pin : Ref | pads : Int ... | side:Dir ]
    [ p[1]      | 1              | Left  ]
    [ p[2]      | 2              | Left  ]
    [ p[3]      | 3              | Left  ]
    [ p[4]      | 4              | Left  ]
    [ p[5]      | 5              | Right ]
    [ p[6]      | 6              | Right ]
    [ p[7]      | 7              | Right ]
    [ p[8]      | 8              | Right ]

  assign-landpattern(ocdb/components/st-microelectronics/landpatterns/LQFP32)
  make-box-symbol()

pcb-module passives :
  ; ICs
  inst U1 : component

  ; Capacitors
  inst C1 : ceramic-capacitor
  inst C2 : electrolytic-cap
  inst C3 : mica-cap
  inst C4 : mylar-cap

  ; Resistors
  inst R1 : resistor

  ; Inductors
  inst L1 : inductor

  ; Set the operating points...
  property(C1.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))
  property(C2.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))
  property(C3.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))
  property(C4.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))
  property(R1.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))
  property(L1.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))

  no-connect(C1.p[1])
  no-connect(C1.p[2])

  property(U1.DNP) = true
  net (C2.p[1], C3.p[1], C4.p[1], R1.p[1], L1.p[1])
  net (C2.p[2], C3.p[2], C4.p[2], R1.p[2], L1.p[2])

  ; Resonators
  inst res : resonator-module
  property(res.C1.operating-point) = OperatingPoint(typ(5.0), typ(0.5e-6))

;==============================================================================
;============================= I/O Propertiese ================================
;==============================================================================
; For digital I/O the following properties must be set:
;
; - digital-output: DigitalOutput. The pin is a digital output (only) pin.
; - digital-input: DigitalInput. The pin is a digital input (only) pin.
; - digital-io: DigitalIO. The pin functions as either a digital input or
;               digital output.
;
; digital-source: a component with power/ground and one digital output pin.
; digital-sink: a component with power/ground and one digtal input pin.
;
pcb-component digital-source (io?:True|False,
                              case:String,
                              tristateable?:True|False):
  pin-properties :
    [ pin : Ref | pads : Int ... | side:Dir  ]
    [ vdd  | 1 | Up    ]
    [ out  | 2 | Right ]
    [ gnd  | 3 | Down  ]

  make-box-symbol()
  assign-landpattern(SOT23())
  val vol = min-max(0.1, 0.5)
  val voh = min-max(3.0, 3.3)

  val driver =
    switch(case) :
      "open-collector":
        OpenCollector(vol 6.0)
      "cmos":
        CMOSOutput(vol, voh)
      "ttl" :
        TTLOutput(vol, voh)

  if io? :
    property(self.out.digital-io) =
      DigitalIO(driver, typ(0.8), typ(2.0),
                self.vdd, self.gnd, 10.0e-6)
  else :
    property(self.out.digital-output) =
      DigitalOutput(driver, tristateable?, self.vdd, self.gnd)

  property(self.rated-temperature) = min-max(-55.0, 100.0)

pcb-component digital-sink (io?:True|False,
                            case:String):
  pin-properties :
    [ pin : Ref | pads : Int ... | side:Dir  ]
    [ vdd  | 1 | Up    ]
    [ in   | 2 | Left  ]
    [ gnd  | 3 | Down  ]

  make-box-symbol()
  assign-landpattern(SOT23())

  val driver =
    switch(case) :
      "open-collector":
        OpenCollector(min-max(3.3, 5.0), 6.0)
      "cmos":
        CMOSOutput(min-max(0.1, 0.5), min-max(4.0, 5.0))
      "ttl" :
        TTLOutput(min-max(0.1, 0.5), min-max(4.0, 5.0))

  if io? :
    property(self.in.digital-io) =
      DigitalIO(driver, typ(0.8), typ(2.0),
                self.vdd, self.gnd, 10.0e-6)
  else :
    property(self.in.digital-input) =
      DigitalInput(typ(0.8), typ(2.0), self.vdd, self.gnd, 10.0e-6)

  property(self.rated-temperature) = min-max(-55.0, 100.0)

pcb-module digital-io :
  val cases = ["open-collector", "cmos", "ttl"]

  val sink = to-tuple $
    for io? in [false, true] seq-cat :
      for case in cases seq :
        inst sink : digital-sink(io?, case)
        sink

  val source = to-tuple $
    for io? in [false, true] seq-cat :
      for case in cases seq :
        val name = to-symbol $ string-join([`source, case, io?], "-")
        make-inst(name, digital-source(io?, case, false), false)

  net GND ()
  net VDD ()

  property(VDD.voltage) = min-max(4.5, 5.2)
  property(GND.voltage) = typ(0.0)

  for n in 0 to 2 * length(cases) do :
    inst Rpullup : ocdb/utils/generic-components/gen-res-cmp(1.0e3)
    net (source[n].gnd, sink[n].gnd, GND)
    net (source[n].vdd, sink[n].vdd, VDD, Rpullup.p[1])
    net dat (source[n].out, sink[n].in, Rpullup.p[2])
    property(Rpullup.p[1].voltage) = property(VDD.voltage)
    property(Rpullup.operating-point) = OperatingPoint(typ(5.2), typ(5.0e-3))

pcb-component relative-io :
  property(self.rated-temperature) = min-max(-55.0, 100.0)
  pin-properties :
    [ pin : Ref | pads : Int ... | side:Dir ]
    [ vdd       | 1              | Up       ]
    [ gnd       | 2              | Down     ]
    [ io        | 3              | Left     ]

  make-box-symbol()
  assign-landpattern(SOT23())

  val gp = GenericPin(FractionalVoltage(0.75, self.vdd), 200.0)
  val io =
    DigitalIO(driver, vil, vih, vdd-pin, gnd-pin, leakage-current)
    where :
      val driver = CMOSOutput(min-max(0.1, 0.5), OffsetVoltage(-0.3, self.vdd))
      val vil = min-max(0.1, 0.5),
      val vih = OffsetVoltage(-0.3, self.vdd)
      val vdd-pin = self.vdd
      val gnd-pin = self.gnd
      val leakage-current = 1.0e-6

  ; property(self.io.generic-pin) = gp
  property(self.io.digital-io) = io

; Relative Voltages
pcb-module relative-io-module :
  port power : ocdb/utils/bundles/power
  inst U1 : relative-io
  inst U2 : relative-io
  net VDD (U1.vdd, U2.vdd, power.vdd)
  net GND (U1.gnd, U2.gnd, power.gnd)
  net (U1.io, U2.io)

  property(VDD.voltage) = min-max(0.0, 5.0)
  property(GND.voltage) = typ(0.0)

  symbol(VDD) = supply-sym
  symbol(GND) = ground-sym


pcb-module realistic-design :
  port source : power
  inst j : ocdb/utils/generic-components/pin-header(2)
  net VIN (j.p[1] source.vdd)
  net GND (j.p[2] source.gnd)

  property(VIN.voltage) = min-max(4.2 5.5)
  property(GND.voltage) = typ(5.0)

  inst ldo : ocdb/components/diodes-incorporated/AP2112/module
  net (ldo.vin source)

  inst stm : ocdb/components/st-microelectronics/STM32F031F4P6/module([])[5]

  net (ldo.vout stm[0].power stm[2].power stm[4].power)
  net (source stm[1].power stm[3].power)

  require i2c-0 : i2c from stm[0].mcu
  require i2c-1 : i2c from stm[1].mcu
  require i2c-2 : i2c from stm[2].mcu
  require i2c-3 : i2c from stm[3].mcu
  require i2c-4 : i2c from stm[4].mcu

  net (i2c-0 i2c-2)
  ; res-strap(i2c-0.sda ldo.vout.vdd, 4.7e3)
  ; res-strap(i2c-0.scl ldo.vout.vdd, 4.7e3)
  net (i2c-4.sda i2c-4.scl ldo.vout.vdd)

  add-open-drain-pullups(i2c-0, ldo.vout.vdd)
  ; Causes:
  ; Uncaught Exception: Invalid reference to out of scope variable.
  ; in ocdb/utils/voltage-propagation/collect-connected-groups
    ; at utils\voltage-propagation.stanza:105.32

  net (i2c-1 i2c-3)

  require gpio-0 : gpio from stm[0].mcu
  require gpio-2 : gpio from stm[2].mcu
  ; THIS SHOULD TRIGGER CHECKS BUT DOES NOT
  net (gpio-0 gpio-2)

  net (stm[0].mcu.PA[2] stm[2].mcu.PA[4])
  net (stm[0].mcu.PA[3] stm[1].mcu.PA[4])


;==============================================================================
;==============================================================================
;==============================================================================
pcb-module main-module :
  inst passives    : passives
  inst digital-io  : digital-io
  inst relative-io : relative-io-module
  inst real : realistic-design

  schematic-group(passives) = passives
  schematic-group(digital-io) = digital-io
  schematic-group(relative-io) = relative-io
  schematic-group(real) = real

  check-design(self)

defn main () :
  set-current-design("output-comprehensive-checks")
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, Rectangle(100.0 100.0)))
  set-rules(ocdb/manufacturers/rules/jlcpcb-rules)
  set-main-module(ocdb/utils/generator-utils/run-final-passes(main-module))
  run-checks("checks.txt")
  view-board()
  view-schematic()
  ; view-design-explorer()

main()
