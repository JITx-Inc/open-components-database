#use-added-syntax(jitx)
defpackage ocdb/designs/demo :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/checks
  import ocdb/utils/generator-utils
  import ocdb/utils/landpatterns

  import ocdb/utils/bundles
  import ocdb/manufacturers/stackups
  import ocdb/manufacturers/rules
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs

pcb-component test-res :
  mpn = "ERJ-2RKF10R0X"
  manufacturer = "Panasonic"
  reference-prefix = "R"
  port p : pin[[1 2]]
  val sym = resistor-sym()
  val pkg = ipc-two-pin-landpattern("0402")
  symbol = sym(p[1] => sym.p[1], p[2] => sym.p[2])
  landpattern = pkg(p[1] => pkg.p[1], p[2] => pkg.p[2])
  property(self.resistor) = true
  property(self.type) = "thick-film"
  property(self.rated-voltage) = 50.0
  property(self.rated-power) = 0.063
  property(self.derating) = [[-60.0 1.0] [70.0 1.0] [155.0 0.0]]
  property(self.TCR) = 100.0
  property(self.rated-temperature) = min-max(-55.0, 155.0)
  property(self.resistance) = 10.0
  property(self.tolerance) = 0.01

  ; spice:
  ;   "[R] <p[1]> <p[2]> 10"

pcb-component test-cap-ceramic :
  mpn = "GRM155R70J105KA12D"
  manufacturer = "Murata"
  reference-prefix = "C"
  port p : pin[[1 2]]

  val sym = capacitor-sym()
  val pkg = ipc-two-pin-landpattern("0402")
  symbol = sym(p[1] => sym.p[1], p[2] => sym.p[2])
  landpattern = pkg(p[1] => pkg.p[1], p[2] => pkg.p[2])
  property(self.capacitor) = true
  property(self.type) = "ceramic"
  property(self.capacitance) = 1.0e-6
  property(self.tolerance) = 10.0
  property(self.rated-voltage) = 6.3
  property(self.rated-temperature) = min-max(-55.0, 155.0)

  ; spice:
  ;   "[C] <p[1]> 1 100u"
  ;   "[R] 1 <p[2]> 0"

pcb-component test-cap-tantalum-mno2 :
  mpn = "T491A105M020AT"
  manufacturer = "Kemet"
  reference-prefix = "C"
  pin a
  pin c

  val sym = capacitor-sym(CapacitorPolarized)
  val pkg = ipc-two-pin-landpattern("0402")
  symbol = sym(a => sym.p[1], c => sym.p[2])
  landpattern = pkg(a => pkg.p[1], c => pkg.p[2])
  property(self.capacitor) = true
  property(self.type) = "electrolytic"
  property(self.anode) = "tantalum"
  property(self.electrolyte) = "manganese-dioxide"
  property(self.capacitance) = 1.0e-6
  property(self.tolerance) = 20.0
  property(self.rated-voltage) = 20.0
  property(self.rated-current-pk) = 0.147
  property(self.rated-current-rms) = [[25.0 0.091] [85.0 0.082] [125.0 0.036]]
  property(self.rated-temperature) = min-max(-55.0, 155.0)

  ; spice :
  ;   "[C] {a} 1 100u"
  ;   "[R] 1 {c} 9"

pcb-component test-cap-tantalum-polymer :
  mpn = "TLJH107M010#0900"
  manufacturer = "AVX"
  pin a
  pin c

  reference-prefix = "C"
  val sym = capacitor-sym(CapacitorPolarized)
  val pkg = ipc-two-pin-landpattern("0402")
  symbol = sym(a => sym.p[1], c => sym.p[2])
  landpattern = pkg(a => pkg.p[1], c => pkg.p[2])

  property(self.capacitor) = true
  property(self.type) = "electrolytic"
  property(self.anode) = "tantalum"
  property(self.electrolyte) = "polymer"
  property(self.capacitance) = 100.0e-6
  property(self.rated-voltage) = 10.0
  property(self.tolerance) = 20.0
  property(self.rated-current-pk) = 3.7
  property(self.rated-current-rms) = [[25.0 0.298] [85.0 0.268] [125.0 0.119]]
  property(self.rated-temperature) = min-max(-55.0, 155.0)

  ; spice:
  ;  "[C] <a> 1 100u"
  ;  "[R] 1 <c> 0.9"

; Do a buffer implementation of checks for variable voltage. Show how paramteres change as function of voltage.
;
; Board dimensions in mm
val w = 50.0
val h = 50.0
val brd-outline = Rectangle(w, h)


pcb-module checks :
  ; Design goes here

  inst r1 : test-res
  inst r2 : test-res
  inst r3 : test-res
  inst r4 : test-res
  inst r5 : test-res
  inst r6 : test-res
  inst ceramic : test-cap-ceramic
  inst tant-mno : test-cap-tantalum-mno2
  inst tant-poly : test-cap-tantalum-polymer

  net (r1.p[2], ceramic.p[1], r2.p[1])
  net (r2.p[2], tant-mno.a, r3.p[1])
  net (r3.p[2], tant-poly.a)


  inst ldo : ocdb/components/texas-instruments/TLV743P/component(2.5)
  inst fmc : ocdb/components/samtec/ASP-134488-01/component

  ; spice:
  ;   "[V] <fmc.v3p3> <fmc.gnd> 3.3"

  net gnd (ceramic.p[2] tant-poly.c tant-mno.c, ldo.gnd fmc.gnd)

  net (fmc.v3p3 ldo.in ldo.en)
  net (r4.p[1] ldo.out)

  net (r6.p[1] ldo.in)
  net (r6.p[2] ldo.out)

  property(fmc.v3p3.supply-pin) = true
  property(fmc.v3p3.voltage) = [3.0 3.3 6.0]

  no-connect(r5.p[1])
  no-connect(r5.p[2])
  property(r6.DNP) = true

  require out:gpio[10] from fmc
  require in:gpio[10] from fmc
  net (in out)

  require out-d:lvds[10] from fmc
  require in-d:lvds[10] from fmc
  net (in-d out-d)

  ; spice:
  ;   ".tran 0.001ms 5m"
  ;   "[V] <r1.p[1]> <tant-mno.c> 5"
  ;   "[S] <r4.p[2]> <ldo.gnd> c <ldo.gnd> switch1"
  ;   ".model switch1 sw vt=0 vh=0.1 ron=0.1 roff=100k"
  ;   "[Vs] c <ldo.gnd> pulse(-1.0 1.0 1000u 100u 1000u 1000u 3000u)"

  ; spice:
  ;   ".inc PMBT3904.lib"
  ;   ".inc TLV74315P_TRANS.LIB"
  ;   ".inc TLV74325P_TRANS.LIB"
  ;   ".inc TLV74333P_TRANS.LIB"
  ;   ".options gmin=1e-10"
  ;   ".options abstol=1e-7"
  ;   ".options reltol=0.003"
  ;   ".options cshunt=1e-15"

  ; check-design()


pcb-board B :
  stackup = sierra-circuits-6-layer-62-mil
  boundary = brd-outline
  signal-boundary = brd-outline

set-current-design("output-test-component-checks")

set-main-module(checks)
set-board(B)
set-rules(sierra-adv-rules)

;Export design to Kicad
; export-netlist(checks.gnd, "hello-world.cir")
export-cad()
; export-kicad("checks", [`gen-schematic => true `fresh => true `place => true
;                         `param-configs => [`sketch] `gen-board => true
;                         `check-log => "checks.txt" `ground-reference => checks.gnd])
