#use-added-syntax(jitx)
defpackage ocdb/designs/usb-light :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/generic-components
  import ocdb/utils/bundles
  import ocdb/utils/design-vars
  import ocdb/utils/micro-controllers
  import ocdb/utils/symbols
  import ocdb/utils/property-structs
  import ocdb/utils/checks
  import jitx/geometry/shapes/arc-utils

val BOARD-SHAPE = RoundedRectangle(25.0, 25.0, 0.25)

defn get-pad-pose (obj:JITXObject, pad-ref:String) : 
  get-pad-pose(obj, pad-ref, false) 

defn get-pad-pose (obj:JITXObject, pad-ref:String, pad-num:Int|False) -> Pose: 
  val landpattern-pads = pads( landpattern(instance-definition(obj)) )
  match(pad-num) :
    (pad-num:Int) :
      pose(find!({ref(_) == Ref(pad-ref)[pad-num]}, landpattern-pads))
    (pad-num:False) :
      pose(find!({ref(_) == Ref(pad-ref)}, landpattern-pads))

defn led-circuit-resistance (vbus:Double, forward-voltage:Double, current:Double, num-leds:Int) -> Double :
  (vbus - (forward-voltage * (to-double(num-leds) )) ) / current

pcb-module main-board:
  inst conn : ocdb/components/amphenol/10103594-0001LF/component
  port vbus : power
  property(conn.VCC.power-pin) = PowerPin(min-typ-max(4.75, 5.0, 5.5))
  inst led : gen-led-cmp(tol(2.1, 0.1), 0.02, "YELLOW", "0805")[8]
  net p5v (vbus.vdd conn.VCC)
  net gnd (vbus.gnd conn.GND conn.SHIELD)
  symbol(p5v) = ocdb/utils/symbols/supply-sym
  symbol(gnd) = ocdb/utils/symbols/ground-sym
  val vbus-voltage = (nom-value(recommended-voltage(property(conn.VCC.power-pin)) as Toleranced)) as Double
  val exact-resistance = led-circuit-resistance(vbus-voltage, property(led[0].forward-voltage), property(led[0].test-current), 2)
  inst res : gen-res-cmp(closest-std-val(exact-resistance, 5.0), "0603")[4]
  val trace-thickness = 0.254
  val led-rows = 4
  val row-spacing-y = 5.0
  for i in 0 to led-rows do :
    ; place parts
    val right-led-point = Point(-2.5, row-spacing-y * to-double(i) - 7.5)
    place(led[i + 4]) at loc(right-led-point, 90.0) on Top
    val left-led-point = Point(-7.5, row-spacing-y * to-double(i) - 7.5)
    place(led[i]) at loc(left-led-point, 90.0) on Top
    val res-i-point = Point(2.5, row-spacing-y * to-double(i) - 7.5)
    place(res[i]) at loc(res-i-point, 90.0) on Top
    ; assign nets
    net (p5v led[i].a)

    val net-name1 = string-join(["net-led", i + 1])
    val net-id1 = make-net( to-symbol(net-name1), [(led[i + 4].a)])
    net (net-id1 led[i].c)

    val net-name2 = string-join(["net-res", i + 1])
    val net-id2 = make-net( to-symbol(net-name2), [(res[i].p[1])])
    net (net-id2 led[i + 4].c)

    net (gnd res[i].p[2])
    ; place p5v track stub
    val led-5v-x1 = x(left-led-point) - y(center(get-pad-pose(((led[i])), "a")))
    val led-5v-y1 = y(left-led-point) 
    geom(p5v) :
      copper(LayerIndex(0)) = Line(trace-thickness, [ Point(led-5v-x1, led-5v-y1), Point(led-5v-x1 - 2.0, led-5v-y1) ])
    ; place p5v track 
      if i == 0 :
        copper(LayerIndex(0)) = Polyline(trace-thickness, [Arc(Point(led-5v-x1 - 2.0, led-5v-y1), Point(-9.5, -9.5), Point(-8.0, -10.0))])
      else :
        copper(LayerIndex(0)) = Line(trace-thickness, [Point(led-5v-x1 - 2.0, led-5v-y1) Point(led-5v-x1 - 2.0, led-5v-y1 - row-spacing-y) ])      

    ; place track between the LEDs
    val led-5v-x2 = x(left-led-point) - y(center(get-pad-pose(((led[i])), "c")))
    val led-middle-x1 = x(right-led-point) - y(center(get-pad-pose(((led[i + 4])), "a")))
    geom(net-id1) :
      copper(LayerIndex(0)) = Line(trace-thickness, [ Point(led-5v-x2, led-5v-y1), Point(led-middle-x1, led-5v-y1) ])

    ; place track between LED and resistor
    val led-middle-x2 = x(right-led-point) - y(center(get-pad-pose(((led[i + 4])), "c")))
    val res-i-x1 = x(res-i-point) - y(center(get-pad-pose(((res[i])), "p", 1)))
    geom(net-id2) :
      copper(LayerIndex(0)) = Line(trace-thickness, [ Point(res-i-x1, led-5v-y1), Point(led-middle-x2, led-5v-y1) ])

    ; place ground track stub
    val res-i-x2 = x(res-i-point) - y(center(get-pad-pose(((res[i])), "p", 2)))
    geom(gnd) :
      copper(LayerIndex(0)) = Line(trace-thickness, [ Point(res-i-x2, led-5v-y1), Point(5.0, led-5v-y1) ])
      if i != 0 :
        copper(LayerIndex(0)) = Line(trace-thickness, [Point(5.0, led-5v-y1) Point(5.0, led-5v-y1 - row-spacing-y) ])
  val conn-point = Point(10.75, 0.0)
  place(conn) at loc(conn-point, 90.0) on Top
  val conn-pin-x = x(conn-point) - y(center(get-pad-pose(((conn)), "p", 1)))
  val conn-gnd-y = y(conn-point) + x(center(get-pad-pose(((conn)), "p", 5)))
  val conn-p5v-y = y(conn-point) + x(center(get-pad-pose(((conn)), "p", 1)))
  geom(p5v) :
    copper(LayerIndex(0)) = Line(trace-thickness, [ Point(5.7, conn-p5v-y), Point(conn-pin-x, conn-p5v-y) ])
    copper(LayerIndex(0)) = Line(trace-thickness, [ Point(5.7, -8.0), Point(5.7, conn-p5v-y) ])
    copper(LayerIndex(0)) = Polyline(trace-thickness, [Point(-8.0, -10.0), Arc(Point(4.2, -10.0), Point(5.4, -9.0), Point(5.7, -8.0))])

  geom(gnd) :
    copper(LayerIndex(0)) = Line(trace-thickness, [ Point(5.0, conn-gnd-y), Point(conn-pin-x, conn-gnd-y) ])
    copper-pour(LayerIndex(0), isolate = 0.1, rank = 1) = RoundedRectangle(6.0, 6.5, 1.0, loc(conn-point, 0.0))

  inst logo : ocdb/artwork/jitx-logo/logo(10.0)
  place(logo) at loc(7.0, -5.0, 0.0) on Bottom
  println("Calculated Resistance = %_, Standard Value Resistance = %_" % [exact-resistance property(res[0].resistance)])
  check-design(self)

set-current-design("output-usb-light")

make-default-board(main-board, 4, BOARD-SHAPE)
view-board()
view-schematic()