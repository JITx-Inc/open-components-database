#use-added-syntax(jitx)
defpackage ocdb/designs/ble-mote :
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import ocdb/utils/bundles
  import ocdb/utils/connects
  import ocdb/utils/design-vars
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/property-structs
  import ocdb/utils/checks


OPERATING-TEMPERATURE = min-max(-20.0 50.0)
OPTIMIZE-FOR = ["area"]
MIN-PKG = "0402"
MIN-CAP-VOLTAGE = 12.0
APPROVED-DISTRIBUTOR-LIST = ["JLCPCB"]


; PMS7003 particle counter interface via header pins
pcb-bundle pms7003-interface :
  port vin : power
  port vin-mcu : power
  pin reset
  pin set
  port uart : uart()

pcb-module pms7003 :
  port interface : pms7003-interface
  
  inst header : ocdb/components/amphenol/minitek127/component(10)
  place(header) at loc(0.0, 0.0) on Top
  net (interface.vin.gnd interface.vin-mcu.gnd header.p[3] header.p[4])
  net (interface.vin.vdd header.p[1] header.p[2])
  net (interface.uart.tx, header.p[10])
  net (interface.uart.rx, header.p[8])
  net (interface.reset, header.p[6])
  net (interface.set, header.p[9])
  res-strap(interface.vin-mcu.vdd, interface.set, 10.0e3)
  res-strap(interface.vin-mcu.vdd, interface.reset, 10.0e3)
  property(header.p[1].power-pin) = PowerPin(min-typ-max(4.5, 5.0, 5.5))
  property(header.p[10].digital-output) = DigitalOutput(CMOSOutput(min-max(0.3, 0.5), min-max(2.6, 3.3)), false, header.p[1], header.p[3])
  val vil = typ(0.8)
  val vih = typ(2.0)
  property(header.p[8].digital-input) =
    DigitalInput(vil, vih, header.p[1], header.p[3], 1.0e-6)
  property(header.p[6].digital-input) =
    DigitalInput(vil, vih, header.p[1], header.p[3], 1.0e-6)
  property(header.p[9].digital-input) =
    DigitalInput(vil, vih, header.p[1], header.p[3], 1.0e-6)

pcb-module sensors :
  port power-3v3 : power
  port debug : uart([UART-DTR UART-RTS UART-RX UART-TX])
  port particle-counter-interface : pms7003-interface
  port humidity-i2c : i2c

  ; Add USB connector
  public inst usb : usb2-on-a-usb-c-connector(ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/module(SinkDefault))

  ; Define ground net and assign symbol
  public net gnd (usb.usb-2.vbus.gnd)
  symbol(gnd) = ocdb/utils/symbols/ground-sym

  ; Create a protected power and data interface for USB-2
  val protected-usb = ocdb/modules/protection/esd-clamp(usb.usb-2, gnd)

  ; Specify a power regulator and name power nets
  public inst ldo : ocdb/components/diodes-incorporated/AP2112/module
  net (ldo.vin protected-usb.vbus)
  net P5V0 (ldo.vin.vdd ldo.en)
  net P3V3 (ldo.vout.vdd)

  net VBUS (usb.usb-2.vbus.vdd)
  symbol(P5V0) = ocdb/utils/symbols/supply-sym
  symbol(P3V3) = ocdb/utils/symbols/supply-sym

  property(VBUS.voltage) = min-max(4.8, 5.2)
  property(P5V0.voltage) = min-max(4.7, 5.1)
  property(P3V3.voltage) = tol%(3.3, 1.5)
  property(gnd.voltage) = typ(0.0)

  ; Use a connect statement to interface USB-2 to UART with bus-powered xcvr
  val cp2105 = connect-cp2105(protected-usb, debug)
  net (P3V3 cp2105.vio)

  ; Add a humidty sensor, connect over i2c, add pullups.
  public inst hum : ocdb/components/texas-instruments/HDC1080/module
  net H-I2C (humidity-i2c, hum.i2c)
  val i2c-pullups = add-open-drain-pullups(humidity-i2c, ldo.vout.vdd)

  ; Add the particle counter interface and place on bottom, and connect
  public inst particle-counter : pms7003

  net (particle-counter.interface particle-counter-interface)
  net (protected-usb.vbus particle-counter.interface.vin)

  ; Connect power to sensors
  net (ldo.vout, hum.power, particle-counter-interface.vin-mcu, power-3v3)

  ; ; Add probe loops
  val debug-tps = add-testpoint([ gnd
                                  debug.tx
                                  debug.rx
                                  debug.dtr
                                  debug.rts], ocdb/utils/generic-components/smd-testpoint-cmp(2.0))

  val power-tps = add-testpoint([ P5V0
                                  P3V3
                                  gnd ], ocdb/utils/generic-components/smd-testpoint-cmp(2.0))

  val hum-tps = add-testpoint([   hum.i2c.sda
                                  hum.i2c.scl], ocdb/utils/generic-components/smd-testpoint-cmp(2.0))

  val pms-tps = add-testpoint([   particle-counter-interface.uart.tx
                                  particle-counter-interface.uart.rx
                                  gnd ], ocdb/utils/generic-components/smd-testpoint-cmp(2.0))

  schematic-group([usb, ldo, cp2105, containing-instance(protected-usb) as JITXObject]) = power
  schematic-group([hum]) = humidity-sensor
  schematic-group([particle-counter]) = particle-counter
  schematic-group(debug-tps) = schematic-group(cp2105)

  layout-group([usb]) = usb
  layout-group([ldo]) = ldo
  layout-group([cp2105]) = cp2105
  layout-group([containing-instance(protected-usb) as JITXObject]) = power
  layout-group([hum]) = hum
  layout-group(particle-counter) = particle-counter

  ; Set up netclasses
  val power-net-class = NetClass(`Power, [`min-trace => 0.40])
  for n in [P5V0 P3V3 VBUS] do :
    property(n.net-class) = power-net-class

  ; Rules for JLC2313 Stackup, 45-Ohm characteristic impedance
  net D- (usb.usb-2.data.N)
  net D+ (usb.usb-2.data.P)
  val usb-net-class = NetClass(`USB, [`min-trace => 0.224])
  for n in [D- D+] do :
    property(n.net-class) = usb-net-class


pcb-module sensor-system (processor:Instantiable, board-outline:Rectangle):
  inst sensors : sensors

  val x = width(board-outline) / 2.0
  val y = height(board-outline) / 2.0
  place(sensors.usb) at loc(4.0 - x, 7.0 - y) on Top
  place(sensors.particle-counter) at loc(5.0 - x, y - 5.0, 180.0) on Bottom

  inst proc : processor
  net gnd (proc.gnd)

  if processor == ocdb/components/espressif/ESP32-PICO-D4/module :
    ; Add an antenna for the PICO-D4
    inst ant : inverted-f-antenna
    net (proc.ant, ant.rf-in)
    net (gnd ant.gnd)
    place(ant) at loc(x - 6.0, 14.0 - y, -90.0) on Top
    place(proc) at loc(x - 6.0, y - 12.0, -90.0) on Top
  else :
    place(proc) at loc(x - 6.0, y - 12.0, -90.0) on Top
    
  require i2c:i2c from proc
  require pc-uart:uart() from proc
  require pc-ctrl:gpio[2] from proc
  net (sensors.debug, proc.uart)
  net (sensors.power-3v3, proc.power)

  net (sensors.humidity-i2c i2c)
  net (sensors.particle-counter-interface.uart  pc-uart)
  net (sensors.particle-counter-interface.set   pc-ctrl[0].gpio)
  net (sensors.particle-counter-interface.reset pc-ctrl[1].gpio)

  ; Add a BRIGHT 60.0mcd RGB led indicator to the processor (to be visible outside)
  val rgb = add-rgb-indicator(60.0, proc, sensors.power-3v3.vdd)
  schematic-group(rgb) = schematic-group(proc)
  layout-group(rgb) = rgb

  ; Add a ground plane
  geom(gnd):
    copper-pour(LayerIndex(1), isolate = 0.1, rank = 1) = board-outline
    copper-pour(LayerIndex(2), isolate = 0.1, rank = 1) = board-outline

  inst logo : ocdb/artwork/jitx-logo/small(Silkscreen("artwork", Top), true)

  check-design(self)

; ==========================================
; Configure the design, then run or check it
; ==========================================
defn run-design (run-checks?:True|False -- module:Instantiable|False = false, shape:Rectangle|False = false, design-name:String = "ble-mote") :
  val outline = 
    match(shape) :
      (r:Rectangle) : r
      (_) :
        Rectangle(45.0, 30.0)
  val circuit = 
    match(module) :
      (m:Instantiable) : sensor-system(m, outline)
      (_) :
        sensor-system(ocdb/components/espressif/esp32-wroom-32/module(ocdb/components/espressif/esp32-wroom-32/ESP32-WROOM-32E-N16, true), outline)
  set-current-design(design-name)
  set-paper(ANSI-A)
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, outline))
  set-use-layout-groups()
  set-rules(ocdb/manufacturers/rules/jlcpcb-basic-rules)

  var main-module = circuit
  if run-checks? :
    main-module = ocdb/utils/generator-utils/run-final-passes(circuit) ; Analyze design with a pass

  set-main-module(main-module) ; Treat the provided module as a design, and compile it.

  if run-checks? :
    run-checks("checks.txt")
  else:
    view-board()
    view-schematic()
    ; view-design-explorer()

; ====================================
; Compile the design, view the results
; ====================================
defn compile-design () :
  run-design(false)

; =====================
; Run the design checks
; =====================
defn check-design () :
  run-design(true)

; ======================
; Export a design to CAD
; ======================
defn export-design () :
  set-export-backend(`kicad)
  export-bill-of-materials()
  export-cad()

; =================
; Export BOM to tsv
; =================
defn export-bill-of-materials () :
  set-bom-vendors(ocdb/utils/design-vars/APPROVED-DISTRIBUTOR-LIST)
  set-bom-design-quantity(ocdb/utils/design-vars/DESIGN-QUANTITY)
  export-bom()
  

; ============
; Run the code
; ============

val pico-shape = Rectangle(35.0, 20.0)
val wroom-shape = Rectangle(32.0, 22.0)

; You can try these 3 different calls to create your design.

; The first call instantiates a WROOM module with default board sizing 
run-design(false, design-name = "output-barfo")

; This call instantiates a WROOM module with the board sizing listed above.
; run-design(false, module = ocdb/components/espressif/esp32-wroom-32/module(ocdb/components/espressif/esp32-wroom-32/ESP32-WROOM-32E-N16, true), shape = wroom-shape, design-name = "ble-mote")

; This call instantiates a PICO-D4 module with the board sizing listed above.
; run-design(false, module = ocdb/components/espressif/ESP32-PICO-D4/module, shape = pico-shape, design-name = "ble-mote")
