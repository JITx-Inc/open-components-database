#use-added-syntax(jitx)
defpackage ocdb/designs/ble-mote :
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import ocdb/bundles
  import ocdb/connects
  import ocdb/defaults
  import ocdb/design-vars
  import ocdb/generator-utils
  import ocdb/generic-components
  import ocdb/property-structs
  import ocdb/checks
  import ocdb/rules
  import ocdb/tolerance


OPERATING-TEMPERATURE = [-20.0 50.0]
OPTIMIZE-FOR = ["cost"]
MIN-PKG = "0402"

val board-shape = Rectangle(30.0, 18.0)

; PMS7003 particle counter interface via header pins
pcb-module pms7003 :
  port vin : power
  port vin-mcu : power
  pin reset
  pin set
  port uart : uart()
  inst header : ocdb/amphenol/minitek127/component(10)
  place(header) at loc(0.0,0.0) on Top
  net (vin.gnd vin-mcu.gnd header.p[3] header.p[4])
  net (vin.vdd header.p[1] header.p[2])
  net (uart.tx, header.p[10])
  net (uart.rx, header.p[8])
  net (reset, header.p[6])
  net (set, header.p[9])
  res-strap(vin-mcu.vdd, set, 10.0e3)
  res-strap(vin-mcu.vdd, reset, 10.0e3)
  property(header.p[1].power-pin) = PowerPin(min-typ-max(4.5, 5.0, 5.5))
  property(header.p[10].digital-output) = DigitalOutput(CMOSOutput(min-max(0.3, 0.5), min-max(2.6, 3.3)), false, header.p[1], header.p[3])
  property(header.p[8].digital-input) = DigitalInput(0.8, 2.6, header.p[1], header.p[3], 1.0e-6)
  property(header.p[6].digital-input) = DigitalInput(0.8, 2.6, header.p[1], header.p[3], 1.0e-6)
  property(header.p[9].digital-input) = DigitalInput(0.8, 2.6, header.p[1], header.p[3], 1.0e-6)

pcb-module sensor-mote :
  ; Add USB connector
  public inst usb : micro-usb-connector
  place(usb.con) at loc(-10.0, -7.3) on Top

  ; Define ground net and assign symbol
  public net gnd (usb.usb-2.vbus.gnd)
  symbol(gnd) = ocdb/symbols/ground-sym

  ; Create a protected power and data interface for USB-2
  val protected-usb = ocdb/protection/esd-clamp(usb.usb-2, gnd) as JITXObject

  ; Specify a power regulator and name power nets
  public inst ldo : ocdb/diodes-incorporated/AP2112/module
  net (ldo.vin protected-usb.vbus)
  net P5V0 (ldo.vin.vdd ldo.en)
  net P3V3 (ldo.vout.vdd)
  symbol(P5V0) = ocdb/symbols/supply-sym
  symbol(P3V3) = ocdb/symbols/supply-sym

  ; Add a Bluetooth SoC
  public inst proc : ocdb/espressif/ESP32-PICO-D4/module
  public inst ant : inverted-f-antenna
  net (proc.ant, ant.rf-in)
  net (ant.gnd gnd)
  place(ant) at loc(9.0, 5.0, -90.0) on Top

  ; Use a connect statement to interface USB-2 to UART
  val cp2105 = connect-cp2105(protected-usb, proc.uart) as JITXObject

  ; Add a humidty sensor, connect over i2c, add pullups.
  public inst hum : ocdb/texas-instruments/HDC1080/module
  require i2c:i2c from proc
  net H-I2C (i2c, hum.i2c)
  val i2c-pullups = add-open-drain-pullups(i2c, ldo.vout.vdd)

  ; Add the particle counter interface and place on bottom, and connect
  public inst particle-counter : pms7003
  place(particle-counter) at loc(-10.0,5.0, 180.0) on Bottom

  require pc-ctrl:gpio[2] from proc
  net PC-RESET (pc-ctrl[0].gpio, particle-counter.reset)
  net PC-SET (pc-ctrl[1].gpio, particle-counter.set)

  require pc-uart:uart() from proc
  net PC-TX (pc-uart.rx particle-counter.uart.tx)
  net PC-RX (pc-uart.tx particle-counter.uart.rx)

  ; Connect power to proc and sensors
  net (hum.power, particle-counter.vin-mcu, proc.power, ldo.vout, cp2105.power)
  net (proc.power.vdd, cp2105.vio)
  net (protected-usb.vbus particle-counter.vin)

  ; Add a BRIGHT 60.0mcd RGB led indicator to the processor (to be visible outside)
  val rgb = add-rgb-indicator(60.0, proc, P3V3)

  ; Add probe loops
  val debug-tps = add-testpoint([ proc.uart.tx
                                  proc.uart.rx
                                  proc.en
                                  gnd
                                  proc.boot], Testpoint-SMDLoop)

  val power-tps = add-testpoint([ P5V0
                                  P3V3
                                  gnd ], Testpoint-SMDLoop)

  val hum-tps = add-testpoint([   hum.i2c.sda
                                  hum.i2c.scl], Testpoint-SMDLoop)

  val pms-tps = add-testpoint([   PC-TX
                                  PC-RX
                                  gnd ], Testpoint-SMDLoop)
 

  ; Add a ground plane
  geom(gnd):
    copper-pour(LayerIndex(1), isolate = 0.1, rank = 1) = board-shape
    copper-pour(LayerIndex(2), isolate = 0.1, rank = 1) = board-shape

; Add artwork
  inst pcb-name: ocdb/board-text/text("PCB, BLE MOTE", 1.5, clearance(current-rules(), MinSilkscreenWidth) )
  inst ver-rev : ocdb/board-text/text("v0 rev0", 1.0, 0.0)
  inst logo : ocdb/jitx-logo/small(Silkscreen("artwork", Top),true)
  inst assy-label : ocdb/mechanical/gen-label()
  place(pcb-name) at loc(0.0,-0.5) on Bottom
  place(ver-rev) at loc(10.0,3.0) on Bottom
  place(logo) at loc(0.0,4.0, 0.0) on Bottom
  place(assy-label) at loc(5.0,-5.25, 0.0) on Bottom

  ; Apply groups to sub-circuits for schematic and layout
  schematic-group([proc, ant, debug-tps rgb, i2c-pullups]) = esp32
  schematic-group([usb, ldo, cp2105, power-tps containing-instance(protected-usb) as JITXObject]) = power
  schematic-group([hum hum-tps]) = humidity-sensor
  schematic-group([particle-counter pms-tps]) = particle-counter

  layout-group([proc, ant]) = proc
  layout-group([usb, ldo, cp2105 containing-instance(protected-usb) as JITXObject]) = power
  layout-group([hum hum-tps]) = hum
  layout-group(particle-counter) = particle-counter

  net VBUS (usb.usb-2.vbus.vdd)
  net D- (usb.usb-2.data.N)
  net D+ (usb.usb-2.data.P)

  ; Set up netclasses
  val power-net-class = NetClass(`Power, [`min-trace => 0.50])
  for n in [P5V0 P3V3 VBUS] do :
    property(n.net-class) = power-net-class
  ; Rules for JLC2313 Stackup, 45-Ohm characteristic impedance
  val usb-net-class = NetClass(`USB, [`min-trace => 0.224 `min-space => 0.3])
  for n in [D- D+] do :
    property(n.net-class) = usb-net-class

  check-design(self)

val final-design = run-final-passes(sensor-mote)

; === Setup visualizations and exports ===
; Set the active design directory for CAD
set-design-directory("hardware/ble-mote")
; Configure design to have a default 4-layer stackup and design rules.
set-main-module(final-design)
set-board(default-board(4, board-shape))
set-rules(jlcpcb-rules)
run-checks("checks.txt")

set-paper(ANSI-A4)

; Show the Schematic and PCB for the design
view-board()
view-schematic()

; Export CAD
; set-export-board?(false)
; export-cad()

; Solve and export Bill of Materials
; export-bom()

