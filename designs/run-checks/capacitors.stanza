#use-added-syntax(jitx)
defpackage ocdb/designs/run-checks/capacitors :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/property-structs
  import ocdb/utils/box-symbol
  import ocdb/utils/passive-checks/resonator-checks
  import ocdb/utils/generator-utils
  import ocdb/utils/micro-controllers
  import ocdb/utils/design-vars
  import ocdb/utils/generic-components

;==============================================================================
;============================== Ceramics ======================================
;==============================================================================
pcb-component ceramic-cap-pass :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = resistor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "ceramic"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-9
  property(self.rated-voltage)     = 24.0

pcb-component ceramic-cap-fail :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = resistor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "ceramic"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-9
  property(self.rated-voltage)     = 1.0

pcb-component ceramic-cap-info :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = resistor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

;==============================================================================
;================================ Electrolytics ===============================
;==============================================================================

pcb-component electrolytic-cap-pass :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "electrolytic"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 24.0
  property(self.anode)             = "tantalum"
  property(self.electrolyte)       = "manganese-dioxide"
  property(self.rated-current-pk)  = 1.0e-6

pcb-component electrolytic-cap-fail :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "electrolytic"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 1.0
  property(self.anode)             = "tantalum"
  property(self.electrolyte)       = "manganese-dioxide"
  property(self.rated-current-pk)  = 1.0e-6

pcb-component electrolytic-cap-info :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

;==============================================================================
;==================================== Mica ====================================
;==============================================================================
pcb-component mica-cap-pass :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "mica"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 24.0

pcb-component mica-cap-fail :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "mica"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 5.0

pcb-component mica-cap-info :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

;==============================================================================
;==================================== Mylar ===================================
;==============================================================================
pcb-component mylar-cap-pass :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "mylar"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 24.0

pcb-component mylar-cap-fail:
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.capacitor)         = true
  property(self.type)              = "mylar"
  property(self.rated-temperature) = min-max(-100.0, 100.0)
  property(self.capacitance)       = 1.0e-6
  property(self.rated-voltage)     = 1.0

pcb-component mylar-cap-info :
  reference-prefix = "C"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = capacitor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])


public pcb-module capacitors :
  port power : ocdb/utils/bundles/power
  inst Creal : ceramic-cap(1.0e-9)

  inst C-cer-pass: ceramic-cap-pass
  inst C-cer-fail: ceramic-cap-fail
  inst C-cer-info: ceramic-cap-info
  
  inst C-elec-pass: electrolytic-cap-pass
  inst C-elec-fail: electrolytic-cap-fail
  inst C-elec-info: electrolytic-cap-info
  
  inst C-mica-pass: mica-cap-pass
  inst C-mica-fail: mica-cap-fail
  inst C-mica-info: mica-cap-info
  
  inst C-mylar-pass: mylar-cap-pass
  inst C-mylar-fail: mylar-cap-fail
  inst C-mylar-info: mylar-cap-info

  net VDD ( power.vdd, 
            Creal.p[1], 
            C-cer-pass.p[1],
            C-cer-fail.p[1],
            C-cer-info.p[1],
            C-elec-pass.p[1],
            C-elec-fail.p[1],
            C-elec-info.p[1],
            C-mica-pass.p[1],
            C-mica-fail.p[1],
            C-mica-info.p[1],
            C-mylar-pass.p[1],
            C-mylar-fail.p[1],
            C-mylar-info.p[1] )

  net GND ( power.gnd, 
            Creal.p[2], 
            C-cer-pass.p[2],
            C-cer-fail.p[2],
            C-cer-info.p[2],
            C-elec-pass.p[2],
            C-elec-fail.p[2],
            C-elec-info.p[2],
            C-mica-pass.p[2],
            C-mica-fail.p[2],
            C-mica-info.p[2],
            C-mylar-pass.p[2],
            C-mylar-fail.p[2],
            C-mylar-info.p[2] )
  