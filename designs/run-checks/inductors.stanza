#use-added-syntax(jitx)
defpackage ocdb/designs/run-checks/inductors :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/property-structs
  import ocdb/utils/box-symbol
  import ocdb/utils/passive-checks/resonator-checks
  import ocdb/utils/generator-utils
  import ocdb/utils/micro-controllers
  import ocdb/utils/design-vars
  import ocdb/utils/generic-components

pcb-component inductor-pass :
  reference-prefix = "L"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = inductor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.inductor)       = true
  property(self.dc-resistance)  = 16.0
  property(self.rated-power)    = 5.0
  property(self.inductance)     = 1.0e-6
  property(self.rated-temperature) = min-max(-55.0, 100.0)

pcb-component inductor-fail :
  reference-prefix = "L"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = inductor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.inductor)       = true
  property(self.dc-resistance)  = 16.0
  property(self.rated-power)    = 0.25
  property(self.inductance)     = 1.0e-6
  property(self.rated-temperature) = min-max(-55.0, 100.0)

pcb-component inductor-info :
  reference-prefix = "L"

  pin-properties :
    [ pin : Ref | pads : Int ... ]
    [ p[1]      | 1              ]
    [ p[2]      | 2              ]
  
  assign-landpattern(ipc-two-pin-landpattern("0603"))
  val sym = inductor-sym()
  symbol =
    sym(self.p[1] => sym.p[1], self.p[2] => sym.p[2])

  property(self.inductor)       = true

public pcb-module inductors :
  port power : ocdb/utils/bundles/power
  val answer = dbquery(["category" => "inductor", "inductance" => 1.0e-6], 1)
  inst Lreal : smd-inductor(1.0e-6)
  inst Lpass : inductor-pass
  inst Lfail : inductor-fail
  inst Linfo : inductor-info
  net VDD (power.vdd, Lreal.p[1], Lpass.p[1], Lfail.p[1], Linfo.p[1])
  net GND (power.gnd, Lreal.p[2], Lpass.p[2], Lfail.p[2], Linfo.p[2])
