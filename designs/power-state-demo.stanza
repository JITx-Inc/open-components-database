#use-added-syntax(jitx)
defpackage ocdb/designs/power-state-demo :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/landpatterns
  import ocdb/utils/property-structs
  import ocdb/utils/netlist-checks/all
  import ocdb/utils/netlist-checks/utils

pcb-landpattern soic127-p8:
  make-n-pin-soic-landpattern(8,
                              1.27,
                              tol(6.0, 0.2),
                              tol(3.9, 0.1),
                              tol(4.9, 0.1),
                              min-typ-max(0.4, 1.04, 1.27),
                              min-typ-max(0.28, 0.38, 0.48),
                              false)

pcb-component Microcontroller :
  pin-properties :
    [pin: Ref | pads: Ref ... ]
    [vcc      | p[1]          ]
    [gnd      | p[8]          ]
    [sda      | p[2]          ]
    [scl      | p[3]          ]
    [sleep    | p[4]          ]

  make-box-symbol()
  assign-landpattern(soic127-p8)
  supports i2c :
    i2c.sda => self.sda
    i2c.scl => self.scl

  val io = DigitalIO(logic-family,
                     vil,
                     vih,
                     vdd-pin,
                     gnd-pin,
                     leakage-current) where :
    val logic-family = OpenCollector(tol(5.0, 1.0), 1.0)
    val vil = typ(3.3)
    val vih = typ(5.5)
    val vdd-pin = self.vcc
    val gnd-pin = self.gnd
    val leakage-current = 0.100

  property(self.vcc.power-pin)  = PowerPin(tol(5.0, 1.0))
  property(self.sda.digital-io) = io
  property(self.scl.digital-io) = io

pcb-component Peripheral :
  pin-properties :
    [pin: Ref | pads: Ref ... ]
    [vcc      | p[1]          ]
    [gnd      | p[8]          ]
    [sda      | p[6]          ]
    [scl      | p[7]          ]

  make-box-symbol()
  assign-landpattern(soic127-p8)
  supports i2c :
    i2c.sda => self.sda
    i2c.scl => self.scl

  val io = DigitalIO(logic-family,
                     vil,
                     vih,
                     vdd-pin,
                     gnd-pin,
                     leakage-current) where :
    val logic-family = OpenCollector(tol(5.0, 1.0), 1.0)
    val vil = typ(3.3)
    val vih = typ(5.5)
    val vdd-pin = self.vcc
    val gnd-pin = self.gnd
    val leakage-current = 0.100

  property(self.vcc.power-pin)  = PowerPin(tol(5.0, 1.0))
  property(self.sda.digital-io) = io
  property(self.scl.digital-io) = io

pcb-component Regulator :
  pin-properties :
    [ pin:Ref | pads:Ref ... ]
    [ vin     | p[1]         ]
    [ vout    | p[2]         ]
    [ active  | p[3]         ]
  assign-landpattern(SOT23-3)
  make-box-symbol()
  property(self.vin.power-pin)  = PowerPin(tol(5.0, 1.0))
  property(self.vout.power-pin) = PowerPin(tol(5.0, 1.0))

pcb-module sub-module :
  pin scl
  pin sda
  pin vcc
  pin gnd
  public inst peripheral : Peripheral
  net (peripheral.vcc, vcc)
  net (peripheral.gnd, gnd)

  require i2c* : i2c from peripheral
  net (i2c*.scl, scl)
  net (i2c*.sda, sda)

pcb-module main-module :
  ; Some power supply
  inst vcc : gen-testpad(1.0)
  inst gnd : gen-testpad(1.0)

  ; we have a few components, an MCU,
  ; some peripheral, and some regulator
  inst mcu        : Microcontroller
  inst peripheral : sub-module ; note: this is a hierarchical design!
  inst regulator  : Regulator

  require i2c* : i2c from mcu

  ; connect the mcu to the peripheral with
  ; some digital i/o and power
  net (mcu.sda, peripheral.peripheral.sda)
  net (mcu.scl, peripheral.peripheral.scl)
  net (vcc.p, regulator.vin, mcu.vcc)
  net (regulator.vout, peripheral.vcc)
  net (mcu.gnd, peripheral.gnd)
  net (mcu.sleep, regulator.active)

  ; Annotate the power states for the MCU, it is powered off (false)
  ; in the "hibernate" state
  for p in [mcu.sda, mcu.scl] do :
    set-power-states(p, ["wake"      => true,
                         "hibernate" => false])

  ; We notate that this component propagates
  set-property(regulator, `power-supply-component, true)

  ; We set the power states of the output regulator.
  set-power-states(regulator.vout, [
    "wake"      => true,
    "hibernate" => true ; this state will cause an expected failure in the check report because of a mismatch
  ])

  place(mcu)        on Top
  place(peripheral) on Top
  place(regulator)  on Top

  propagate-power-states(self)
  check power-states(self)

set-current-design("output-power-state-demo")
set-main-module(main-module)
assign-pins()
run-checks("checks.txt")
