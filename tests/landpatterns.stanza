#use-added-syntax(jitx, tests)
defpackage ocdb/tests/landpatterns :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/design-vars
  import ocdb/utils/landpatterns
  import ocdb/utils/box-symbol
  import ocdb/manufacturers/rules
  import ocdb/utils/generic-components
  import ocdb/utils/symbols
  import ocdb/utils/land-protrusions

pcb-module soic-lands:
  pcb-landpattern SO8N (thermal?:True|False):
    val shape? = Rectangle(3.0, 4.8) when not thermal? else false
    make-n-pin-soic-landpattern(8, 1.27, tol(6.0, 0.2), tol(3.9, 0.1), tol(4.9, 0.1), min-typ-max(0.4, 1.04, 1.27), min-typ-max(0.28, 0.38, 0.48), shape?)
  
  pcb-component soic-component (thermal?:True|False):
    port p: pin[1 through 8]
    val lp = SO8N(thermal?)
    landpattern = lp(
      for n in 1 through 8 do:
        p[n] => lp.p[n]
    )
    make-box-symbol()
  
  inst u1: soic-component(true)
  inst u2: soic-component(false)
  place(u1) on Top
  place(u2) on Top

pcb-module quad-lands:
  pcb-landpattern LQFP48 (thermal?:True|False):
    val shape? = Rectangle(5.0, 5.0) when not thermal? else false
    make-qfp-landpattern(48, ; number of pins 
                        0.5,  ; pitch ("e")
                        tol(9.0, 0.2),   ; outer size (lead-to-lead), "D" and "E"
                        tol(7.0, 0.2),   ; package size, "D1" and "E1"
                        tol(0.6, 0.15),  ; lead size, x direction (for p[1]), "L"
                        tol(0.22, 0.05), ; lead size, y direction (for p[1]), "b"
                        shape?)
  pcb-component qfp-component (thermal?:True|False):
    port p: pin[1 through 48]
    val lp = LQFP48(thermal?)
    landpattern = lp(
      for n in 1 through 48 do:
        p[n] => lp.p[n]
    )
    make-box-symbol()

  pcb-landpattern MLPQ-UT8:
    make-qfn-landpattern([3, 1, 3, 1],   ; number of pins on each side (Up, Down, Left, Right)
                        0.4,             ; pitch
                        tol(1.5, 0.0),   ; package dimensions 
                        tol(0.35, 0.05), ; lead size, x direction (for p[1])
                        tol(0.20, 0.05)) ; lead size, y direction (for p[1])
  pcb-component qfn-component:
    port p: pin[1 through 8]
    val lp = MLPQ-UT8
    landpattern = lp(
      for n in 1 through 8 do:
        p[n] => lp.p[n]
    )
    make-box-symbol()

  inst u3: qfp-component(true)
  inst u4: qfp-component(false)
  inst u5: qfn-component
  place(u3) on Top
  place(u4) on Top
  place(u5) on Top

pcb-component vishay-resistor-1005 :
  name = "Generic Vishay Resistor"
  description = "Generic chip resistor, 1005 package"
  reference-prefix = "R"
  port p: pin[[1, 2]]

  val lp  = two-pin-chip-landpattern(
    tol(1.0, 0.05),
    tol(0.5, 0.05),
    tol(0.25, 0.05),
    false
  )
  
  val sym = resistor-sym()
  
  landpattern = 
    lp(p[1] => lp.p[1], p[2] => lp.p[2])
  symbol = 
    sym(p[1] => sym.p[1], p[2] => sym.p[2])

pcb-component example-resistor:
  port p: pin[[1, 2]]
  reference-prefix = "R"
  val lp = two-pin-chip-landpattern(
    tol(1.0, 0.05, 0.06)  ; length of the component
    tol(0.5,  0.05)  ; width of the component
    tol(0.25, 0.05) ; lead length of the component
    DensityLevelC ; density-level,
    false         ; polarized?:True|False,
  )
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])
  make-box-symbol()
  
pcb-component example-capacitor:
  pin a
  pin c
  reference-prefix = "C"
  pcb-landpattern lp:
    make-two-pin-chip-landpattern(
      tol(3.2, 0.2),
      tol(1.6, 0.2),
      tol(0.8, 0.3),
      tol(1.2, 0.1),
      DensityLevelC,
      true,
    )

  landpattern = lp(a => lp.a, c => lp.c)
  make-box-symbol()

pcb-module main-module:
  inst e1: example-resistor
  inst e2: example-capacitor
  inst e3: quad-lands
  inst e4: soic-lands
  place(e1) on Top
  place(e2) on Top
  place(e3) on Top 
  place(e4) on Top

deftest(ocdb, landpattern) test-landpatterns :
  set-rules(sierra-adv-rules)
  make-default-board(main-module, 2, Rectangle(50.0, 50.0))
  view-board()
