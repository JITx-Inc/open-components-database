#use-added-syntax(tests)
defpackage ocdb/test/tolerances:
  import core
  import collections
  import ocdb/tolerance

deftest constructors:
  let:
    val tolerance = tol(1.0, 0.25, 0.5)
    println(tolerance)
    #EXPECT(min-value(tolerance) == 0.5)
    #EXPECT(max-value(tolerance) == 1.25)
  let:
    val tolerance = tol%(2.0, 0.5, 0.25)
    println(tolerance)
    #EXPECT(min-value(tolerance) == 1.5)
    #EXPECT(max-value(tolerance) == 3.0)
  let:
    val tolerance = min-typ-max(0.25, 0.5, 1.0)
    println(tolerance)
    #EXPECT(min-value(tolerance) == 0.25)
    #EXPECT(max-value(tolerance) == 1.00)
    #EXPECT(typ(tolerance) == 0.5)
  let:
    val tolerance = tol(1.0, 0.5)
    #EXPECT(min-value(tolerance) == 0.5)
    #EXPECT(max-value(tolerance) == 1.5)
    #EXPECT(center(tolerance) == 1.0)

defn expect-fatal (body:() -> ?):
  var caught? = false
  execute-with-error-handler(
    body,
    fn (): caught? = true
  )
  #EXPECT(caught?)

deftest percentages: 
  let: 
    val tolerance = min-typ-max(0.75, 1.0, 1.5)
    #EXPECT(tol-%(tolerance) == 0.25)
    #EXPECT(tol+%(tolerance) == 0.50)
  let:
    val tolerance = tol(0.0, 0.5)
    within expect-fatal():
      tol+%(tolerance)
    within expect-fatal():
      tol-%(tolerance)
    
deftest range:
  let:
    val tolerance = tol(1.0, 0.25)
    #EXPECT(tolerance-range(tolerance) == 0.5)
    #EXPECT(in-range?(tolerance, 1.15))
    #EXPECT(not in-range?(tolerance, 3.0))

deftest printer:
  let:
    val tolerance = min-typ-max(0.25, 0.5, 0.75)
    #EXPECT(to-string(tolerance) == "Toleranced(0.25 <= 0.5 <= 0.75)")
