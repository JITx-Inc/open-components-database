#use-added-syntax(jitx, tests)
defpackage ocdb/tests/connects : 
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/connects
  import ocdb/utils/bundles

defn expect-fatal (body:() -> ?):
  var caught? = false
  execute-with-error-handler(
    body,
    fn (e): caught? = true
  )
  #EXPECT(caught?)

deftest(ocdb, connects) test-connect-i2c-isolation:
  pcb-module M1:
    port p: i2c[[1, 2]]
    connect-i2c-isolation(p[1], p[2])
  
  pcb-module M2:
    port p: i2c[[1, 2]]
    connect-i2c-isolation(p[1], p[2], M1)

  pcb-module M3:
    port x: i2c
    port y: gpio
    var caught? = false
    within expect-fatal():
      connect-i2c-isolation(x, y)
     
  for mod in [M1, M2, M3] do:
    print-def(mod)

deftest(ocdb, connects) test-connect-phy:
  pcb-module M1:
    port x: rgmii
    port y: ethernet-1000
    connect-phy(x, y)
  pcb-module M2:
    port x: rgmii
    port y: gpio
    within expect-fatal():
      connect-phy(x, y)
  pcb-module M3:
    port x: gpio
    port y: ethernet-1000
    within expect-fatal():
      connect-phy(x, y)
  for mod in [M1, M2, M3] do:
    print-def(mod)

deftest(ocdb, connects) test-connect-ft2332:
  pcb-module M1:
    port x: usb-2
    port y: uart([UART-DTR, UART-RTS, UART-RX, UART-TX])
    connect-ft232(x, y)

  pcb-module M2:
    port x: usb-2
    port y: gpio
    within expect-fatal():
      connect-ft232(x, y)

  pcb-module M3:
    port x: gpio
    port y: uart([UART-DTR, UART-RTS, UART-RX, UART-TX])
    within expect-fatal():
      connect-ft232(x, y)
    
  for mod in [M1, M2, M3] do:
    print-def(mod)
