#use-added-syntax(jitx, tests)
defpackage ocdb/tests/symbols :
  import core
  import jitx
  import jitx/commands

  import ocdb/utils/defaults
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/landpatterns
  import ocdb/utils/bundles
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/modules/terminations
  import ocdb/utils/symbol-utils

val res-syms = [
                ResistorStd
                ResistorVariable
                ResistorPot
                ResistorPhoto
                ResistorTherm ]

val cap-syms = [
                CapacitorPolarized
                CapacitorNonPolarized ]  

val ind-syms = [
                InductorStd
                InductorIronCore
                InductorFerriteCore
                InductorVariable
                InductorPreset ]

val dio-syms = [
                DiodeStd
                DiodeLED
                DiodePhoto
                DiodeZener
                DiodeSchottky 
                DiodeTVSUnipolar
                DiodeTVSBipolar ]

val bjt-syms = [
                BJTNpn
                BJTPnp ]

val fet-syms = [ 
                FETNType
                FETNmos
                FETPType
                FETPmos ]

val fet-mode-syms = [
                    FETEnhancement
                    FETDepletion ]

pcb-component test-res (r:ResistorSymbolType):
  port p : pin[[1 2]]
  val rs = resistor-sym(r)
  symbol = rs(p[1] => rs.p[1], p[2] => rs.p[2])
  val lp = ipc-two-pin-landpattern("0402")
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])
 
pcb-component test-cap (c:Polarized) :
  port p : pin[[1 2]]
  val cs = capacitor-sym(c)
  symbol = cs(p[1] => cs.p[1], p[2] => cs.p[2])
  val lp = ipc-two-pin-landpattern("0402")
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])

pcb-component test-ind (l:InductorSymbolType) :
  port p : pin[[1 2]]
  val ls = inductor-sym(l)
  symbol = ls(p[1] => ls.p[1], p[2] => ls.p[2])
  val lp = ipc-two-pin-landpattern("0402")
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])

pcb-component test-dio (d:DiodeSymbolType) :
  port p : pin[[1 2]]
  val ds = diode-sym(d)
  symbol = ds(p[1] => ds.a, p[2] => ds.c)
  val lp = ipc-two-pin-landpattern("0402")
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])

pcb-component test-tvs () :
  port p : pin[[1 2]]
  val ds = diode-tvs
  symbol = ds(p[1] => ds.a, p[2] => ds.c)
  val lp = ipc-two-pin-landpattern("0402")
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])

pcb-component test-bjt (b:BJTSymbolType) :
  port p : pin[[1 2 3]]
  val bs = bjt-sym(b)
  symbol = bs(p[1] => bs.e, p[2] => bs.c, p[3] => bs.b)
  val lp = dummy-landpattern(3, [0.0, 0.0])
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2], p[3] => lp.p[3])

pcb-component test-fet (ft:FETSymbolType, fm:FETSymbolMode, d?:True|False, b?:True|False ) :
  val fs = fet-sym(ft, fm, d?, b?)
  if b? == true :
    port p : pin[[1 2 3 4]]
    symbol = fs(p[1] => fs.g, p[2] => fs.s, p[3] => fs.d, p[4] => fs.b)
    val lp = dummy-landpattern(4, [0.0, 0.0])
    landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2], p[3] => lp.p[3], p[4] => lp.p[4])
  else :
    port p : pin[[1 2 3]]
    symbol = fs(p[1] => fs.g, p[2] => fs.s, p[3] => fs.d)
    val lp = dummy-landpattern(3, [0.0, 0.0])
    landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2], p[3] => lp.p[3])

pcb-module test-symbols :
  var resistors = Array<JITXObject>(length(res-syms))
  for (r in res-syms, i in 0 to false) do :
    inst r1 : test-res(r)
    resistors[i] = r1

  var capacitors = Array<JITXObject>(length(cap-syms))
  for (c in cap-syms, i in 0 to false) do :
    inst c1 : test-cap(c)
    capacitors[i] = c1

  var inductors = Array<JITXObject>(length(ind-syms))
  for (l in ind-syms, i in 0 to false) do :
    inst l1 : test-ind(l)
    inductors[i] = l1

  var diodes = Array<JITXObject>(length(dio-syms))
  for (d in dio-syms, i in 0 to false) do :
    inst d1 : test-dio(d)
    diodes[i] = d1

  inst tvs1 : test-tvs()

  var bjts = Array<JITXObject>(length(bjt-syms))
  for (b in bjt-syms, i in 0 to false) do :
    inst b1 : test-bjt(b)
    bjts[i] = b1

  var fets = Array<JITXObject>(2 * 2 * length(fet-syms) * length(fet-mode-syms))
  var index:Int = 0
  for (f in fet-syms) do :
      for (m in fet-mode-syms) do :
          for (d? in [true false]) do :
            for (b? in [true false]) do :
                inst f1 : test-fet(f, m, d?, b?)
                fets[index] = f1
                index = index + 1

deftest(ocdb, symbols, design) test-symbols-in-design :
  make-default-board(test-symbols, 4, Rectangle(25.0, 25.0))
  view-schematic()

  ;not really asserting or expecting anything but a test needs these statements to run
  #EXPECT(true)  ; all EXPECT statements are evaluated, even if any fail
  #ASSERT(true)  ; if any ASSERT is false, test fails immediately
