#use-added-syntax(tests)
defpackage ocdb/tests/tolerances :
  import core
  import collections
  import ocdb/utils/tolerance

deftest(ocb, tolerances) constructors:
  let:
    val tolerance = tol(1.0, 0.25, 0.5)
    println(tolerance)
    #EXPECT(min-value(tolerance) == 0.5)
    #EXPECT(max-value(tolerance) == 1.25)
  let:
    val tolerance = tol%(2.0, 50.0, 25.0)
    println(tolerance)
    #EXPECT(min-value(tolerance) == 1.5)
    #EXPECT(max-value(tolerance) == 3.0)
  let:
    val tolerance = min-typ-max(0.25, 0.5, 1.0)
    println(tolerance)
    #EXPECT(min-value(tolerance) == 0.25)
    #EXPECT(max-value(tolerance) == 1.00)
    #EXPECT(typ-value(tolerance) == 0.5)
  let:
    val tolerance = min-typ-max(0.35, false, 1.65)
    println(tolerance)
    println(1.00 - typ-value(tolerance))
    #EXPECT(min-value(tolerance) == 0.35)
    #EXPECT(max-value(tolerance) == 1.65)
    #EXPECT(typ-value(tolerance) - 1.00 < 1.0e-10)
  let:
    val tolerance = tol(1.0, 0.5)
    #EXPECT(min-value(tolerance) == 0.5)
    #EXPECT(max-value(tolerance) == 1.5)
    #EXPECT(center-value(tolerance) == 1.0)

defn expect-fatal (body:() -> ?):
  var caught? = false
  execute-with-error-handler(
    body,
    fn (e): caught? = true
  )
  #EXPECT(caught?)

deftest(ocb, tolerances) percentages: 
  let: 
    val tolerance = min-typ-max(0.75, 1.0, 1.5)
    println(tolerance)
    #EXPECT(tol-%(tolerance) == 25.0)
    #EXPECT(tol+%(tolerance) == 50.0)
  let:
    val tolerance = tol(0.0, 0.5)
    within expect-fatal():
      tol+%(tolerance)
    within expect-fatal():
      tol-%(tolerance)

deftest(ocb, tolerances) small-tol-sym-warning:
  let:
    val tolerance = tol%(1.0, 0.25)
    val tol-expected = Toleranced(0.005, 0.0051, 0.0049)
    println(tolerance)
    #EXPECT(in-range?(tol-expected, tolerance-range(tolerance)))
    #EXPECT(in-range?(tolerance, 1.0025))
    #EXPECT(not in-range?(tolerance, 3.0))

deftest(ocb, tolerances) small-tol-warning:
  let:
    val tolerance = tol%(1.0, 0.25, 0.25)
    val tol-expected = Toleranced(0.005, 0.0051, 0.0049)
    println(tolerance)
    #EXPECT(in-range?(tol-expected, tolerance-range(tolerance)))
    #EXPECT(in-range?(tolerance, 1.0025))
    #EXPECT(not in-range?(tolerance, 3.0))

deftest(ocb, tolerances) range:
  let:
    val tolerance = tol(1.0, 0.25)
    #EXPECT(tolerance-range(tolerance) == 0.5)
    #EXPECT(in-range?(tolerance, 1.15))
    #EXPECT(not in-range?(tolerance, 3.0))

deftest(ocb, tolerances) ordered-input:
  let:
    within expect-fatal():
      min-max(1.0, 0.5)
    within expect-fatal():
      min-max(-1.0, -2.0)
    within expect-fatal():
      min-typ-max(1.0, 0.75, 0.5)
    within expect-fatal():
      min-typ-max(-1.0, 1.0, -2.0)
    #EXPECT(min-value(min-typ-max(-10.0, -1.0, -0.1)) == min-value(tol(-1.0, 0.9, 9.0)))
    #EXPECT(max-value(min-typ-max(-10.0, -1.0, -0.1)) == max-value(tol(-1.0, 0.9, 9.0)))
    #EXPECT(typ-value(min-typ-max(-10.0, -1.0, -0.1)) == typ-value(tol(-1.0, 0.9, 9.0)))

deftest(ocb, tolerances) printer:
  let:
    val tolerance = min-typ-max(0.25, 0.5, 0.75)
    #EXPECT(to-string(tolerance) == "Toleranced(0.25 <= 0.5 <= 0.75)")
