#use-added-syntax(jitx, tests)
defpackage ocdb/tests/part-query :
  import core
  import collections
  import ocdb/utils/db-parts
  import json
  import ocdb/utils/generic-components
  import jitx/commands

deftest(odcb, part-query) resistors :
  for attribute in ["manufacturer", "mpn", "resistance", "trust", "dimensions", "mounting", "case", "stock", "price", "minimum_quantity", "type", "composition", "rated-power", "tcr", "metadata.datasheets", "metadata.image", "metadata.digi-key-part-number", "metadata.description", "metadata.packaging", "metadata.series", "metadata.features", "metadata.supplier-device-package", "metadata.number-of-terminations"] do :
    val values = look-up-resistors(attribute)
    if length(values) <= 150 :
      println("| %_ | %@ |" % [attribute, values])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])

  for attribute in ["rated-temperature", "tolerance"] do :
    val values =  to-tuple $ filter({_ is JObject}, look-up-resistors(attribute))
    if length(values) <= 150 :
      println("| %_ (min, max) | %@ |" % [attribute, map({"(%_, %_)" % [_0["min"], _0["max"]]}, values)])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])

  for attribute in ["tcr"] do :
    val values =  to-tuple $ filter({_ is JObject}, look-up-resistors(attribute))
    if length(values) <= 150 :
      println("| %_ (neg, pos) | %@ |" % [attribute, map({"(%_, %_)" % [_0["neg"], _0["pos"]]}, values)])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])

deftest(odcb, part-query) inductors :
  for attribute in ["manufacturer", "mpn", "inductance", "trust", "dimensions", "mounting", "case", "stock", "price", "minimum_quantity", "type", "material-core", "shielding", "current-rating", "saturation-current", "dc-resistance", "quality-factor", "self-resonant-frequency", "metadata.datasheets", "metadata.image", "metadata.digi-key-part-number", "metadata.description", "metadata.packaging"] do :
    val values = look-up-inductors(attribute)
    if length(values) <= 250 :
      println("| %_ | %@ |" % [attribute, values])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])

  for attribute in ["rated-temperature", "tolerance"] do :
    val values =  to-tuple $ filter({_ is JObject}, look-up-inductors(attribute))
    if length(values) <= 100 :
      println("| %_ (min, max) | %@ |" % [attribute, map({"(%_, %_)" % [_0["min"], _0["max"]]}, values)])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])

deftest(odcb, part-query) capacitors :
  for attribute in ["manufacturer", "mpn", "capacitance", "trust", "dimensions", "mounting", "case", "stock", "price", "minimum_quantity", "type", "anode", "electrolyte", "esr", "esr_frequency", "rated-voltage", "rated-voltage-ac", "rated-current-pk", "rated-current-rms", "temperature-coefficient.code", "temperature-coefficient.lower-temperature", "temperature-coefficient.raw_data", "temperature-coefficient.tolerance", "temperature-coefficient.upper-temperature", "temperature-coefficient.value", "metadata.datasheets", "metadata.image", "metadata.digi-key-part-number", "metadata.description", "metadata.packaging", "metadata.lifetime-temp", "metadata.applications", "metadata.ripple-current-low-frequency", "metadata.ripple-current-high-frequency", "metadata.lead-spacing"] do :
    val values = look-up-capacitors(attribute)
    if length(values) <= 200 :
      println("| %_ | %@ |" % [attribute, values])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])
  for attribute in ["rated-temperature", "tolerance", "temperature-coefficient.change"] do :
    val values =  to-tuple $ filter({_ is JObject}, look-up-capacitors(attribute))
    if length(values) <= 100 :
       println("| %_ (min, max) | %@ |" % [attribute, map({"(%_, %_)" % [_0["min"], _0["max"]]}, values)])
    else :
      println("| %_ | %_ values |" % [attribute, length(values)])

deftest(odcb, part-query) tantalum-cap-instantiation-1uf : 
  pcb-module module : 
    inst cap : tantalum-cap(1.0e-6)
    #EXPECT(property(cap.capacitance) == 1.0e-6)
    #EXPECT(property(cap.anode) == "tantalum")
  evaluate(module)
   
deftest(odcb, part-query) tantalum-cap-lookup-1uf : 
  val caps = look-up-tantalum-caps("rated-voltage", ["capacitance" => 1.0e-6])
  #ASSERT(not empty?(caps))