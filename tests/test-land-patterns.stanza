#use-added-syntax(jitx)
defpackage ocdb/test/land-patterns:
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/design-vars
  import ocdb/land-patterns
  import ocdb/tolerance
  import ocdb/box-symbol
  import ocdb/rules
  import ocdb/generic-components
  import ocdb/symbols
  import ocdb/land-protrusions

pcb-component QFP:
  pcb-landpattern LQFP48:
    make-quad-landpattern(
      24, 24   ; pins on north/south and east/west faces
      0.5, 0.5 ; pitch on north/south and east/west faces
      min-typ-max(8.8, 9.0, 9.2), min-typ-max(8.8, 9.0, 9.2) ; outer-x, outer-y ("D" and "E")
      min-typ-max(6.8, 7.0, 7.2), min-typ-max(6.8, 7.0, 7.2) ; part-x, part-y (D1, E1)
      min-typ-max(0.45, 0.6, 0.75), min-typ-max(0.17, 0.22, 0.27) ; lead-x, lead-y (L, b)
      SmallGullWingLeads
    )
  port p : pin[[1]]
  val lp = LQFP48
  landpattern = 
    lp(p[1] => lp.p[1])
  make-box-symbol()

pcb-component QFN:
  pcb-landpattern MLPQ-UT8:
    make-quad-landpattern(
      2,  ; pins on north/south faces
      6,  ; pins on east/west faces
      0.4 ; pitch on north-south faces
      0.4 ; pitch on east-west faces
      tol(1.5, 0.0) ; outer-x
      tol(1.5, 0.0) ; outer-y
      tol(1.5, 0.0) ; part-x
      tol(1.5, 0.0) ; part-y
      min-typ-max(0.30, 0.35, 0.40) ; lead-dim-1
      min-typ-max(0.15, 0.20, 0.25) ; lead-dim-2
      QuadFlatNoLeads
    )
  val lp = MLPQ-UT8
  port p: pin[[1 through 8]]
  landpattern = 
    lp(
      p[1] => lp.p[1]
      p[2] => lp.p[2]
      p[3] => lp.p[3]
      p[4] => lp.p[4]
      p[5] => lp.p[5]
      p[6] => lp.p[6]
      p[7] => lp.p[7]
      p[8] => lp.p[8]
    )
  make-box-symbol()

pcb-component SOIC-CMP:
  pcb-landpattern SO8N:
    make-n-pin-soic-landpattern(8,    ; num-pins
                                1.27, ; pin-pitch
                                tol(6.0, 0.2), ;outer-length
                                tol(3.9, 0.1), ;part-length
                                tol(4.9, 0.1), ;part-width
                                min-typ-max(0.4, 1.04, 1.27),  ; lead-width
                                min-typ-max(0.28, 0.38, 0.48)) ; lead-length 
  port p: pin[[1 2]]
  val lp = SO8N
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])
  make-box-symbol()

pcb-component vishay-resistor-1005 :
  name = "Generic Vishay Resistor"
  description = "Generic chip resistor, 1005 package"
  reference-prefix = "R"
  port p: pin[[1, 2]]

  val lp  = two-pin-chip-landpattern(
    tol(1.0, 0.05),
    tol(0.5, 0.05),
    tol(0.25, 0.05),
    false
  )
  
  val sym = resistor-sym(false)
  
  landpattern = 
    lp(p[1] => lp.p[1], p[2] => lp.p[2])
  symbol = 
    sym(p[1] => sym.p[1], p[2] => sym.p[2])

pcb-component example-1:
  port p: pin[[1, 2]]
  reference-prefix = "R"
  val lp = two-pin-chip-landpattern(
    tol(1.0, 0.05, 0.06)  ; length of the component
    tol(0.5,  0.05)  ; width of the component
    tol(0.25, 0.05) ; lead length of the component
    DensityLevelC ; density-level,
    false         ; polarized?:True|False,
  )
  landpattern = lp(p[1] => lp.p[1], p[2] => lp.p[2])
  make-box-symbol()
  
pcb-component example-2:
  pin a
  pin c
  reference-prefix = "C"
  pcb-landpattern lp:
    make-two-pin-chip-landpattern(
      tol(3.2, 0.2),
      tol(1.6, 0.2),
      tol(0.8, 0.3),
      tol(1.2, 0.1),
      DensityLevelC,
      true,
    )

  landpattern = lp(a => lp.a, c => lp.c)
  make-box-symbol()

pcb-module main-module:
  inst e1: example-1
  inst e2: SOIC-CMP
  inst e3: example-2
  inst e4: QFN
  inst e5: QFP
  place(e1) on Top
  place(e2) on Top
  place(e3) on Top 
  place(e4) on Top

set-rules(sierra-adv-rules)
make-default-board(main-module, 2, Rectangle(12.0, 12.0))
; view-board()
view(QFP)
