#use-added-syntax(esir)
defpackage ocdb/generic-components:
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import ocdb/tests/default-harness
  import ocdb/bundles
  import ocdb/pinspec
  import ocdb/land-patterns
  import ocdb/generator-utils
  ; import db-parts
;[strip]
  import ocdb/symbols
  import ocdb/box-symbol
;[/strip]

; ====== Standard Tolerances and Logarithmic Values ======

public val std-tols = to-list([20.0, 10.0, 5.0, 2.0, 1.0, 0.5, 0.25, 0.1])
public val std-vals = HashTable<Double, List<Double>>()

std-vals[20.0] = to-list([
  1.00,1.50,2.20,3.30,4.70,6.80
])

std-vals[10.0] = to-list([
  1.20,1.80,2.70,3.90,5.60,8.20
])

std-vals[5.0] = to-list([
  1.10,1.30,1.60,2.00,2.40,3.00,
  3.60,4.30,5.10,6.20,7.50,9.10
])

std-vals[2.0] = to-list([
  1.05,1.15,1.21,1.27,1.33,1.40,1.47,1.54,1.62,
  1.69,1.78,1.87,1.96,2.05,2.15,2.26,2.37,2.49,
  2.61,2.74,2.87,3.01,3.16,3.32,3.48,3.65,3.83,
  4.02,4.22,4.42,4.64,4.87,5.11,5.36,5.62,5.90,
  6.19,6.49,6.81,7.15,7.87,8.25,8.66,9.09,9.53
])

std-vals[1.0] = to-list([
  1.02,1.07,1.13,1.18,1.24,1.37,1.43,1.58,1.65,
  1.74,1.82,1.91,2.10,2.21,2.32,2.43,2.55,2.67,
  2.80,2.94,3.09,3.24,3.40,3.57,3.74,3.92,4.12,
  4.32,4.53,4.75,4.99,5.23,5.49,5.76,6.04,6.34,
  6.65,6.98,7.32,7.68,8.06,8.45,8.87,9.31,9.76
])

;E192 tolerance series of resistors contains 0.5, 0.25, 0.1
val e192-list = to-list([
  1.00 1.01 1.02 1.04 1.05 1.06 1.07 1.09 1.10 1.11 1.13 1.14
  1.15 1.17 1.18 1.20 1.21 1.23 1.24 1.26 1.27 1.29 1.30 1.32
  1.33 1.35 1.37 1.38 1.40 1.42 1.43 1.45 1.47 1.49 1.50 1.52
  1.54 1.56 1.58 1.60 1.62 1.64 1.65 1.67 1.69 1.72 1.74 1.76
  1.78 1.80 1.82 1.84 1.87 1.89 1.91 1.93 1.96 1.98 2.00 2.03
  2.05 2.08 2.10 2.13 2.15 2.18 2.21 2.23 2.26 2.29 2.32 2.34
  2.37 2.40 2.43 2.46 2.49 2.52 2.55 2.58 2.61 2.64 2.67 2.71
  2.74 2.77 2.80 2.84 2.87 2.91 2.94 2.98 3.01 3.05 3.09 3.12
  3.16 3.20 3.24 3.28 3.32 3.36 3.40 3.44 3.48 3.52 3.57 3.61
  3.65 3.70 3.74 3.79 3.83 3.88 3.92 3.97 4.02 4.07 4.12 4.17
  4.22 4.27 4.32 4.37 4.42 4.48 4.53 4.59 4.64 4.70 4.75 4.81
  4.87 4.93 4.99 5.05 5.11 5.17 5.23 5.30 5.36 5.42 5.49 5.56
  5.62 5.69 5.76 5.83 5.90 5.97 6.04 6.12 6.19 6.26 6.34 6.42
  6.49 6.57 6.65 6.73 6.81 6.90 6.98 7.06 7.15 7.23 7.32 7.41
  7.50 7.59 7.68 7.77 7.87 7.96 8.06 8.16 8.25 8.35 8.45 8.56
  8.66 8.76 8.87 8.98 9.09 9.20 9.31 9.42 9.53 9.65 9.76 9.88
])
std-vals[0.5]  = e192-list
std-vals[0.25] = e192-list
std-vals[0.1]  = e192-list

; Read more http://www.resistorguide.com/resistor-values/
defn union-std-vals (tol:Double) :
  val union = Vector<Double>()
  for std-tol in std-tols do :
    if std-tol >= tol :
      add-all(union, std-vals[std-tol])
  to-list(qsort(union))

val cumulative-std-vals = HashTable<Double, List<Double>>()

for tol in std-tols do :
  cumulative-std-vals[tol] = union-std-vals(tol)

public defn closest-std-val (v:Double, tol:Double) :
  val expon = floor(log10(v))
  val signif = v / (pow(10.0,expon))
  
  var match-diff = 100.0
  var match-val = -1.0

  if key?(cumulative-std-vals, tol) :
    for std-val in cumulative-std-vals[tol] do :
      val diff = abs(signif - std-val)
      if diff < match-diff :
        match-diff = diff
        match-val = std-val
  else :
    fatal("Tolerance %_ not found in standard tolerances." % [tol])

  match-val * pow(10.0, expon)

; GENERICPASSIVES

public pcb-component gen-cap-cmp (cap:Double, tol:Double, max-v:Double, pkg:String) :
  port p : pin[{1 2}]
  symbol = {capacitor-sym(false)}(p[1] => p[1], p[2] => p[2])
  emodel = Capacitor(cap * 1.0e6, tol, max-v)
  package = {ipc-two-pin-package(pkg)}(p[1] => p[1], p[2] => p[2])
  reference-prefix = "C"
  spice :
    "[C] {p[1]} tmp {cap}"
    "[R] tmp {p[2]} 0.01"
  properties :
    capacitor => true
    type => "ceramic"
    capacitance => cap
    tolerance => (tol * 0.01)
    rated-voltage => max-v
    rated-temperature => [-55.0 125.0]

public defn gen-cap-cmp (cap:Double, max-v:Double) :
  gen-cap-cmp(cap, 0.2, max-v, "0402")

; 40 is default tolerance due to Yageo cap series 20% tolerance by default
public defn gen-cap-cmp (cap:Double, pkg:String) :
  ; capacitor(["capacitance" => cap "type" => "ceramic"])
  gen-cap-cmp(cap, 0.2, 10.0, pkg)

; 40 is default tolerance due to Yageo cap series 20% tolerance by default
public defn gen-cap-cmp (cap:Double) :
  ; capacitor(["capacitance" => cap "type" => "ceramic"])
  gen-cap-cmp(cap, 10.0)

;Generic Ceramic surface mount capacitors
public pcb-component gen-tant-cap-cmp (cap:Double, tol:Double, max-v:Double, pkg:String) :
  pin a 
  pin c
;[strip]
  symbol = {capacitor-sym(true)}(a => p[1] c => p[2])
;[/strip]
  emodel = Capacitor(cap, tol, max-v)
  switch(pkg) :
    "0402" : package = CAPT1005X55(a => p[1] c => p[2])
    "0603" : package = CAPT1608X80(a => p[1] c => p[2])
    "0805" : package = CAPT2012X125(a => p[1] c => p[2])
    "1206" : package = CAPT3216X160(a => p[1] c => p[2])
    else : fatal("Incorrect capacitor package %_." % [pkg])
  reference-prefix = "C"
  spice :
    "[C] {a} tmp {cap}"
    "[R] tmp {c} 2.0"
  properties :
    capacitor => true
    type => "electrolytic"
    anode => "tantalum"
    electrolyte => "polymer"
    capacitance => (cap * 1.0e-6)
    rated-voltage => max-v
    tolerance => (tol * 0.01)
    rated-current-pk => 3.7
    rated-current-rms => [[25.0 0.298] [85.0 0.268] [125.0 0.119]]
    rated-temperature => [-55.0 125.0]

public defn gen-tant-cap-cmp (cap:Double, tol:Double, max-v:Double) :
  gen-tant-cap-cmp(cap, tol, max-v, "0402")

public defn gen-tant-cap-cmp (cap:Double, pkg:String) :
  gen-tant-cap-cmp(cap, 20.0, 10.0, pkg)

public defn gen-tant-cap-cmp (cap:Double, tol:Double) :
  gen-tant-cap-cmp(cap, tol, 10.0)

; 40 is default tolerance due to Yageo cap series 20% tolerance by default
public defn gen-tant-cap-cmp (cap:Double) :
  gen-tant-cap-cmp(cap, 20.0)
 

public pcb-component gen-res-cmp (r-type:String|False, res:Double, tol:Double, pwr:Double, pkg:String) :
  ; if r-type is Symbol and (r-type as Symbol) == `pot :
  ;   port p : pin[{1 2 3}]
  ; else :
  port p : pin[{1 2}]
;[strip]
  symbol = {resistor-sym(r-type)}(p[1] => p[1], p[2] => p[2])
;[/strip]
  emodel = Resistor(res,tol,pwr)
  package = {ipc-two-pin-package(pkg)}(p[1] => p[1], p[2] => p[2])
  reference-prefix = "R"
  properties :
    resistor => true
    type => "thick-film"
    rated-voltage => 50.0
    rated-power => pwr
    derating => [[-60.0 1.0] [70.0 1.0] [155.0 0.0]]
    TCR => 100.0e-6
    rated-temperature => [-55.0 155.0]
    tolerance => (tol * 0.01)
    resistance => res
  spice :
    "[R] {p[1]} {p[2]} {res}"


public defn gen-res-cmp (res:Double, tol:Double, pkg:String) :
  gen-res-cmp(false, res, tol, 0.0625, pkg)

public defn gen-res-cmp (res:Double, tol:Double, pwr:Double) :
  gen-res-cmp(false, res, tol, 0.0625, "0402")

public defn gen-res-cmp (res:Double, tol:Double) :
  gen-res-cmp(res, tol, 0.0625)

public defn gen-res-cmp (res:Double, pkg:String) :
  gen-res-cmp(false, res, 2.0, 0.0625, pkg)

public defn gen-res-cmp (res:Double) :
  gen-res-cmp(res, 2.0)

public pcb-component gen-ind-cmp (ind:Double, tol:Double, max-i:Double) :
  port p : pin[{1 2}]
  emodel = Inductor(ind,tol,max-i)

;[strip]
  symbol = inductor-sym(p[1] => p[1], p[2] => p[2])
;[/strip]
  package = INDC1005X55(p[1] => p[1], p[2] => p[2]) ;TODO: all inductors 0402
  reference-prefix = "L"

public defn gen-ind-cmp (ind:Double, tol:Double) :
  gen-ind-cmp(ind, tol, 0.1)

public defn gen-ind-cmp (ind:Double) :
  gen-ind-cmp(ind, 10.0)

; STRAP
public defn bypass-cap-strap ( gnd-pin, power-pin, capacitance ):
  inside pcb-module:
    val cap = cap-strap(gnd-pin, power-pin, capacitance)
    short-trace(cap.p[1], power-pin)
    cap

; public defn default-bypass (component:Ref) :
;   bypass-cap-strap(component.gnd, component.vdd, 0.1)

public defn bypass-caps (power-pin:Ref|Symbol, gnd-pin:Ref|Symbol, voltage:Double, caps:Tuple<Double>, name:Symbol) :
  inside pcb-module:
    val n-caps = length(caps)
    for i in 0 to n-caps do :
      unique inst c : {gen-cap-cmp(caps[i], voltage)}
      match(power-pin) :
        (r:Ref) :
          net ({r}, {c}.p[1])
        (s:Symbol) :
          net {Ref(s)} ({c}.p[1])
      match(gnd-pin) :
        (r:Ref) :
          net ({r}, {c}.p[2])
        (s:Symbol) :
          net {Ref(s)} ({c}.p[2])

public defn res-strap (first-pin:Ref, second-pin:Ref, res:Double, tol:Double, pkg:String ) :
  inside pcb-module:
    unique inst rid : {gen-res-cmp(res, tol, pkg)}
    net ({first-pin}, {rid}.p[1])
    net ({second-pin}, {rid}.p[2])
    rid

public defn res-strap (first-pin:Ref, second-pin:Ref, res:Double, pkg:String ) :
  res-strap(first-pin, second-pin, res, 2.0, pkg)

public defn res-strap (first-pin:Ref, second-pin:Ref, res:Double ) :
  res-strap(first-pin, second-pin, res, "0402")
  
public defn cap-strap (first-pin:Ref, second-pin:Ref, capacitance ) :
  cap-strap( first-pin, second-pin, capacitance, "0402" )

public defn cap-strap (first-pin:Ref, second-pin:Ref, capacitance, pkg:String ) :
  inside pcb-module:
    unique inst cap : {gen-cap-cmp(capacitance, pkg)}
    net ({first-pin}, {cap}.p[1])
    net ({second-pin}, {cap}.p[2])
    cap

public defn default-bypass (cmp:Ref) :
  inside pcb-module:
    for p in ports(cmp) do :
      if has-property?(p.power-pin) :
        unique inst cap : {gen-cap-cmp(0.1)}
        properties({cap}):
          bypass => true
        net ({cap}.p[1], {p})
        short-trace({cap}.p[1], {p})
        net ({cap}.p[2], {cmp}.gnd)

public defn block-cap (in:Ref, out:Ref, cap:Double) :
  inside pcb-module :
    unique inst block : {gen-cap-cmp(cap)}
    net ({in}, {block}.p[1])
    net ({out}, {block}.p[2])

public defn block-cap (in:Ref, out:Ref) :
  block-cap(in, out, 100.0e-6)

public defn banana-plug (color:String) :
  inside pcb-module :
    unique inst b : {ocdb/pomona/1581/component(color)}
    b

public pcb-component pin-header (n-pin:Int, n-row:Int, pin-pitch:Double, row-pitch:Double) :
  description = "Generic pin-header"
  mpn = to-string("%_X%_-pin-header" % [n-pin / 2 n-row])
  val ps = 
    if n-row == 1 :
      PinSpec $ #TABLE :
        [Ref     | Int ...   | Dir]
        for i in 1 through n-pin do :
          [p[i] | i | Left]
    else :
      PinSpec $ #TABLE :
        [Ref     | Int ...   | Dir]
        for i in 1 through n-pin by 2 do :
          [p[i] | i | Left]
          [p[i + 1] | (i + 1) | Right]

  gen-symbol-map(ps, pin-header-pkg(n-pin, n-row, pin-pitch, row-pitch))

  reference-prefix = "J"

public defn pin-header (n-pin:Int) :
  pin-header(n-pin, 1, 2.54)

public defn pin-header (n-pin:Int, n-row:Int) :
  pin-header(n-pin, n-row, 2.54)

public defn pin-header (n-pin: Int, pin-pitch:Double) :
  pin-header(n-pin, 1, pin-pitch)

public defn pin-header (n-pin: Int, n-row: Int, pin-pitch:Double) :
  pin-header(n-pin, n-row, pin-pitch, pin-pitch)

public defn sma-connector (sig:Ref, launch:String) :
  inside pcb-module :
    if launch == "end-launch":
      unique inst c : {ocdb/johnson/142-0761-881/component}
      net ({c}.sig, {sig})
      net ({c}.gnd, gnd)
      c
    else :
      fatal("Unsupported SMA Connector type")

public defn bnc-connector (sig:Ref, launch:String) :
  inside pcb-module :
    if launch == "end-launch":
      unique inst c : {ocdb/amphenol/112640/component}
      net ({c}.sig, {sig})
      net ({c}.gnd, gnd)
      c
    else :
      fatal("Unsupported SMA Connector type")

public defn ethernet-jack ():
  inside pcb-module :
    unique inst c : {ocdb/pulse-electronics/J0G-0009NL/component}
    net ({c}.shield, gnd)
    c

public defn add-testpoint (rs:Tuple<Ref>, method:String) :
  inside pcb-module :
    for r in rs do :
      if method == "pth-loop" :
        var color = "yellow"
        if r == #R(gnd):
          color = "black"
        unique inst tp : {ocdb/keystone/500xx/component(color)}
        net ({tp}.p, {r})
      else :
        fatal("Unsupported add-testpoint method.")

public defn add-testpoint (rs:Tuple<Ref>) :
  add-testpoint(rs, "pth-loop")

public defn filter (in:Ref, out:Ref, type:String, params:Tuple<Double>) :
  inside pcb-module:
    if type == "rc-lowpass" :
      unique inst r : {gen-res-cmp(params[0], 1.0)}
      unique inst c : {gen-cap-cmp(params[1], 20.0)}
      net ({in} {r}.p[1])
      net ({out} {r}.p[2] {c}.p[1])
      net (gnd {c}.p[2])
    else :
      fatal("Unsupported add-testpoint method.")

public defn dip-pull (pins:Tuple<Ref>, power-pin:Ref, gnd-pin:Ref) :
  inside pcb-module :
    val n = length(pins)
    unique inst dip : {ocdb/cts/219/component(n)}
    require sws:SPST[n] from {dip}
    for i in 0 to n do :
      net ({pins}[i], sws[i].p)
      net ({power-pin}, sws[i].t)
      res-strap(pins[i], gnd-pin, 10.0e3)

public pcb-component mounting-hole-cmp (drill-r:Double, pad-r: Double, mask-r:Double) :
  package = {non-plated-hole-pkg(drill-r, mask-r)}()
  reference-prefix = "H"
;[strip]
  symbol = unplated-hole-sym()
;[/strip]

public defn mounting-hole-cmp (drill-r:Double, pad-r:Double) :
  mounting-hole-cmp(drill-r, pad-r, pad-r + 0.35)

public defn mounting-hole-cmp (drill-r:Double) :
  mounting-hole-cmp(drill-r, drill-r + 0.35)

public defn board-mounting-holes (w:Double, h:Double, s:String|Double) :
  inside pcb-module :
    val r = match(s) :
      (screw:String) :
        switch(screw) :
          ;Loose Fit https://blogs.mentor.com/tom-hausherr/blog/tag/pcb-mounting-holes/
          "M2"   : 2.3 / 2.0
          "M2p5" : 2.85 / 2.0
          "M3"   : 3.5 / 2.0
          "M3p5" : 3.9 / 2.0
          else : fatal("Unsupported Screw size %_ for mounting hole" % [screw])
      (diameter:Double) : diameter / 2.0
      (f) : fatal("Unsupported call to mounting hole")
    inst holes : {mounting-hole-cmp(r)}[4]
    val offs = r * 6.0 ;1.5X bolt diameter * 2
    for (l in grid-locs(2, 2, w - offs, h - offs), i in 0 to 4) do :
      package(holes[i]) at l on Top