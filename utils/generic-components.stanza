#use-added-syntax(jitx)
defpackage ocdb/generic-components:
  import core
  import collections
  import math

  import jitx
  import jitx/commands

  import ocdb/bundles
  import ocdb/land-patterns
  import ocdb/generator-utils
  import ocdb/db-parts
  import ocdb/design-vars
  import ocdb/symbols
  import ocdb/box-symbol
  import ocdb/property-structs

; ========================================================
; ====== Standard packages for the passive solver ========
; ========================================================
val PKGS = ["009005", "01005", "0201", "02016", "0202", "0302", "0303", "0402", "0404", "0503", "0505", "0603", "0612",
            "0805", "1206", "1210", "1218", "1812", "2010", "2512", "2525", "2615", "2616", "3920", "4122", "4823",
            "5329", "6030"]

public defn get-valid-pkg-list () :
  get-valid-pkg-list(MIN-PKG)

public defn get-valid-pkg-list (min-pkg: String) :
  val min-pkg-idx = find({PKGS[_] == min-pkg}, 0 to length(PKGS))
  match(min-pkg-idx: Int) :
    PKGS[min-pkg-idx to false]
  else :
    throw(Exception("Invalid min-pkg."))
; ========================================================
; ==== EIA Standard Tolerances and Logarithmic Values ====
; ========================================================
public val std-tols = to-list([20.0, 10.0, 5.0, 2.0, 1.0, 0.5, 0.25, 0.1])
public val std-vals = HashTable<Double, List<Double>>()

std-vals[20.0] = to-list([
  1.00,1.50,2.20,3.30,4.70,6.80
])

std-vals[10.0] = to-list([
  1.20,1.80,2.70,3.90,5.60,8.20
])

std-vals[5.0] = to-list([
  1.10,1.30,1.60,2.00,2.40,3.00,
  3.60,4.30,5.10,6.20,7.50,9.10
])

std-vals[2.0] = to-list([
  1.05,1.15,1.21,1.27,1.33,1.40,1.47,1.54,1.62,
  1.69,1.78,1.87,1.96,2.05,2.15,2.26,2.37,2.49,
  2.61,2.74,2.87,3.01,3.16,3.32,3.48,3.65,3.83,
  4.02,4.22,4.42,4.64,4.87,5.11,5.36,5.62,5.90,
  6.19,6.49,6.81,7.15,7.87,8.25,8.66,9.09,9.53
])

std-vals[1.0] = to-list([
  1.02,1.07,1.13,1.18,1.24,1.37,1.43,1.58,1.65,
  1.74,1.82,1.91,2.10,2.21,2.32,2.43,2.55,2.67,
  2.80,2.94,3.09,3.24,3.40,3.57,3.74,3.92,4.12,
  4.32,4.53,4.75,4.99,5.23,5.49,5.76,6.04,6.34,
  6.65,6.98,7.32,7.68,8.06,8.45,8.87,9.31,9.76
])

;E192 tolerance series of resistors contains 0.5, 0.25, 0.1
val e192-list = to-list([
  1.00 1.01 1.02 1.04 1.05 1.06 1.07 1.09 1.10 1.11 1.13 1.14
  1.15 1.17 1.18 1.20 1.21 1.23 1.24 1.26 1.27 1.29 1.30 1.32
  1.33 1.35 1.37 1.38 1.40 1.42 1.43 1.45 1.47 1.49 1.50 1.52
  1.54 1.56 1.58 1.60 1.62 1.64 1.65 1.67 1.69 1.72 1.74 1.76
  1.78 1.80 1.82 1.84 1.87 1.89 1.91 1.93 1.96 1.98 2.00 2.03
  2.05 2.08 2.10 2.13 2.15 2.18 2.21 2.23 2.26 2.29 2.32 2.34
  2.37 2.40 2.43 2.46 2.49 2.52 2.55 2.58 2.61 2.64 2.67 2.71
  2.74 2.77 2.80 2.84 2.87 2.91 2.94 2.98 3.01 3.05 3.09 3.12
  3.16 3.20 3.24 3.28 3.32 3.36 3.40 3.44 3.48 3.52 3.57 3.61
  3.65 3.70 3.74 3.79 3.83 3.88 3.92 3.97 4.02 4.07 4.12 4.17
  4.22 4.27 4.32 4.37 4.42 4.48 4.53 4.59 4.64 4.70 4.75 4.81
  4.87 4.93 4.99 5.05 5.11 5.17 5.23 5.30 5.36 5.42 5.49 5.56
  5.62 5.69 5.76 5.83 5.90 5.97 6.04 6.12 6.19 6.26 6.34 6.42
  6.49 6.57 6.65 6.73 6.81 6.90 6.98 7.06 7.15 7.23 7.32 7.41
  7.50 7.59 7.68 7.77 7.87 7.96 8.06 8.16 8.25 8.35 8.45 8.56
  8.66 8.76 8.87 8.98 9.09 9.20 9.31 9.42 9.53 9.65 9.76 9.88
])
std-vals[0.5]  = e192-list
std-vals[0.25] = e192-list
std-vals[0.1]  = e192-list

; Read more http://www.resistorguide.com/resistor-values/
defn union-std-vals (tol:Double) :
  val union = Vector<Double>()
  for std-tol in std-tols do :
    if std-tol >= tol :
      add-all(union, std-vals[std-tol])
  to-list(qsort(union))

val cumulative-std-vals = HashTable<Double, List<Double>>()

for tol in std-tols do :
  cumulative-std-vals[tol] = union-std-vals(tol)


; Returns the closest value to v in the tolerance range specified by tol
public defn closest-std-val (v:Double, tol:Double) :
  val expon = floor(log10(v))
  val signif = v / (pow(10.0,expon))
  
  var match-diff = 100.0
  var match-val = -1.0

  if key?(cumulative-std-vals, tol) :
    for std-val in cumulative-std-vals[tol] do :
      val diff = abs(signif - std-val)
      if diff < match-diff :
        match-diff = diff
        match-val = std-val
  else :
    fatal("Tolerance %_ not found in standard tolerances." % [tol])

  match-val * pow(10.0, expon)


; ========================================================
; ========== Generic passive components ==================
; ========================================================

defn smd-query-properties () -> Tuple<KeyValue<String, ?>> :
  ["mounting" => "smd"
   "case" => get-valid-pkg-list()
   "minimum_quantity" => 1
   "min-stock" => 5 * DESIGN-QUANTITY]

defn remove-duplicate-keys (hs:Seqable<Seqable<KeyValue<String, ?>>>) -> Tuple<KeyValue<String, ?>> :
  to-tuple $ to-hashtable<String, ?>(cat-all(hs))


; ========================================================
; ==================== ceramic-cap =======================
; ========================================================

doc: \<>
One can query an actual SMD capacitor from the JITX database that can be bought. This call requires internet access.
`ceramic-cap` calls the lower level [Part Query API](../../jitx-commands/dbquery.md) adding the list of attributes provided
 by the user on top of design settings.

```stanza
public defn ceramic-cap (params:Tuple<KeyValue>)
```

Fixed Requirements :
* category: "capacitor"
* type: "ceramic"
* mounting: "smd"
* minimum_quantity: 1

Default design Requirements (set by global variables defined in `ocdb/design-vars`) :
* min-stock: 500
* _sort: \["area"\]
* min-rated-voltage: 10.0
* max-rated-temperature.min: 0.0
* min-rated-temperature.max: 25.0
* case: \["0201" "02016" "0202" "0302" "0303" "0402" "0404" "0503" "0505" "0603" "0612" "0805" "1206" "1210" "1218" "1812" "2010" "2512" "2525" "2615" "2616" "3920" "4122" "4823" "5329" "6030"\]

Those design requirements can be changed, either by changing `ocdb/design-vars` or by importing `ocdb/design-vars` and
setting new values for the global variables:
* min-stock: this is 5 times `DESIGN-QUANTITY`. Which means that `DESIGN-QUANTITY` default is 100.
* _sort: set by `OPTIMIZE-FOR`.
* min-rated-voltage: set by `MIN-CAP-VOLTAGE` in Volts.
* \[max-rated-temperature.min min-rated-temperature.max\] : rated-temperature range in degC set by `OPERATING-TEMPERATURE`.
* case: computed from `MIN-PKG`. `MIN-PKG` default is "0201".

Example: instantiating a 50nF±5% ceramic capacitor with a rated voltage of at least 100V.

```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components
  import ocdb/design-vars

; Overrides default value set in ocdb/design-vars
MIN-CAP-VOLTAGE = 100.0

pcb-module my-module :
  inst capacitor : ceramic-cap(["capacitance" => 50.0e-9 "tolerance" => 0.05])
```

Here are the quick accessors:
```stanza
public defn ceramic-cap (capacitance:Double, tolerance:Double)
public defn ceramic-cap (capacitance:Double)
```
The capacitance is in Farads and the tolerance is unit-less (0.01 is ±1%).

Example: instantiating a 5nF±5% ceramic capacitor
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components

pcb-module my-module :
  inst capacitor : ceramic-cap(5.0e-9, 0.05)
```
<>

; Generic ceramic capacitor from database (of 600k options)
public defn ceramic-cap (user-params:Tuple<KeyValue>) :
  val params = remove-duplicate-keys $ [["type" => "ceramic" "min-rated-voltage" => MIN-CAP-VOLTAGE]
                                        smd-query-properties()
                                        user-params]
  to-jitx $ Capacitor(params)

public defn ceramic-cap (cap:Double) :
  ceramic-cap(["capacitance" => cap])

public defn ceramic-cap (cap:Double, tolerance:Double) :
  ceramic-cap(["capacitance" => cap "tolerance" => tolerance])

; ========================================================
; =============== look-up-ceramic-caps ===================
; ========================================================

doc: \<>
```stanza
public defn look-up-ceramic-caps (attribute: String) -> Tuple
public defn look-up-ceramic-caps (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple
```

Looks up the list of available values (at most 1000 returned) for `attribute` amongst chip capacitors in the JITX database.
This call filters on the same properties as [ceramic-cap](#ceramic-cap). Additional properties `filter-properties` can
be given in argument to restrict further criteria on the considered chip capacitors.

Example:
```stanza
$ jitx repl
stanza> import ocdb/generic-components
stanza> println $ look-up-ceramic-caps("tolerance.max", ["capacitance" => 10.0e-9])
[0.01 0.02 0.05 0.1 0.2 0.8 1.0]
stanza> println $ look-up-ceramic-caps("rated-current-pk")
[]
stanza> println $ look-up-ceramic-caps("rated-voltage")
[10.0 16.0 25.0 35.0 50.0 63.0 75.0 80.0 100.0 150.0 200.0 250.0 450.0 500.0 630.0 1000.0 1200.0 1500.0 2000.0 2500.0 3000.0 4000.0 6000.0]
stanza> println $ look-up-ceramic-caps("rated-voltage", ["capacitance" => 50.0e-9, "tolerance" => 0.05])
[50.0 100.0]
```
In this example we can see that there rated current peak is not indicated for capacitors of type ceramic.
<>

public defn look-up-ceramic-caps (attribute: String) -> Tuple :
  look-up-ceramic-caps(attribute, [])

public defn look-up-ceramic-caps (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple :
  val params = remove-duplicate-keys $ [["type" => "ceramic" "min-rated-voltage" => MIN-CAP-VOLTAGE]
                                        smd-query-properties()
                                        filter-properties]
  look-up-capacitors(attribute, params)

; ========================================================
; ==================== chip-resistor =====================
; ========================================================

;<>
One can query an actual SMD resistor from the JITX database that can be bought. This call requires internet access.
`chip-resistor` calls the lower level [Part Query API](../../jitx-commands/dbquery.md) adding the list of attributes provided
 by the user on top of design settings.

```stanza
public defn chip-resistor (params:Tuple<KeyValue>)
```

Fixed Requirements :
* category: "resistor"
* mounting: "smd"
* minimum_quantity: 1

Default design Requirements (set by global variables defined in `ocdb/design-vars`) :
* min-stock: 500
* _sort: \["area"\]
* max-rated-temperature.min: 0.0
* min-rated-temperature.max: 25.0
* case: \["0201" "02016" "0202" "0302" "0303" "0402" "0404" "0503" "0505" "0603" "0612" "0805" "1206" "1210" "1218" "1812" "2010" "2512" "2525" "2615" "2616" "3920" "4122" "4823" "5329" "6030"\]

Those design requirements can be changed, either by changing `ocdb/design-vars` or by importing `ocdb/design-vars` and
setting new values for the global variables:
* min-stock: this is 5 times `DESIGN-QUANTITY`. Which mean that `DESIGN-QUANTITY` default is 100.
* _sort: set by `OPTIMIZE-FOR`. Default is \["area"]\.
* \[max-rated-temperature.min min-rated-temperature.max\] : rated-temperature range in degC set by `OPERATING-TEMPERATURE`.
* case: computed from `MIN-PKG`. `MIN-PKG` default is "0201".

Example: instantiating a 5Ω±5% thick-film chip resistor
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components
  import ocdb/design-vars

; Overrides default value set in ocdb/design-vars
MIN-PKG = "0402"

pcb-module my-module :
  inst resistor : chip-resistor(["resistance" => 5.0 "tolerance" => 0.05 "composition" => "thick-film"])
```

Here are the quick accessors:
```stanza
public defn chip-resistor (resistance:Double, tolerance:Double)
public defn chip-resistor (resistance:Double)
```
The resistance is in Ohms and the tolerance is unit-less (0.01 is ±1%).

Example: instantiating a 5Ω±5% chip resistor
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components

pcb-module my-module :
  inst resistor : chip-resistor(10.0, 0.05)
```
<>

; Generic chip resistor from database (of 600k options)
public defn chip-resistor (user-params:Tuple<KeyValue>) :
  val params = remove-duplicate-keys([smd-query-properties() user-params])
  to-jitx $ Resistor(params)

public defn chip-resistor (resistance:Double) :
  chip-resistor(["resistance" => resistance])

public defn chip-resistor (resistance:Double, tolerance:Double) :
  chip-resistor(["resistance" => resistance "tolerance" => tolerance])

; ========================================================
; ================ look-up-chip-resistors ================
; ========================================================

doc: \<>
```stanza
public defn look-up-chip-resistors (attribute: String) -> Tuple
public defn look-up-chip-resistors (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple
```

Looks up the list of available values (at most 1000 returned) for `attribute` amongst chip resistors in the JITX database.
This call filters on the same properties as [chip-resistor](#chip-resistor). Additional properties `filter-properties` can
be given in argument to restrict further criteria on the considered chip resistors.

Example:
```stanza
$ jitx repl
stanza> import ocdb/generic-components
stanza> println $ look-up-chip-resistors("type", ["resistance" => 1.0, "min-rated-power" => 1.0])
["chip"]
stanza> println $ look-up-chip-resistors("composition", ["resistance" => 1.0, "min-rated-power" => 1.0])
["thick-film" "thin-film" "wirewound"]
```
<>

public defn look-up-chip-resistors (attribute: String) -> Tuple :
  look-up-resistors(attribute, [])

public defn look-up-chip-resistors (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple :
  val params = remove-duplicate-keys([smd-query-properties() filter-properties])
  look-up-resistors(attribute, params)

;============================================================
;==================== smd-inductor ==========================
;============================================================

;<>
One can query an actual SMD inductor from the JITX database that can be bought. This call requires internet access.
`smd-inductor` calls the lower level [Part Query API](../../jitx-commands/dbquery.md) adding the list of attributes provided
 by the user on top of design settings.

```stanza
public defn smd-inductor (params:Tuple<KeyValue>)
```

Fixed Requirements :
* category: "inductor"
* mounting: "smd"
* minimum_quantity: 1

Default design Requirements (set by global variables defined in `ocdb/design-vars`) :
* min-stock: 500
* _sort: \["area"\]
* max-rated-temperature.min: 0.0
* min-rated-temperature.max: 25.0
* case: \["0201" "02016" "0202" "0302" "0303" "0402" "0404" "0503" "0505" "0603" "0612" "0805" "1206" "1210" "1218" "1812" "2010" "2512" "2525" "2615" "2616" "3920" "4122" "4823" "5329" "6030"\]

Those design requirements can be changed, either by changing `ocdb/design-vars` or by importing `ocdb/design-vars` and
setting new values for the global variables:
* min-stock: this is 5 times `DESIGN-QUANTITY`. Whisch means that `DESIGN-QUANTITY` default is 100.
* _sort: set by `OPTIMIZE-FOR`.
* \[max-rated-temperature.min min-rated-temperature.max\] : rated-temperature range in degC set by `OPERATING-TEMPERATURE`.
* case: computed from `MIN-PKG`. `MIN-PKG` default is "0201".

Example: instantiating a 2µH±5% SMD inductor
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components
  import ocdb/design-vars

; Overrides default value set in ocdb/design-vars
OPTIMIZE_FOR = ["cost"]

pcb-module my-module :
  inst inductor : smd-inductor(["inductance" => 2.0e-6 "tolerance" => 0.05 "type" => "Wirewound"])
```

Here are the quick accessors:
```stanza
public defn smd-inductor (inductance:Double, tolerance:Double)
public defn smd-inductor (inductance:Double)
```
The inductance is in Henries and the tolerance is unit-less (0.01 is ±1%).

Example: instantiating a 5µH±5% SMD inductor
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components

pcb-module my-module :
  inst inductor : smd-inductor(5.0e-6, 0.05)
```
<>

; Generic inductors from database of standard packages (0402, 0603... 10k options)
public defn smd-inductor (user-params:Tuple<KeyValue>) :
  val params = remove-duplicate-keys([smd-query-properties() user-params])
  to-jitx $ Inductor(params)

public defn smd-inductor (ind:Double) :
  smd-inductor(["inductance" => ind])

public defn smd-inductor (ind:Double, tolerance:Double) :
  smd-inductor(["inductance" => ind "tolerance" => tolerance])

; ========================================================
; ================ look-up-smd-inductors =================
; ========================================================

doc: \<>
```stanza
public defn look-up-smd-inductors (attribute: String) -> Tuple
public defn look-up-smd-inductors (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple
```

Looks up the list of available values (at most 1000 returned) for `attribute` amongst SMD inductors in the JITX database.
This call filters on the same properties as (smd-inductor)[#smd-inductor]. Additional properties `filter-properties` can
be given in argument to restrict further criteria on the considered SMD inductors.

Example:
```stanza
$ jitx repl
stanza> import ocdb/generic-components
stanza> println $ look-up-smd-inductors("saturation-current", ["min-current-rating" => 0.1])
[0.05 0.055 0.06 0.07 0.08 0.085 0.09 0.1 0.11 0.115 0.12 0.125 0.13 0.135 0.14 0.145 0.15 0.16 0.17 0.18 0.19 0.2 0.205 0.21 0.22 0.23 0.24 0.25 0.27 0.275 0.28 0.29 0.3 0.32 0.33 0.34 0.35 0.36 0.366 0.37 0.38 0.39 0.4 0.42 0.425 0.44 0.45 0.47 0.48 0.5 0.515 0.52 0.53 0.55 0.6 0.614 0.62 0.65 0.68 0.7 0.72 0.73 0.75 0.772 0.78 0.8 0.85 0.89 0.9 0.95 0.98 1.0 1.02 1.05 1.06 1.1 1.131 1.15 1.2 1.24 1.25 1.3 1.35 1.4 1.45 1.5 1.6 1.65 1.7 1.71 1.75 1.8 1.85 2.0 2.05 2.1 2.15 2.2 2.26 2.3 2.4 2.5 2.6 2.75 2.8 2.9 3.0 3.1 3.3 3.5 3.6 3.8 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.2 5.4 6.3 6.5 7.0 7.5 8.5 10.0]
stanza> println $ look-up-smd-inductors("saturation-current", ["min-inductance" => 1.0e-6 "max-inductance" => 2.0e-6 "min-current-rating" => 0.1])
[0.08 0.1 0.13 0.14 0.16 0.18 0.19 0.2 0.22 0.25 0.28 0.29 0.3 0.36 0.4 0.45 0.5 0.55 0.65 0.7 0.8 0.85 0.89 0.9 1.0 1.1 1.15 1.2 1.35 1.4 1.5 1.8 1.85 2.0 2.1 2.2 2.26 2.4 2.6 2.9 3.1 3.8 4.0 4.3 4.4 4.6 5.2 6.3 7.5]
stanza> println $ look-up-smd-inductors("saturation-current", ["inductance" => 1.0e-6 "min-current-rating" => 0.1])
[0.1 0.14 0.19 0.2 0.22 0.28 0.29 0.36 0.4 0.5 0.65 0.7 0.8 0.85 0.89 0.9 1.0 1.1 1.15 1.35 1.4 1.5 2.0 2.1 2.26 2.4 2.9 3.1 3.8 4.3 4.4 4.6 5.2 6.3 7.5]
```
<>

public defn look-up-smd-inductors (attribute: String) -> Tuple :
  look-up-smd-inductors(attribute, [])

public defn look-up-smd-inductors (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple :
  val params = remove-duplicate-keys([smd-query-properties() filter-properties])
  look-up-inductors(attribute, params)

; ========================================================
; ===================== gen-cap-cmp ======================
; ========================================================

doc: \<>
```stanza
public pcb-component gen-cap-cmp (cap:Double, tol:Double, max-v:Double, pkg-name:String)
```
This is a generic capacitor component, this is not an actual part that can be bought. This call does not require internet access.
Pins are `p[1]` and `p[2]`.
Arguments:
* `cap` : capacitance in Farads
* `tol`: tolerance (1.0 means ±1%)
* `max-v` : rated voltage in Volts
* `pkg-name`: Package name (example: "0204")


Here are the quick accessors:
```stanza
public defn gen-cap-cmp (cap:Double, max-v:Double)
public defn gen-cap-cmp (cap:Double, pkg:String)
public defn gen-cap-cmp (cap:Double)
```
Defaults used are:
* `tol` : 0.2%
* `max-v` : 10.0 V
* `pkg-name` : "0402"

Example : instantiating a 5nF generic capacitor
```stanza
pcb-module my-design :
  inst r : gen-cap-cmp(5.0e-9)
```
<>

public pcb-component gen-cap-cmp (cap:Double, tol:Double, max-v:Double, pkg-name:String) :
  port p : pin[1 through 2]
  val sym = capacitor-sym()
  val pkg = ipc-two-pin-landpattern(pkg-name)
  symbol = sym(p[1] => sym.p[1], p[2] => sym.p[2])
  landpattern = pkg(p[1] => pkg.p[1], p[2] => pkg.p[2])
  emodel = Capacitor(cap, tol, max-v)
  reference-prefix = "C"
  spice :
    "[C] {p[1]} tmp {cap}"
    "[R] tmp {p[2]} 0.01"
  property(self.capacitor) = true
  property(self.type) = "ceramic"
  property(self.capacitance) = cap
  property(self.tolerance) = tol
  property(self.rated-voltage) = max-v
  property(self.rated-temperature) = [-55.0 125.0]

public defn gen-cap-cmp (cap:Double, max-v:Double) :
  gen-cap-cmp(cap, 0.2, max-v, "0402")

public defn gen-cap-cmp (cap:Double, pkg:String) :
  gen-cap-cmp(cap, 0.2, 10.0, pkg)

public defn gen-cap-cmp (cap:Double) :
  gen-cap-cmp(cap, 10.0)

;Generic Ceramic surface mount capacitors
public pcb-component gen-tant-cap-cmp (cap:Double, tol:Double, max-v:Double, pkg:String) :
  pin a 
  pin c
  val sym = capacitor-sym(CapacitorPolarized)
  symbol = sym(a => sym.p[1], c => sym.p[2])
  emodel = Capacitor(cap, tol, max-v)
  switch(pkg) :
    "0402" : landpattern = CAPT1005X55(a => CAPT1005X55.p[1] c => CAPT1005X55.p[2])
    "0603" : landpattern = CAPT1608X80(a => CAPT1608X80.p[1] c => CAPT1608X80.p[2])
    "0805" : landpattern = CAPT2012X125(a => CAPT2012X125.p[1] c => CAPT2012X125.p[2])
    "1206" : landpattern = CAPT3216X160(a => CAPT3216X160.p[1] c => CAPT3216X160.p[2])
    else : fatal("Incorrect capacitor package %_." % [pkg])
  reference-prefix = "C"
  spice :
    "[C] {a} tmp {cap}"
    "[R] tmp {c} 2.0"
  property(self.capacitor) = true
  property(self.type) = "electrolytic"
  property(self.anode) = "tantalum"
  property(self.electrolyte) = "polymer"
  property(self.capacitance) = cap
  property(self.rated-voltage) = max-v
  property(self.tolerance) = (tol * 0.01)
  property(self.rated-current-pk) = 3.7
  property(self.rated-current-rms) = [[25.0 0.298] [85.0 0.268] [125.0 0.119]]
  property(self.rated-temperature) = [-55.0 125.0]

public defn gen-tant-cap-cmp (cap:Double, tol:Double, max-v:Double) :
  gen-tant-cap-cmp(cap, tol, max-v, "0402")

public defn gen-tant-cap-cmp (cap:Double, pkg:String) :
  gen-tant-cap-cmp(cap, 20.0, 10.0, pkg)

public defn gen-tant-cap-cmp (cap:Double, tol:Double) :
  gen-tant-cap-cmp(cap, tol, 10.0)
; public defn default-bypass (component:Ref) :
;   bypass-cap-strap(component.gnd, component.vdd, 0.1)

  gen-tant-cap-cmp(cap, 20.0)

; ========================================================
; ===================== gen-res-cmp ======================
; ========================================================

;<>

```stanza
public pcb-component gen-res-cmp (r-type:ResistorSymbolType, res:Double, tol:Double, pwr:Double, pkg-name:String)
```
THis is a generic resistor component, this is not an actual part that can be bought. This call does not require internet access.
Pins are `p[1]` and `p[2]`.
Arguments:
* `r-type := ResistorStd | ResistorVariable | ResistorPot | ResistorPhoto | ResistorTherm` from `ocdb/utils/ResistorSymbolType` (decides the schematic symbol)
* `res` : resistance in Ohms
* `tol`: tolerance (1.0 means ±1%)
* `pwr` : maximum power in watts
* `pkg-name`: Package name (example: "0204")


Here are the quick accessors:
```stanza
public defn gen-res-cmp (res:Double, tol:Double, pkg:String)
public defn gen-res-cmp (res:Double, tol:Double, pwr:Double)
public defn gen-res-cmp (res:Double, tol:Double)
public defn gen-res-cmp (res:Double, pkg:String)
public defn gen-res-cmp (res:Double)
```
Defaults used are:
* `r-type` : `ResistorStd`
* `tol` : 2%
* `pwr` : 0.0625 W
* `pkg-name` : "0402"

Example : instantiating a 5Ω generic resistor
```stanza
pcb-module my-design :
  inst r : gen-res-cmp(5.0)
```
<>

public pcb-component gen-res-cmp (r-type:ResistorSymbolType, res:Double, tol:Double, pwr:Double, pkg-name:String) :
  ; if r-type is Symbol and (r-type as Symbol) == `pot :
  ;   port p : pin[1 2 3]
  ; else :
  port p : pin[1 through 2]
  val sym = resistor-sym(r-type)
  val pkg = ipc-two-pin-landpattern(pkg-name)
  symbol = sym(p[1] => sym.p[1], p[2] => sym.p[2])
  landpattern = pkg(p[1] => pkg.p[1], p[2] => pkg.p[2])
  emodel = Resistor(res,tol,pwr)
  reference-prefix = "R"
  property(self.resistor) = true
  property(self.type) = "thick-film"
  property(self.rated-voltage) = 50.0
  property(self.rated-power) = pwr
  property(self.derating) = [[-60.0 1.0] [70.0 1.0] [155.0 0.0]]
  property(self.TCR) = 100.0e-6
  property(self.rated-temperature) = [-55.0 155.0]
  property(self.tolerance) = (tol * 0.01)
  property(self.resistance) = res
  spice :
    "[R] {p[1]} {p[2]} {res}"

public defn gen-res-cmp (res:Double, tol:Double, pkg:String) :
  gen-res-cmp(ResistorStd, res, tol, 0.0625, pkg)

public defn gen-res-cmp (res:Double, tol:Double, pwr:Double) :
  gen-res-cmp(ResistorStd, res, tol, 0.0625, "0402")

public defn gen-res-cmp (res:Double, tol:Double) :
  gen-res-cmp(res, tol, 0.0625)

public defn gen-res-cmp (res:Double, pkg:String) :
  gen-res-cmp(ResistorStd, res, 2.0, 0.0625, pkg)

public defn gen-res-cmp (res:Double) :
  gen-res-cmp(res, 2.0)

; ========================================================
; ===================== gen-ind-cmp ======================
; ========================================================

doc: \<>
```stanza
public pcb-component gen-ind-cmp (l-type:InductorSymbolType, ind:Double, tol:Double, max-i:Double)
```
THis is a generic inductor component, this is not an actual part that can be bought. This call does not require internet access.
Pins are `p[1]` and `p[2]`.
Arguments:
* `l-type :=  InductorStd | InductorIronCore | InductorFerriteCore | InductorVariable | InductorPreset` from ocdb/utils/InductorSymbolType (decides the schematic symbol)
* `ind` : inductance in Henries
* `tol`: tolerance (1.0 means ±1%)
* `max-i` : maximum current in amps


Here are the quick accessors:
```stanza
public defn gen-ind-cmp (ind:Double, tol:Double) :
public defn gen-ind-cmp (ind:Double)
```
Defaults used are:
* `l-type` : `InductorStd`
* `tol` : 0.1%
* `max-i` : 0.1 A

Example : instantiating a 5µH generic inductor
```stanza
pcb-module my-design :
  inst r : gen-ind-cmp(5.0e-6)
```
<>

public pcb-component gen-ind-cmp (l-type:InductorSymbolType, ind:Double, tol:Double, max-i:Double) :
  port p : pin[1 through 2]
  emodel = Inductor(ind,tol,max-i)

  val sym = inductor-sym(l-type)
  symbol = sym(p[1] => sym.p[1], p[2] => sym.p[2])
  landpattern = INDC1005X55(p[1] => INDC1005X55.p[1], p[2] => INDC1005X55.p[2]) ;TODO: all inductors 0402
  reference-prefix = "L"
  property(self.inductor) = true
  property(self.inductance) = ind
  property(self.tolerance) = (tol * 0.01)
  property(self.max-current) = max-i

public defn gen-ind-cmp (ind:Double, tol:Double) :
  gen-ind-cmp(InductorStd, ind, tol, 0.1) ; 100mA default

public defn gen-ind-cmp (ind:Double) :
  gen-ind-cmp(ind, 10.0)

; ========================================================
; ============ Component strapping functions =============
; ========================================================
; These functions attach a passive component between two pins. e.g. strap a pull up resistor between an IO and VDD

public defn bypass-cap-strap (power-pin:JITXObject, gnd-pin:JITXObject, capacitance:Double):
  inside pcb-module:
    val cap = cap-strap(gnd-pin, power-pin, capacitance)
    short-trace(cap.p[2], power-pin)
    cap

public defn bypass-caps (power-pin:JITXObject|Symbol, gnd-pin:JITXObject|Symbol, voltage:Double, caps:Tuple<Double>, name:Symbol) :
  inside pcb-module:
    val n-caps = length(caps)
    for i in 0 to n-caps do :
      inst c : ceramic-cap(["capacitance" => caps[i], "min-rated-voltage" => voltage])
      match(power-pin) :
        (r:JITXObject) :
          net (r, c.p[1])
        (s:Symbol) :
          make-net(s, false, [c.p[1]], false)
      match(gnd-pin) :
        (r:JITXObject) :
          net (r, c.p[2])
        (s:Symbol) :
          make-net(s, false, [c.p[2]], false)

; ========================================================
; ======================= res-strap ======================
; ========================================================

doc: \<>
`res-strap` is a wrapper around [chip-resistor](#chip-resistor). So this call requires internet access.
It needs to be called inside a pcb module.
It instantiates a chip resistor using provided `params` in the current module, and
connects the pins of the chip resistor to `first-pin` and `second-pin` that are JITXObjects from the module.

```stanza
public defn res-strap (first-pin:JITXObject, second-pin:JITXObject, params:Tuple<KeyValue>)
```

Quick accessors:
```stanza
public defn res-strap (first-pin:JITXObject, second-pin:JITXObject, resistance:Double, tol:Double)
public defn res-strap (first-pin:JITXObject, second-pin:JITXObject, resistance:Double)
```

Example: instantiating a 10Ω chip resistor between the pins `reset` and `vio`
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components

pcb-module my-module :
  pin reset
  pin vio
  res-strap(reset, vio, 10.0)
```
<>

public defn res-strap (first-pin:JITXObject, second-pin:JITXObject, params:Tuple<KeyValue>) :
  inside pcb-module:
    inst rid : chip-resistor(params)
    net (first-pin, rid.p[1])
    net (second-pin, rid.p[2])
    rid

public defn res-strap (first-pin:JITXObject, second-pin:JITXObject, resistance:Double, tol:Double) :
  res-strap(first-pin, second-pin, ["resistance" => resistance "tolerance" => tol])

public defn res-strap (first-pin:JITXObject, second-pin:JITXObject, resistance:Double) :
  res-strap(first-pin, second-pin, ["resistance" => resistance])

; ========================================================
; ====================== cap-strap =======================
; ========================================================

doc: \<>
`cap-strap` is a wrapper around [ceramic-cap](#ceramic-cap). So this call requires internet access.
It needs to be called inside a pcb module.
It instantiates a chip capacitor using provided `params` in the current module, and
connects the pins of the ceramic capacitor to `first-pin` and `second-pin` that are JITXObjects from the module.

```stanza
public defn cap-strap (first-pin:JITXObject, second-pin:JITXObject, params:Tuple<KeyValue>)
```

Quick accessors:
```stanza
public defn cap-strap (first-pin:JITXObject, second-pin:JITXObject, capacitance:Double, tol:Double)
public defn cap-strap (first-pin:JITXObject, second-pin:JITXObject, capacitance:Double)
```

Example: instantiating a 10nF ceramic capacitor between the pins `reset` and `vio`
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components

pcb-module my-module :
  pin reset
  pin vio
  cap-strap(reset, vio, 10.0e-9)
```
<>

public defn cap-strap (first-pin:JITXObject, second-pin:JITXObject, params:Tuple<KeyValue>) :
  inside pcb-module:
    inst cap : ceramic-cap(params)
    net (first-pin, cap.p[1])
    net (second-pin, cap.p[2])
    cap

public defn cap-strap (first-pin:JITXObject, second-pin:JITXObject, capacitance:Double, tol:Double) :
  cap-strap(first-pin, second-pin, ["capacitance" => capacitance "tolerance" => tol])

public defn cap-strap (first-pin:JITXObject, second-pin:JITXObject, capacitance:Double) :
  cap-strap(first-pin, second-pin, ["capacitance" => capacitance])

; ========================================================
; ====================== ind-strap =======================
; ========================================================

doc: \<>
`ind-strap` is a wrapper around [smd-inductor](#smd-inductor). So this call requires internet access.
It needs to be called inside a pcb module.
It instantiates an SMD inductor using provided `params` in the current module, and
connects the pins of the SMD inductor to `first-pin` and `second-pin` that are JITXObjects from the module.

```stanza
public defn ind-strap (first-pin:JITXObject, second-pin:JITXObject, params:Tuple<KeyValue>)
```

Quick accessors:
```stanza
public defn ind-strap (first-pin:JITXObject, second-pin:JITXObject, inductance:Double, tol:Double)
public defn ind-strap (first-pin:JITXObject, second-pin:JITXObject, inductance:Double)
```

Example: instantiating a 5µH SMD inductor between the pins `reset` and `vio`
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/generic-components

pcb-module my-module :
  pin reset
  pin vio
  ind-strap(reset, vio, 5.0e-6)
```
<>

public defn ind-strap (first-pin:JITXObject, second-pin:JITXObject, params:Tuple<KeyValue>) :
  inside pcb-module:
    inst ind : smd-inductor(params)
    net (first-pin, ind.p[1])
    net (second-pin, ind.p[2])
    ind

public defn ind-strap (first-pin:JITXObject, second-pin:JITXObject, inductance:Double, tol:Double) :
  ind-strap(first-pin, second-pin, ["inductance" => inductance "tolerance" => tol])

public defn ind-strap (first-pin:JITXObject, second-pin:JITXObject, inductance:Double) :
  ind-strap(first-pin, second-pin, ["inductance" => inductance])

public defn default-bypass (cmp:JITXObject) :
  inside pcb-module:
    for p in ports(cmp) do :
      if has-property?(p.power-pin) :
        inst cap : ceramic-cap(0.1)
        property(cap.bypass) = true
        net (cap.p[1], p)
        short-trace(cap.p[1], p)
        net (cap.p[2], cmp.gnd)

public defn block-cap (in:JITXObject, out:JITXObject, cap:Double) :
  inside pcb-module :
    inst block : ceramic-cap(cap)
    net (in, block.p[1])
    net (out, block.p[2])
    block

public defn block-cap (in:JITXObject, out:JITXObject) :
  block-cap(in, out, 100.0e-6)


; ========================================================
; =================== Generic connectors =================
; ========================================================

public defn banana-plug (color:String) :
  inside pcb-module :
    public inst b : ocdb/pomona/1581/component(color)
    b

public pcb-component pin-header (n-pin:Int, n-row:Int, pin-pitch:Double, row-pitch:Double) :
  description = "Generic pin-header"
  mpn = to-string("%_X%_-pin-header" % [n-pin n-row])
  if n-row == 1 :
    pin-properties :
      [pin:Ref     | pads:Int ...   | side:Dir]
      for i in 1 through n-pin do :
        [p[i] | i | Left]
  else :
    pin-properties :
      [pin:Ref     | pads:Int ...   | side:Dir]
      for i in 1 through n-pin by 2 do :
        [p[i] | i | Left]
        [p[i + 1] | (i + 1) | Right]

  assign-landpattern(pin-header-pkg(n-pin, n-row, pin-pitch, row-pitch))
  make-box-symbol()

  reference-prefix = "J"

public defn pin-header (n-pin:Int) :
  pin-header(n-pin, 1, 2.54)

public defn pin-header (n-pin:Int, n-row:Int) :
  pin-header(n-pin, n-row, 2.54)

public defn pin-header (n-pin: Int, pin-pitch:Double) :
  pin-header(n-pin, 1, pin-pitch)

public defn pin-header (n-pin: Int, n-row: Int, pin-pitch:Double) :
  pin-header(n-pin, n-row, pin-pitch, pin-pitch)

; [TODO] is gnd from self? Yes, it is from self. Add in when this area is uncommented.
;<gnd>
public defn sma-connector (sig:JITXObject, launch:String) :
  inside pcb-module :
    if launch == "end-launch":
      public inst c : ocdb/johnson/142-0761-881/component
      net (c.sig, sig)
      net (c.gnd, gnd)
      c
    else :
      fatal("Unsupported SMA Connector type")

public defn bnc-connector (sig:JITXObject, launch:String) :
  inside pcb-module :
    if launch == "end-launch":
      public inst c : ocdb/amphenol/112640/component
      net (c.sig, sig)
      net (c.gnd, gnd)
      c
    else :
      fatal("Unsupported SMA Connector type")

public defn ethernet-jack ():
  inside pcb-module :
    public inst c : ocdb/pulse-electronics/J0G-0009NL/component
    net (c.shield, gnd)
    c
;<gnd>

; USB2 device connection via USBA MicroB
public pcb-module micro-usb-connector :
  port usb-2 : usb-2
  public inst con : ocdb/amphenol/10103594-0001LF/component
  net VBUS (usb-2.vbus.vdd con.VCC)
  net (usb-2.vbus.gnd con.GND)
  ; RC filter connection for chassis gnd
  res-strap(con.SHIELD, con.GND, 100.0e3)
  cap-strap(con.SHIELD, con.GND, 0.1e-6)
  net D+ (usb-2.data.P con.D+)
  net D- (usb-2.data.N con.D-)
  net ID (usb-2.id con.ID)
  property(con.VCC.power-supply-pin) = PowerSupplyPin(5.0, 0.5)

; USB2 device connection via USBC connector
public pcb-module usb2-on-a-usb-c-connector :
  port usb-2 : usb-2
  public inst con : ocdb/belfuse/SS-52400-003/component

  net VBUS (usb-2.vbus.vdd con.vbus)
  net (usb-2.vbus.gnd con.GND)

  net D- (usb-2.data.N con.DN1, con.DN2)
  net D+ (usb-2.data.P con.DP1, con.DP2)

  ; RC filter connection for chassis gnd
  res-strap(con.SHIELD, con.GND, 100.0e3)
  cap-strap(con.SHIELD, con.GND, 0.1e-6)

  ; 5V Downstream USBC device configuration
  res-strap(con.CC1, con.GND, 5.1e3)
  res-strap(con.CC2, con.GND, 5.1e3)

  property(con.vbus) = PowerSupplyPin(5.0, 0.5)
  
; Add a tag-connect landing pattern to a processor
public defn attach-programming-connector (proc:JITXObject, vio:JITXObject, intf:String):
  inside pcb-module:
    public inst tag : ocdb/tag-connect/TC2050-IDC-NL/module
    net (vio, tag.pwr)
    if intf == "swd" :
      require swd:swd() from proc
      net (swd tag.swd)
    else if intf == "jtag" :
      require jtag:jtag() from proc
      net (jtag tag.jtag)

; ========================================================
; ================== Testpoint functions =================
; ========================================================

public defn add-testpoint (rs:Tuple<JITXObject>, method:String) :
  inside pcb-module :
    for r in rs do :
      if method == "pth-loop" :
        var color = "yellow"
        ; if r == #R(gnd):
        ;   color = "black"
        inst tp : ocdb/keystone/500xx/component(color)
        net (tp.p, r)
      else if method == "smd-loop" :
        inst tp : ocdb/te-connectivity/RC/component
        net (tp.p, r)
      else if method == "smd-pad" :
        inst tp : gen-testpad(2.0)
        net (tp.p, r)
      else :
        fatal("Unsupported add-testpoint method.")

public defn add-testpoint (rs:Tuple<JITXObject>) :
  add-testpoint(rs, "pth-loop")

public pcb-component gen-testpad (d:Double) :
  pin tp
  symbol = test-point-sym(tp => test-point-sym.p)
  val pkg = testpad(d)
  landpattern = pkg(tp => pkg.tp)

public defn add-testpad (rs:Tuple<JITXObject>, d:Double) :
  inside pcb-module :
    for r in rs do :
      public inst tp : gen-testpad(d)
      net (tp.tp, r)

public pcb-component smd-testpoint-cmp (d:Double) :
  pin p
  symbol = test-point-sym(p => test-point-sym.p)
  val lp = smd-testpoint-pkg(d)
  landpattern = lp(p => lp.p)
  reference-prefix = "TP"

public defn smd-testpoint-cmp () :
  smd-testpoint-cmp(2.0)

;<gnd>
public defn filter (in:JITXObject, out:JITXObject, type:String, params:Tuple<Double>) :
  inside pcb-module:
    if type == "rc-lowpass" :
      public inst r : chip-resistor(params[0], 0.01)
      public inst c : ceramic-cap(params[1])
      net (in r.p[1])
      net (out r.p[2] c.p[1])
      net (gnd c.p[2])
    else :
      fatal("Unsupported add-testpoint method.")
;<gnd>

public defn dip-pull (pins:Tuple<JITXObject>, power-pin:JITXObject, gnd-pin:JITXObject) :
  inside pcb-module :
    val n = length(pins)
    public inst dip : ocdb/cts/219/component(n)
    require sws:SPST[n] from dip
    for i in 0 to n do :
      net (pins[i], sws[i].p)
      net (power-pin, sws[i].t)
      res-strap(pins[i], gnd-pin, 10.0e3)

; A mounting hole component with drill and mask radius. Pad radius is unused.
public pcb-component mounting-hole (drill-r:Double, pad-r:Double, mask-r:Double) :
  name             = "Generic Mounting Hole"
  description      = to-string("%~mm mounting hole" % [2. * drill-r])
  landpattern      = (non-plated-hole-landpattern(drill-r, mask-r))()
  symbol           = unplated-hole-sym()

; A mounting hole component with drill and pad radius. 
public defn mounting-hole (drill-r:Double, pad-r:Double) :
  mounting-hole(drill-r, pad-r, pad-r + 0.35)

; A mounting hole component with a fixed drill radius
public defn mounting-hole (drill-r:Double) :
  mounting-hole(drill-r, drill-r + 0.35)

; A non-standard hole with arbitrary shape
public pcb-component hole-component (hole-shape:Shape):
  name              = "Generic hole"
  description       = to-string("%_ shaped hole" % [hole-shape])
  landpattern       = (non-plated-hole-landpattern(hole-shape))()
  symbol            = unplated-hole-sym()
  reference-prefix = "H"

; Add mounting holes to the board given its shape, a screw size, and hole indices to exclude.
public defn add-mounting-holes (board-shape:Shape, screw-size:String|Double, no-hole:Tuple<Int>) :
  val d = dims(board-shape)
  val board = Rectangle(x(d), y(d))
  inside pcb-module :
    val w =  width(board)
    val h =  height(board)
    val r = match(screw-size) :
      (screw:String) :
        switch(screw) :
          ;Loose Fit https://blogs.mentor.com/tom-hausherr/blog/tag/pcb-mounting-holes/
          "M2"   : 2.3 / 2.0
          "M2p5" : 2.85 / 2.0
          "M3"   : 3.5 / 2.0
          "M3p5" : 3.9 / 2.0
          else : fatal("Unsupported screw-size %_ for mounting hole" % [screw])
      (diameter:Double) : diameter / 2.0
      (f) : fatal("Unsupported call to mounting hole")
    val offs = r * 6.0 ;1.5X bolt diameter * 2
    for (l in grid-locs(2, 2, w - offs, h - offs), i in 1 through 4) do :
      if not contains?(no-hole,i) :
        inst hole : mounting-hole(r)
        place(hole) at l on Top

; Add mounting holes to the board given its shape and a screw size.
public defn add-mounting-holes (board:Shape, screw-size:String|Double):
  add-mounting-holes(board, screw-size, [])

;  Add mounting holes to the board given its shape. Defaults to M3 size holes.
public defn add-mounting-holes (board:Shape) :
  add-mounting-holes(board, "M3", [])

; Add mounting holes to the board given its shape, excluding holes given
; by the indices in no-holes. Defaults to M3 size mounting holes.
public defn add-mounting-holes (board:Shape, no-hole:Tuple<Int>) :
  add-mounting-holes(board, "M3", no-hole)

; ========================================================
; ===================== Antennas =========================
; ========================================================

pcb-landpattern ant-2GHz4-inverted-f-geom :

  pad launch : smd-pad(0.5, 0.5) at loc(0.0, 0.25)
  pad gnd : smd-pad(0.9, 0.5) at loc(-2.1, 0.25)

  copper(LayerIndex(0)) = Line(0.5, [Point(-2.1, 5.15), Point(2.2, 5.15), Point(2.2, 2.51), 
                                Point(4.7, 2.51),  Point(4.7, 5.15), Point(6.9, 5.15), 
                                Point(6.9, 2.51),  Point(9.4, 2.51), Point(9.4, 5.15), 
                                Point(11.6, 5.15), Point(11.6, 0.96)])
  copper(LayerIndex(0)) = Line(0.5, [Point(0.0, 0.0),   Point(0.0, 5.15)])
  copper(LayerIndex(0)) = Rectangle(0.9, 5.4, loc(-2.1, 2.7))
  via(LayerIndex(0), LayerIndex(0, Bottom), 
    radius = 0.3, hole-radius = 0.125) 
    at Point(-2.1, 0.0)
  layer(ForbidCopper(LayerIndex(0), LayerIndex(0, Bottom))) = Rectangle(18.0, 5.5, loc(5.0, 3.25))
  layer(Courtyard(Top)) = Rectangle(18.0, 5.5, loc(5.0, 3.25))
  layer(Courtyard(Bottom)) = Rectangle(18.0, 5.5, loc(5.0, 3.25))
  layer(BoardEdge()) = Line(0.0, [Point(17.0, 6.0), Point(-7.0, 6.0)])
  ref-label()

public pcb-component inverted-f-antenna-cmp :
  pin launch
  pin gnd
  description = "2.4 GHz Inverted F trace antenna"
  val pkg = ant-2GHz4-inverted-f-geom
  val sym = antenna-symbol(1,1)
  landpattern = pkg(launch => pkg.launch, gnd => pkg.gnd)
  symbol = sym(launch => sym.p[1], gnd => sym.p[2])
  reference-prefix = "ANT"

public pcb-module inverted-f-antenna :
  pin rf-in
  pin gnd
  public inst ant : inverted-f-antenna-cmp
  place(ant) at loc(0.0,0.0) on Top
  ; PI filter
  public inst c0 : ceramic-cap(["capacitance" => 5.6e-12 "temperature-coefficient.code" => "C0G"])
  public inst c1 : ceramic-cap(["capacitance" => 2.4e-12 "temperature-coefficient.code" => "C0G"])
  public inst l : smd-inductor(["inductance" => 2.7e-9 "min-self-resonant-frequency" => 7.0e6 "min-quality-factor" => 8.0])
  net (gnd, ant.gnd c1.p[1] l.p[1])
  net (ant.launch c0.p[2] c1.p[2])
  net (rf-in c0.p[1] l.p[2])
  place(c1) at loc(-0.5, -0.3) on Top
  place(c0) at loc(-0.05, -1.45, 90.0) on Top
  place(l) at loc(-0.5, -2.6) on Top

; ========================================================
; =================== Indicators =========================
; ========================================================

; 50 - 200 mcd for daylight
; 4 - 10 mcd for indoor

; Adds an RGB led to a processor using PWM pins
public defn add-rgb-indicator (brightness:Double, proc:JITXObject, vin:JITXObject):
  inside pcb-module:
    val vio = 3.3 ; TODO: get this from the vin pin property
    ; Calculate resistance to get appropriate brightness
    defn calc-r (l:JITXObject, brightness:Double, vio:Double):
      val i = PWL(property(l.mcd-current))[brightness]
      closest-std-val((vio - property(l.forward-voltage)) / i, 1.0)
    
    public inst led : ocdb/foshan-optoelectronics/FM-B2020RGBA-HG/component ; TODO: make generic
    require pwm:timer[3] from proc
    res-strap(pwm[0].timer, led.l.r, calc-r(led.l.r, brightness, vio))
    res-strap(pwm[1].timer, led.l.g, calc-r(led.l.g, brightness, vio))
    res-strap(pwm[2].timer, led.l.b, calc-r(led.l.b, brightness, vio))
    net (vin, led.l.a)
