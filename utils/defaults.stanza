#use-added-syntax(jitx)
defpackage ocdb/utils/defaults :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/generator-utils
  import ocdb/utils/box-symbol

;============================================================
;=================== Default Materials ======================
;============================================================

public pcb-material copper-default :
  type = Conductor
  name = "Copper"
  
public pcb-material core-default :
  type = Dielectric
  dielectric-coefficient = 4.26
  name = "PR4 Core"

public pcb-material prepreg-default :
  type = Dielectric
  dielectric-coefficient = 4.26
  name = "PR4 Prepreg 2113/2116"

public pcb-material soldermask-default :
  type = Dielectric
  dielectric-coefficient = 3.9
  name = "Taiyo BSN4000"

;============================================================
;============== Default Stackup, Rules, Board ===============
;============================================================
; Creates a default stackup given a number of layers
public pcb-stackup default-stackup (num-layers:Int) :
  name = "Default stackup"
  layer(2.03e-2, soldermask-default)
  for i in 0 to num-layers do :
    layer(1.498e-1, prepreg-default) when i > 0
    layer(5.08e-2, copper-default)  
  layer(2.03e-2, soldermask-default)   

; The default design rules.
public pcb-rules default-rules :
  min-copper-width = 0.13 ; 5mil
  min-copper-copper-space = 0.2 ; 
  min-copper-hole-space = 0.2032 ; 8mil
  min-copper-edge-space = 0.381 ; 10mil outer, but 15mil inner
  min-annular-ring = 0.1524 ; 6mil
  min-drill-diameter = 0.254 ; 10mil
  min-silkscreen-width = 0.0762 ; 3mil
  min-pitch-leaded = 0.35 ; guess
  min-pitch-bga = 0.35 ; guess
  max-board-width = 457.2 ; 18in
  max-board-height = 609.6 ; 24in
  solder-mask-registration = 0.15
  min-silk-solder-mask-space = 0.15
  min-silkscreen-text-height = 0.762
  min-th-pad-expand-outer = 0.15
  min-soldermask-opening = 0.152
  min-soldermask-bridge = 0.102
  min-hole-to-hole = 0.254
  min-pth-pin-solder-clearance = 3.0
set-default-rules(default-rules)

public pcb-via default-via :
  name = "Default TH"     
  start = LayerIndex(0, Top)
  stop = LayerIndex(0, Bottom)
  diameter = 0.6
  hole-diameter = 0.3
  type = MechanicalDrill

public pcb-via minimum-via :
  name = "Minimum TH"     
  start = LayerIndex(0, Top)
  stop = LayerIndex(0, Bottom)
  val annular = clearance(current-rules(), MinAnnularRing)
  val drill = clearance(current-rules(), MinDrillDiameter)
  diameter = drill + annular * 2.0
  hole-diameter = drill
  type = MechanicalDrill

; Creates a pcb-board with default stackup given the number of layers and board outline.
public pcb-board default-board (num-layers:Int, outline:Shape) :
  stackup = default-stackup(num-layers)
  boundary = outline
  signal-boundary = outline
  vias = [default-via minimum-via]

; Creates a pcb-board with default stackup given the number of layers and board outline.
public pcb-board default-board (stack:Stackup, outline:Shape) :
  stackup = stack
  boundary = outline
  signal-boundary = outline
  vias = [default-via minimum-via]

; Creates a design using the default board. 
public defn make-default-board (module:Instantiable, num-layers:Int, outline:Shape) :
  set-main-module(module)
  set-board(default-board(num-layers, outline))
  set-rules(default-rules)

;============================================================
;================= Single Module Design =====================
;============================================================
; Create a design with a single module, given a board
public defn make-single-module-design (module:Instantiable, board:Board) :
  ; TODO: is this still necessary?
  pcb-module main-module :
    inst instance : module
    place(instance) at loc(0.0, 0.0) on Top

  set-main-module(main-module)
  set-board(board)
  set-rules(default-rules)
  
; Create a single moduel design on a board of 10x10mm.
public defn make-single-module-design (module:Instantiable) :
  ; TODO: determine the bounds of the module for the board outline, if possible.
  make-single-module-design(module, default-board(4, Rectangle(10.0, 10.0)))

;============================================================
;==================== Default Component =====================
;============================================================
; Create a component given its land pattern
public pcb-component default-component (lp:LandPattern) : 
  val pads = to-tuple(pads(lp))
  if empty?(pads) :
    landpattern = lp()
  else if length(pads) == 1 :
    val r = ref(pads[0])
    pin-properties: 
      [pin: Ref | pads: Ref ... | side: Dir]
      [(r) | (r) | Down ]
    assign-landpattern(lp)
  else :
    val n = length(pads) / 2
    val [left, right] = [
      pads[0 to n],
      pads[n to false]
    ]
    pin-properties: 
      [pin: Ref | pads: Ref ... | side: Dir]
      for p in left do: 
        [(ref(p)) | (ref(p)) | Left]
      for p in right do: 
        [(ref(p)) | (ref(p)) | Right]
    assign-landpattern(lp)
  make-box-symbol()
