#use-added-syntax(jitx)
defpackage ocdb/land-patterns :
  import core
  import collections
  import math
  import jitx
  import jitx/fonts
  import jitx/commands with:
    prefix(pad) => def-
  import ocdb/design-vars
  import ocdb/land-protrusions
  import ocdb/tolerance
  import ocdb/passive-land-sizes

; ====== Argument constraint Helpers ===========================================
defn ensure-even-positive! (value: Int, name: String):
  if value < 2 or value % 2 == 1:
    fatal("%_ only supports a positive even number of pins." % [name])

; ====== Silk screen helpers ===================================================
public defn draw-polarity-marker (pad-1-ref:Ref):
  ; find pad 1
  inside pcb-landpattern:
    val min-silk-width = clearance(current-rules(), MinSilkscreenWidth)
    defn draw-line (origin:Pose):
      val line-width = min-silk-width
      val line-length = line-width * 3.0
      val line = Line(line-width, [
        Point(-0.5 * line-width, 0.0)
        Point( 0.5 * line-width, 0.0)  
      ])
      layer(Silkscreen("pol", Top)) = origin * line

    defn corner-pose () -> Pose:
      val dims   = extant-dims()
      val corner = Point(
        x(dims) * -0.5,
        y(dims) *  0.5
      ) 
      val center = corner + Point(
        -0.5 * min-silk-width - PLACEMENT-TOLERANCE, 
        0.5 * min-silk-width + PLACEMENT-TOLERANCE
      )
      Pose(center, 0.0, false)

    defn pad-1-pose () -> Pose:
      val pad-1    = find!({ref(_) == pad-1-ref}, pads(self))
      val pad-dims = dims(pad-shape(def-pad(pad-1)))
      val dims     = extant-dims()
      val pad-loc  = pose(pad-1)
      if x(dims) > y(dims):
        val translation = -0.5 * x(pad-dims) 
        println("...")
        ; rotated 90 degrees
      else:
        println("...")
      loc(0.0, 0.0)

    val [p1, p2] = [corner-pose(), pad-1-pose()]
    draw-line $ 
      if x(center(p1)) > x(center(p2)) or y(center(p1)) > y(center(p2)):
        p1
      else:
        p2

; Create a reference label at (x, y) with text anchor a
public defn ref-label (x:Double, y:Double, a:Anchor) :
  inside pcb-landpattern :
    layer(Silkscreen("values", Top)) = Text(">REF", 0.7056, a, loc(x,y))

; Create a reference label at (x, y)
public defn ref-label (x:Double, y:Double) :
  ref-label(x,y,C)

; Create a reference label at (0, 0)
public defn ref-label () :
  ref-label(0.0, 0.0)

;==============================================================================
;=========================== Geometric Helpers ================================
;==============================================================================
; Helper to normalize x/y dimensions into x/y and position, assuming that x is the longer
; dimension than y.
public defn normalize-dimensions (dims:Dims) -> [Dims(), Pose]:
  val length = max(x(dims), y(dims))
  val width  = min(x(dims), y(dims))
  val rot    = 90.0 when y(dims) > x(dims) else 0.0
  [Dims(length, width), rot]

; Create a capsule with normalized rotation
defn capsule (anchor:Anchor, width:Double, height:Double) -> Capsule:
  if width >= height:
    Capsule(anchor, width, height)
  else:
    Capsule(width, height, loc(0.0, 0.0, 90.0))

; Create a rounded rectangle with normalized rotation
defn round-rect (width:Double, height:Double, r:Double) -> RoundedRectangle:
  if width >= height:
    RoundedRectangle(width, height, r)
  else: 
    RoundedRectangle(height, width, r, loc(0.0, 0.0, 90.0))

; Create a chamfered rectangle with normalized rotation
defn chamfered (width:Double, height:Double, r:Double) -> ChamferedRectangle:
  if width >= height:
    ChamferedRectangle(width, height, r)
  else:
    ChamferedRectangle(height, width, r, loc(0.0, 0.0, 90.0))

; Creata a unit rectangle (width = length = 1.0)
public defn unit-rectangle ():
  Rectangle(1.0, 1.0)

; Create a unit circle (diameter = 1.0)
public defn unit-circle ():
  Circle(0.5)

; Create a unit rounded rectangle (width = length = 1.0)
public defn unit-rounded-rectangle (radius:Double):
  RoundedRectangle(1.0, 1.0, radius)

; Create a unit d-shape (width = length = 1.0)
public defn unit-d-shape (radius:Double):
  DShape(1.0, 1.0, radius)

; Create a unit chamfered rectangle (width = length = 1.0)
public defn unit-chamfered-rectangle (radius:Double):
  ChamferedRectangle(1.0, 1.0, radius)

; Fit a shape inside dimensions. 
public defn fit-dims (s:Shape, dims:Dims) -> Shape:
  match(s):
    (r:Rectangle):
      Rectangle(x(dims), y(dims), pose(r))
    (r:RoundedRectangle):
      RoundedRectangle(x(dims), y(dims), radius(r), pose(r))
    (r:DShape):
      DShape(x(dims), y(dims), radius(r), pose(r))
    (r:ChamferedRectangle):
      ChamferedRectangle(x(dims), y(dims), radius(r), pose(r))
    (c:Circle):
      Circle(center(c), 0.5 * min(x(dims), y(dims)))
    (_:?):
      throw(Exception("Unsupported shape: %_" % [s]))

; Create a rectangle out of lines
public defn LineRectangle (w:Double, h:Double, xc:Double, yc:Double, line-w:Double) :
  val w2 = w * 0.5
  val h2 = h * 0.5
  Line(line-w, [
    Point(xc - w2, yc - h2)
    Point(xc + w2, yc - h2)
    Point(xc + w2, yc + h2)
    Point(xc - w2, yc + h2)
    Point(xc - w2, yc - h2)])

; Create a rectangle with width, height, center x/y and default line width
public defn LineRectangle (w:Double, h:Double, xc:Double, yc:Double) :
  LineRectangle(w, h, xc, yc, MIN-SILKSCREEN-WIDTH)

; ====== Land pattern utilities ===============================================
; Find the extant dimensions of a landpattern given all its layers and pads.
public defn extant-dims () -> Dims:
  inside pcb-landpattern:
    val all-shapes = cat-all $ [
      for pad_ in pads(self) seq:
        pose(pad_) * pad-shape(def-pad(pad_))
      for pad_ in pads(self) seq-cat:
        for layer in filter({specifier(_) is-not Silkscreen}, layers(def-pad(pad_))) seq:
          pose(pad_) * shape(layer)
      for layer-shape in filter({specifier(_) is-not Silkscreen}, layers(self)) seq:
        shape(layer-shape)
    ]
    Dims(0.0, 0.0) when empty?(all-shapes) else dims(Union(all-shapes))

; Apply a shape to the soldermask layer of a pcb-pad. 
public defn apply-soldermask (mask-shape:Shape):
  inside pcb-pad:
    layer(SolderMask(Top)) = mask-shape
    if pad-type(self) == TH:
      layer(SolderMask(Bottom)) = mask-shape

; Create the soldermask layers based on the pad shape, using a fixed factor.
; when expand? is true the soldermask shape is computed with expand(), else it is
; computed with offset()
public defn apply-soldermask (amount:Double, expand?:True|False):
  val func = expand when expand? else offset
  inside pcb-landpattern:
    apply-soldermask(func(pad-shape(self), amount))

; Apply a default soldermask layer to a pcb-pad, using the SOLDER-MASK-REGISTRATION
; design variable and offset() method.
public defn apply-soldermask ():
  apply-soldermask(SOLDER-MASK-REGISTRATION, false)

; A "solder mask defined pad" is one where the soldermask opening is smaller than 
; the pad shape. This method takes a pad as an argument and converts it into a 
; soldermask-defined version based on its soldermask layer, if it exists, or the
; pad shape if it does not.
public defn soldermask-defined (p:Pad):
  ; extract the pad data before conversion
  val mask?   = find({specifier(_) is SolderMask}, layers(p))  
  ; special case: the mask is smaller than the shape already
  if (mask? is-not False) and 
     (min-width([pad-shape(p)]) > min-width([shape $ (mask? as LayerShape)])) :
    p
  else :
    pcb-pad SMD-p:
      name  = to-string("%_, SMD" % [name(p)])
      type  = pad-type(p)
      shape = pad-shape(p)
      apply-soldermask(0.85, true)
      for layer_ in filter({specifier(_) is-not SolderMask}, layers(p)) do:
        layer(specifier(layer_)) = shape(layer_)
    SMD-p

; Convert a landpattern to solder mask defined. Geoms will be ignored. 
public defn soldermask-defined (lp:LandPattern):
  pcb-landpattern SMD-l:
    name = to-string("%_, soldermask defined" % [name(lp)])

    for pad_ in pads(lp) do:
      pad (ref(pad_)): soldermask-defined(def-pad(pad_)) at pose(pad_)
      
    for layer_ in layers(lp) do:
      layer(specifier(layer_)) = shape(layer_)
  SMD-l

public pcb-pad smd-pad (anchor:Anchor, w:Double, h:Double) :
  name = to-string("%_x%_ %_ SMD Pad" % [w,h,anchor])
  type = SMD
  shape = Rectangle(anchor, w, h)
  layer(Paste(Top)) = Rectangle(anchor, w, h)
  layer(SolderMask(Top)) = Rectangle(anchor, w, h)

public pcb-pad bga-pad (d:Double) :
  name = to-string("%_ BGA Pad" % [d])
  type = SMD
  shape = Circle(d / 2.0)
  layer(Paste(Top)) = Circle(d / 2.0)
  layer(SolderMask(Top)) = Circle(d / 2.0)

public pcb-pad top-smd-testpoint-pad (d:Double) :
  name  = to-string("Test Point Pad")
  type  = SMD
  shape = Circle(d / 2.0)
  layer(Paste(Top)) = Circle(d / 2.0)
  layer(SolderMask(Top)) = Circle(d / 2.0)

public pcb-pad btm-smd-testpoint-pad (d:Double) :
  name  = to-string("Test Point Pad")
  type  = SMD
  shape = Circle(d / 2.0)
  layer(Paste(Bottom)) = Circle(d / 2.0)
  layer(SolderMask(Bottom)) = Circle(d / 2.0)

public defn top-smd-testpoint-pad () :
  top-smd-testpoint-pad(2.0)

public defn btm-smd-testpoint-pad () :
  btm-smd-testpoint-pad(2.0)

public pcb-pad testpoint-pad (d:Double) :
  name  = to-string("%_  Testpoint Pad" % [d])
  type  = SMD
  shape = Circle(d / 2.0)
  layer(SolderMask(Top)) = Circle(d / 2.0)
    
public defn smd-pad (w:Double, h:Double) :
  smd-pad(C,w,h)

pcb-pad pth-pad (anchor:Anchor, drill-r:Double, pad-r:Double, mask-r:Double) :
  name = to-string("%_ PTH Pad (drill = %_, pad = %_, mask = %_)" % [
           anchor, drill-r, pad-r, mask-r])
  type = TH
  shape = Circle(anchor, pad-r)
  layer(Cutout()) = Circle(anchor, drill-r)
  layer(SolderMask(Top)) = Circle(anchor, mask-r)
  layer(SolderMask(Bottom)) = Circle(anchor, mask-r)

public defn pth-pad (drill-r:Double, mask-r:Double) :
  pth-pad(C, drill-r, mask-r, mask-r)

public defn pth-pad (anchor:Anchor, drill-r:Double) :
  pth-pad(anchor, drill-r, drill-r + 0.35, drill-r + 0.35)

public defn pth-pad (drill-r:Double) :
  pth-pad(C, drill-r)
  
pcb-pad pth-ovalcut-pad (anchor:Anchor, drill-w:Double, drill-h:Double, pad-r:Double, mask-r:Double) :
  name = to-string("%_ PTH Pad (drill = (%_, %_), pad = %_, mask = %_)" % [
           anchor, drill-w, drill-h, pad-r, mask-r])
  type = TH
  shape = Circle(anchor, pad-r)
  layer(Cutout()) = Capsule(drill-w, drill-h) when drill-w >= drill-h else
                    Capsule(drill-h, drill-w, loc(0., 0., 90.))
  layer(SolderMask(Top)) = Circle(anchor, mask-r)
  layer(SolderMask(Bottom)) = Circle(anchor, mask-r)

public defn pth-ovalcut-pad (drill-w:Double, drill-h:Double, mask-r:Double) :
  pth-ovalcut-pad(C, drill-w, drill-h, mask-r, mask-r)

pcb-pad oval-smd-pad (anchor:Anchor, w:Double, h:Double) :
  name = to-string("%_x%_ %_ Oval SMD Pad" % [w,h,anchor])
  type = SMD
  if w >= h :
    shape = Capsule(anchor, w, h)
    layer(Paste(Top)) = Capsule(anchor, w, h)
    layer(SolderMask(Top)) = Capsule(anchor, w, h)
  else :
    shape = Capsule(h, w, loc(0., 0., 90.))
    layer(Paste(Top)) = Capsule(h, w, loc(0., 0., 90.))
    layer(SolderMask(Top)) = Capsule(h, w, loc(0., 0., 90.))

public defn oval-smd-pad (w:Double, h:Double) :
  oval-smd-pad(C, w, h)

pcb-pad oval-pth-pad (anchor:Anchor, drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double) :
  name = to-string("%_ Oval PTH Pad (drill = (%_, %_), pad = (%_, %_))" % [
           anchor, drill-w, drill-h, pad-w, pad-h])
  type = TH
  if pad-w >= pad-h :
    shape = Capsule(anchor, pad-w, pad-h)
    layer(Cutout()) = Circle(anchor, drill-w) when drill-w == drill-h else
                      Capsule(anchor, drill-w, drill-h)
    layer(SolderMask(Top)) = Capsule(anchor, pad-w, pad-h)
    layer(SolderMask(Bottom)) = Capsule(anchor, pad-w, pad-h)
  else :
    shape = Capsule(pad-h, pad-w, loc(0., 0., 90.))
    layer(Cutout()) = Capsule(drill-h, drill-w, loc(0., 0., 90.))
    layer(SolderMask(Top)) = Capsule(pad-h, pad-w, loc(0., 0., 90.))
    layer(SolderMask(Bottom)) = Capsule(pad-h, pad-w, loc(0., 0., 90.))

public defn oval-pth-pad (drill-r:Double, pad-w:Double, pad-h:Double) :
  oval-pth-pad(C, drill-r, drill-r, pad-w, pad-h)

public defn oval-pth-pad (drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double) :
  oval-pth-pad(C, drill-w, drill-h, pad-w, pad-h)

pcb-pad rect-pth-pad (anchor:Anchor, drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double) :
  name = to-string("%_ Rect PTH Pad (drill = (%_, %_), pad = (%_, %_))" % [
           anchor, drill-w, drill-h, pad-w, pad-h])
  type = TH
  shape = Rectangle(pad-w, pad-h)
  layer(Cutout()) = Circle(anchor, drill-w) when drill-w == drill-h else
                    Capsule(anchor, drill-w, drill-h)
  layer(SolderMask(Top)) = Rectangle(pad-w, pad-h)
  layer(SolderMask(Bottom)) = Rectangle(pad-w, pad-h)

public defn rect-pth-pad (drill-r:Double, pad-w:Double, pad-h:Double) :
  rect-pth-pad(C, drill-r, drill-r, pad-w, pad-h)

public defn rect-pth-pad (drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double) :
  rect-pth-pad(C, drill-w, drill-h, pad-w, pad-h)

pcb-pad roundrect-pth-pad (anchor:Anchor, drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  name = to-string("%_ RoundedRectangle PTH Pad (drill = (%_, %_), pad = (%_, %_, %_))" % [
           anchor, drill-w, drill-h, pad-w, pad-h, pad-r])
  type = TH
  shape = RoundedRectangle(pad-w, pad-h, pad-r)
  layer(Cutout()) = Circle(anchor, drill-w) when drill-w == drill-h else
                    Capsule(anchor, drill-w, drill-h)
  layer(SolderMask(Top)) = RoundedRectangle(pad-w, pad-h, pad-r)
  layer(SolderMask(Bottom)) = RoundedRectangle(pad-w, pad-h, pad-r)

public defn roundrect-pth-pad (drill-r:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  roundrect-pth-pad(C, drill-r, drill-r, pad-w, pad-h, pad-r)

public defn roundrect-pth-pad (drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  roundrect-pth-pad(C, drill-w, drill-h, pad-w, pad-h, pad-r)

pcb-pad roundrect-smd-pad (anchor:Anchor, w:Double, h:Double, r:Double) :
  name = to-string("(%_, %_, %_) %_ RoundedRectangle SMD Pad" % [w,h,r,anchor])
  type = SMD
  shape = RoundedRectangle(anchor, w, h, r)
  layer(Paste(Top)) = RoundedRectangle(anchor, w, h, r)
  layer(SolderMask(Top)) = RoundedRectangle(anchor, w, h, r)

public defn roundrect-smd-pad (w:Double, h:Double, r:Double) :
  roundrect-smd-pad(C, w, h, r)

pcb-pad chamferedrect-pth-pad (anchor:Anchor, drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  name = to-string("%_ ChamferedRectangle PTH Pad (drill = (%_, %_), pad = (%_, %_, %_))" % [
           anchor, drill-w, drill-h, pad-w, pad-h, pad-r])
  type = TH
  shape = ChamferedRectangle(pad-w, pad-h, pad-r)
  layer(Cutout()) = Circle(anchor, drill-w) when drill-w == drill-h else
                    Capsule(anchor, drill-w, drill-h)
  layer(SolderMask(Top)) = ChamferedRectangle(pad-w, pad-h, pad-r)
  layer(SolderMask(Bottom)) = ChamferedRectangle(pad-w, pad-h, pad-r)

public defn chamferedrect-pth-pad (drill-r:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  chamferedrect-pth-pad(C, drill-r, drill-r, pad-w, pad-h, pad-r)

public defn chamferedrect-pth-pad (drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  chamferedrect-pth-pad(C, drill-w, drill-h, pad-w, pad-h, pad-r)

pcb-pad chamferedrect-smd-pad (anchor:Anchor, w:Double, h:Double, r:Double) :
  name = to-string("(%_, %_, %_) %_ ChamferedRectangle SMD Pad" % [w,h,r,anchor])
  type = SMD
  shape = ChamferedRectangle(anchor, w, h, r)
  layer(Paste(Top)) = ChamferedRectangle(anchor, w, h, r)
  layer(SolderMask(Top)) = ChamferedRectangle(anchor, w, h, r)

public defn chamferedrect-smd-pad (w:Double, h:Double, r:Double) :
  chamferedrect-smd-pad(C, w, h, r)

pcb-pad dshape-pth-pad (anchor:Anchor, drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  name = to-string("%_ DShape PTH Pad (drill = (%_, %_), pad = (%_, %_, %_))" % [
           anchor, drill-w, drill-h, pad-w, pad-h, pad-r])
  type = TH
  shape = DShape(pad-w, pad-h, pad-r)
  layer(Cutout()) = Circle(anchor, drill-w) when drill-w == drill-h else
                    Capsule(anchor, drill-w, drill-h)
  layer(SolderMask(Top)) = DShape(pad-w, pad-h, pad-r)
  layer(SolderMask(Bottom)) = DShape(pad-w, pad-h, pad-r)

public defn dshape-pth-pad (drill-r:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  dshape-pth-pad(C, drill-r, drill-r, pad-w, pad-h, pad-r)

public defn dshape-pth-pad (drill-w:Double, drill-h:Double, pad-w:Double, pad-h:Double, pad-r:Double) :
  dshape-pth-pad(C, drill-w, drill-h, pad-w, pad-h, pad-r)

pcb-pad dshape-smd-pad (anchor:Anchor, w:Double, h:Double, r:Double) :
  name = to-string("(%_, %_, %_) %_ DShape SMD Pad" % [w,h,r,anchor])
  type = SMD
  shape = DShape(anchor, w, h, r)
  layer(Paste(Top)) = DShape(anchor, w, h, r)
  layer(SolderMask(Top)) = DShape(anchor, w, h, r)

public defn dshape-smd-pad (w:Double, h:Double, r:Double) :
  dshape-smd-pad(C, w, h, r)

public pcb-landpattern non-plated-hole-pkg (drill-r:Double, mask-r:Double) :
  layer(Cutout()) = Circle(C, drill-r)
  layer(SolderMask(Top)) = Circle(C, mask-r)
  layer(SolderMask(Bottom)) = Circle(C, mask-r)
  layer(Courtyard(Top)) = Rectangle((drill-r * 2.0), (drill-r * 2.0))
  layer(Courtyard(Top)) = Rectangle((drill-r * 2.0), (drill-r * 2.0))

public defn non-plated-hole-pkg (drill-r:Double) :
  non-plated-hole-pkg(drill-r, drill-r)

public defn LineRectangle (w:Double, h:Double, xc:Double, yc:Double, line-w:Double) :
  val w2 = w / 2.0
  val h2 = h / 2.0
  Line(line-w, [
    Point(xc - w2, yc - h2)
    Point(xc + w2, yc - h2)
    Point(xc + w2, yc + h2)
    Point(xc - w2, yc + h2)
    Point(xc - w2, yc - h2)])

public defn LineRectangle (w:Double, h:Double, xc:Double, yc:Double) :
  LineRectangle(w, h, xc, yc, 0.254)

public defn LineRectangle (w:Double, h:Double) :
  LineRectangle(w, h, 0.0, 0.0, 0.254)

public defn PlusSymbol (x:Double, y:Double) :
  Union([
    Line(0.254, [ Point(x - 0.5, y), Point(x + 0.5, y) ])
    Line(0.254, [ Point(x, y - 0.5), Point(x, y + 0.5) ])
  ])
; ====== Pad Collection Helpers ================================================

; 2D array of pins
public defn make-pin-grid (n-pin:Int, n-row:Int, pin-pitch:Double, row-pitch:Double, pad-ref) :
  inside pcb-landpattern:
    
    val n-col = to-int(ceil(to-double(n-pin) / to-double(n-row)))

    val l0 = loc((to-double(n-row - 1) * row-pitch) / -2.0, (to-double(n-col - 1) * pin-pitch) / 2.0)
    
    for i in 0 to n-col do :
      for j in 0 to n-row do :
        pad p[n-row * i + j + 1] : pad-ref at l0 * loc(to-double(j) * row-pitch, (- to-double(i) * pin-pitch))
    
public defn make-pin-grid (n-pin:Int, n-row:Int, pin-pitch:Double, row-pitch:Double) :
  make-pin-grid(n-pin, n-row, pin-pitch, row-pitch, pth-pad(0.5))

public defn make-pin-grid (n-pin:Int) :
  make-pin-grid(n-pin, 1, 2.54, 2.54)

public pcb-landpattern testpad (d:Double) :
  pad tp : testpoint-pad(d) at loc(0.0,0.0)

; ====== Package Family Generators ================================================
; TODO: Unify These.
public pcb-landpattern dummy-landpattern (n:Int, courtyard:[Double,Double]):
  val r = (max(courtyard[0], courtyard[1]) - 0.2) / 2.0
  for i in 0 to n do :
    var theta = (2.0 * PI / to-double(n)) * to-double(i) + PI
    pad p[i + 1] : bga-pad(0.05) at loc(r * cos(theta), r * sin(theta))

  layer(Courtyard(Top)) = Rectangle(courtyard[0], courtyard[1])
  layer(Silkscreen("f-silk", Top)) = LineRectangle(courtyard[0], courtyard[1])
  ref-label()

; from IPC-SM-782 spec
; Z - width between outer pad edges
; G - width between inner pad edges
; X - pad height
; w, h - width and height of courtyard in mm
public defn make-two-pin-landpattern (Z:Double, G:Double, X:Double, w:Double, h:Double, courtyard?:True|False, polarized?:True|False) :
  inside pcb-landpattern :
    val Y = (Z - G) / 2.0 ; width of pad
    val C2 = (G + Y) / 2.0 ; distance between pad center and package centerline
    if polarized? :
      pad c : smd-pad(Y,X) at loc((- C2), 0.0)
      pad a : smd-pad(Y,X) at loc(C2, 0.0)
      val he = h / 2.0 + 0.25
      val we = w / 2.0 + 0.3
      layer(Silkscreen("pol", Top)) = Line(0.12, [Point(w / 2.0, (- he)) Point((- we), (- he))])
      layer(Silkscreen("pol", Top)) = Line(0.12, [Point((- we), he) Point(w / 2.0, he) ])
      layer(Silkscreen("pol", Top)) = Line(0.30, [Point((- we), (- he)) Point((- we), he)])
    else:
      pad p[1] : smd-pad(Y,X) at loc((- C2), 0.0)
      pad p[2] : smd-pad(Y,X) at loc(C2, 0.0)
    if courtyard? : 
      layer(Courtyard(Top)) = Rectangle(w, h)

; A generic pad transformation helper
public defn pad-transformation (
  lp: LandPattern,
  xform: (LandPatternPad) -> False|Pad,
) -> LandPattern :
  pcb-landpattern new-lp:
    for pad_ in pads(lp) do:
      val def = 
        match(xform(pad_)):
          (p:Pad): p
          (_:False): def-pad(pad_)
      pad (ref(pad_)): def at pose(pad_)
  new-lp

public defn make-two-pin-landpattern (Z:Double, G:Double, X:Double, w:Double, h:Double):
  make-two-pin-landpattern(Z,G,X,w,h,true,false)

public pcb-landpattern two-pin-landpattern (Z:Double, G:Double, X:Double, w:Double, h:Double):
  make-two-pin-landpattern(Z,G,X,w,h,true,false)
public pcb-landpattern two-pin-polarized-landpattern (Z:Double, G:Double, X:Double, w:Double, h:Double):
  make-two-pin-landpattern(Z,G,X,w,h,true,true)

public defn make-ipc-two-pin-landpattern (part-name:String, courtyard?:True|False, polarized?:True|False):
  inside pcb-landpattern :
    val [Z, G, X, nr, nc] = switch(part-name) :
      "008004":[0.35, 0.10, 0.14, 0.35, 0.14]
      "01005": [0.56, 0.20, 0.23, 0.56, 0.23]
      "0201" : [1.12, 0.20, 0.42, 1.12, 0.42]
      "0402" : [1.53, 0.39, 0.62, 1.53, 0.62]
      "0603" : [2.55, 0.65, 1.00, 2.55, 1.00]
      "0805" : [2.90, 0.90, 2.00, 2.90, 2.00]
      "1206" : [4.05, 1.65, 1.80, 4.60, 2.30]
      "1210" : [4.40, 1.20, 2.70, 5.00, 3.00]
      "2010" : [6.20, 2.60, 2.70, 7.00, 3.00]
      "2512" : [7.35, 4.85, 3.40, 3.90, 7.90]
      "2920" : [9.70, 5.10, 5.60, 10.0, 6.00]
      else : 
        val [l w] = switch(length(part-name)):
          4 : [2 2]
          5 : [2 3]
          6 : [3 3]
        val len = (to-double(part-name[0 to l]) as Double )* 25.4 / (pow(10.0, to-double(l)))
        val width = (to-double(part-name[l to (l + w)]) as Double )* 25.4 / (pow(10.0, to-double(w)))
        val Z = len + 2.0 * (0.084 * len - 0.00543)
        val G = len * 0.465 - 0.222
        val X = width
        val nr = Z
        val nc = X
        [Z, G, X, nr, nc]
    make-two-pin-landpattern(Z, G, X, nr, nc, courtyard?, polarized?)
    external-names = ([part-name])
    ref-label()

;<test>
part-name: "008004" "006003" "01007" "5040" ; last 3 are made up
<test>
public defn make-ipc-two-pin-landpattern (part-name:String) :
  make-ipc-two-pin-landpattern(part-name, true, false)

;<test>
part-name: "01005"
<test>
public pcb-landpattern ipc-two-pin-landpattern (part-name:String) :
  make-ipc-two-pin-landpattern(part-name, true, false)
  ref-label()

public pcb-landpattern ipc-two-pin-landpattern (part-name:String, pol?:True|False) :
  make-ipc-two-pin-landpattern(part-name, true, pol?)
  ref-label()

;<test>
part-name: "1210"
<test>
public pcb-landpattern ipc-two-pin-pol-landpattern (part-name:String) :
  make-ipc-two-pin-landpattern(part-name, true, true)
  ref-label()

public defn make-soic127p-landpattern (n:Int, lead-span:Double) :
  ensure-even-positive!(n, "make-soic127p-landpattern")

  inside pcb-landpattern :  

    val pin-pitch = 1.27

    val x0 = (- ((lead-span / 2.0) - 0.5))
    val y0 = (to-double((n / 2) - 1) * pin-pitch) / 2.0
    val l0 = loc(x0, y0, -90.0)
    val l1 = loc((- x0), (- y0), 90.0)
    
    val pin-row = to-list(row-locs(W, n / 2, pin-pitch))

    for (i in 0 to (n / 2), l in pin-row) do :
      pad p[i + 1] : smd-pad(0.6, 1.5) at l0 * l
    
    for (i in (n / 2) to n, l in pin-row) do :
      pad p[i + 1] : smd-pad(0.6, 1.5) at l1 * l
    
    val pkg-height = to-double((n / 2) - 1) * pin-pitch + 1.1
    val c-w = lead-span + 1.5
    val c-h = pkg-height
    
    layer(Courtyard(Top)) = Rectangle(c-w, c-h)

    layer(Silkscreen("f-silk", Top)) = LineRectangle(c-w, c-h)
    layer(Silkscreen("pol", Top)) = Circle(x0 - 2.0, y0, 0.254)
    ref-label()

public defn make-soic127p-landpattern (n:Int) :
  make-soic127p-landpattern(n, 6.0)

;<test>
n: even positive
<test>
public pcb-landpattern soic127p-landpattern (n:Int) :
  make-soic127p-landpattern(n, 6.0)

public pcb-landpattern soic127p-landpattern (n:Int, hs:[Double, Double]) :
  make-soic127p-landpattern(n, 6.0)
  pad p[n + 1] : smd-pad(hs[0], hs[1]) at loc(0.0, 0.0)

; See SOP_JEDEC_MO-153F.pdf for reference
public defn make-sop65-landpattern (n:Int, lead-span:Double) :
  ensure-even-positive!(n, "make-sop65-landpattern")

  inside pcb-landpattern :

    val pin-pitch = 0.65

    val x0 = (- ((lead-span / 2.0) - 0.5))
    val y0 = (to-double((n / 2) - 1) * pin-pitch) / 2.0
    val l0 = loc(x0, y0, -90.0)
    val l1 = loc((- x0), (- y0), 90.0)
    
    val pin-row = to-list(row-locs(W, n / 2, pin-pitch))

    for (i in 1 through (n / 2), l in pin-row) do :
      pad p[i] : smd-pad(0.39, 1.4) at l0 * l
    
    for (i in (n / 2 + 1) through n, l in pin-row) do :
      pad p[i] : smd-pad(0.39, 1.4) at l1 * l
    
    val pkg-height = to-double((n / 2) - 1) * pin-pitch + 0.4
    
    val c-w = lead-span + 0.45
    val c-h = pkg-height
    layer(Courtyard(Top)) = Rectangle(c-w, c-h)

    name = to-string("SOP65 with %_ pins." % [n])
    layer(Silkscreen("pol", Top)) = Circle(x0 - 0.5, y0, 0.2)
    ref-label()

public pcb-landpattern sop65-landpattern (n:Int, lead-span:Double) :
  make-sop65-landpattern(n, lead-span)

;<test>
n: even positive
<test>
public pcb-landpattern sop65-landpattern (n:Int) :
  make-sop65-landpattern(n, 6.4)

public defn make-qfn-landpattern (pin-pitch:Double, lead-span:Double, n-pins:Int, pad-width:Double, pad-length:Double) :
  inside pcb-landpattern :
    var n = -1
    if n-pins % 4 == 0 :
      n = n-pins / 4
    else :
      fatal("make-qfn-landpattern is only for symmetric 4-sided qfns.")

    val x0 = (- (lead-span / 2.0 + 0.3))
    val y0 = (to-double(n - 1) * pin-pitch) / 2.0
    val l0 = loc(x0, y0, -90.0)
    val row-pos = to-list(row-locs(W, n, pin-pitch))

    val pin-pad = smd-pad(S, pad-width, pad-length + 0.3)
    for (i in 0 to n, l in row-pos) do :
      pad p[i + 1] : pin-pad at loc(x0, y0, -90.0) * l

    for (i in n to (n * 2), l in row-pos) do :
      pad p[i + 1] : pin-pad at loc((- y0), x0, 0.0) * l

    for (i in (n * 2) to (n * 3), l in row-pos) do :
      pad p[i + 1] : pin-pad at loc((- x0), (- y0), 90.0) * l

    for (i in (n * 3) to (n * 4), l in row-pos) do :
      pad p[i + 1] : pin-pad at loc((y0), (- x0), 180.0) * l

    val c-w = (lead-span + 0.3 * 2.0)
    layer(Courtyard(Top)) = Rectangle(c-w, c-w)
    layer(Silkscreen("f-silk",Top)) = LineRectangle(c-w, c-w)
    layer(Silkscreen("pol",Top)) = Circle((lead-span / -2.0) - 1.0, y0, 0.254)
    ref-label()

public pcb-landpattern qfn-landpattern (pin-pitch:Double, lead-span:Double, n-pins:Int, pad-width:Double, pad-length:Double) :
  make-qfn-landpattern(pin-pitch, lead-span, n-pins, pad-width, pad-length)

public pcb-landpattern qfn-landpattern (pin-pitch:Double, lead-span:Double, n-pins:Int, pad-width:Double, pad-length:Double, hs:[Double,Double]) :
  make-qfn-landpattern(pin-pitch, lead-span, n-pins, pad-width, pad-length)
  pad p[n-pins + 1] : smd-pad(hs[0],hs[1]) at loc(0.0, 0.0)  


public defn make-dfn-landpattern (
  n-pad:Int
  pad-pitch:Double
  pad-dims:[Double,Double]
  pad-x0:Double
  body-dims:[Double,Double]
) :
  val [pad-w, pad-h] = pad-dims
  val [body-w, body-h] = body-dims

  inside pcb-landpattern :
    val pin-pad = smd-pad(pad-w, pad-h)

    val n-side = n-pad / 2
    val pad-y0 = to-double(n-side - 1) * pad-pitch / 2.0
    val l0 = loc(pad-x0, pad-y0, -90.0)
    val ln2 = loc((- pad-x0), (- pad-y0), 90.0)
    val pin-row = to-list(row-locs(W, n-side, pad-pitch))

    for (i in 0 to n-side, l in pin-row) do :
      pad p[i + 1] : pin-pad at l0 * l

    for (i in n-side to n-pad, l in pin-row) do :
      pad p[i + 1] : pin-pad at ln2 * l

    val pad-x0-abs = abs(pad-x0)
    val pad-x0-dir = pad-x0 / pad-x0-abs
    val pol-x = pad-x0-dir * (pad-x0-abs + (pad-h / 2.0) + 0.5)

    val courtyard-w = max(body-w, 2.0 * pad-x0-abs + pad-h)
    val courtyard-h = max(body-h, 2.0 * abs(pad-y0) + pad-w)

    layer(Courtyard(Top)) = Rectangle(courtyard-w, courtyard-h)
    layer(Silkscreen("f-silk",Top)) = LineRectangle(body-w, body-h)
    layer(Silkscreen("pol",Top)) = Circle(pol-x, pad-y0, 0.254)
    ref-label()

public pcb-landpattern dfn-landpattern ( n-pad:Int, pad-pitch:Double, pad-dims:[Double,Double], pad-x0:Double, body-dims:[Double,Double]) :
  make-dfn-landpattern(n-pad,pad-pitch,pad-dims,pad-x0,body-dims)

public pcb-landpattern dfn-landpattern ( n-pad:Int, pad-pitch:Double, pad-dims:[Double,Double], pad-x0:Double, body-dims:[Double,Double], hs:[Double,Double]) :
  make-dfn-landpattern(n-pad,pad-pitch,pad-dims,pad-x0,body-dims)
  pad p[n-pad + 1] : smd-pad(hs[0],hs[1]) at loc(0.0, 0.0)  


;TODO: Until added to core
; defn name! (r:Ref) :
  ; name(r as VarRef)

public defn red-alph-letter (idx:Int) : ["A" "B" "C" "D" "E" "F" "G" "H" "J" "K" "L" "M" "N" "P" "R" "T" "U" "V" "W" "Y" 
   "AA" "AB" "AC" "AD" "AE" "AF" "AG" "AH" "AJ" "AK" "AL" "AM" "AN" "AP" "AR" "AT" "AU" "AV" "AW" "AY"  
   "BA" "BB" "BC" "BD" "BE" "BF" "BG" "BH" "BJ" "BK" "BL" "BM" "BN" "BP" "BR" "BT" "BU" "BV" "BW" "BY"][idx]

public defn bga-pin-name (r:Int, c:Int) :
     val letter = red-alph-letter(r)
     Ref(string-join([letter, c + 1]))

public defn make-bga-pkg (pitch:Double, pad-diam:Double, n-pads:[Int Int], courtyard:[Double Double], omit-pads:Tuple<Ref>|False) :
  inside pcb-landpattern :
    val pin-pad = bga-pad(pad-diam)
    defn make-pad (r:Int, c:Int) :
      val x = ((to-double(n-pads[0]) - 1.0) / -2.0 + to-double(c)) * pitch
      val y = ((to-double(n-pads[1]) - 1.0) / 2.0 - to-double(r)) * pitch
      val letter = red-alph-letter(r)
      val name = Ref(letter)[c + 1]

      match(omit-pads:Tuple<Ref>):
        if not contains?(omit-pads, name) :
          pad (name) : pin-pad at loc(x,y)
      else :
          pad (name) : pin-pad at loc(x,y)

    for c in 0 to n-pads[0] do :
      for r in 0 to n-pads[1] do :
        make-pad(r,c)

    layer(Courtyard(Top)) = Rectangle(courtyard[0], courtyard[1])
    ; layer(Silkscreen("f-silk", Top)) = LineRectangle(courtyard[0], courtyard[1])
    layer(Silkscreen("pol", Top)) = Circle(-0.3 - courtyard[0] / 2.0, courtyard[1] / 2.0, 0.127)
    ref-label()

public pcb-landpattern bga-pkg (pitch:Double, pad-diam:Double, n-pads:[Int Int], courtyard:[Double Double], omit-pads:Tuple<Ref>|False) :
  make-bga-pkg(pitch, pad-diam, n-pads, courtyard, omit-pads)

public pcb-landpattern bga-pkg (pitch:Double, pad-diam:Double, n-pads:[Int Int], courtyard:[Double Double]) :
  make-bga-pkg(pitch, pad-diam, n-pads, courtyard, false)

; Generic package instantiations
; Passives

public pcb-landpattern INDC1005X55 :
  make-ipc-two-pin-landpattern("0402")
  ref-label()

public pcb-landpattern CAPT1005X55 :
  make-ipc-two-pin-landpattern("0402")
  layer(Silkscreen("pol", Top)) = PlusSymbol(-1.7, 0.0)
  ref-label()

public pcb-landpattern CAPT1608X80 :
  make-ipc-two-pin-landpattern("0603")
  layer(Silkscreen("pol", Top)) = PlusSymbol(-2.2, 0.0)
  ref-label()

public pcb-landpattern CAPT2012X125 :
  make-ipc-two-pin-landpattern("0805")
  layer(Silkscreen("pol", Top)) = PlusSymbol(-2.4, 0.0)
  ref-label()

public pcb-landpattern CAPT3216X160 :
  make-ipc-two-pin-landpattern("1206")
  layer(Silkscreen("pol", Top)) = PlusSymbol(-3.0, 0.0)
  ref-label()

public pcb-landpattern FUSC7330X390 :
  name = "FUSC7330X390"
  make-two-pin-landpattern(7.26, 2.48, 3.0, 7.5, 3.0)

public pcb-landpattern DIOM-4539X220 :
  name = "DIOM-4539X220"
  make-two-pin-landpattern(5.58, 2.15, 2.18, 5.5, 4.0)
  layer(Silkscreen("pol",Top)) = Line(0.25, [Point(3.0, -1.0), Point(3.0, 1.0)])

public pcb-landpattern d-sod-123 :
  pad c : smd-pad(0.9, 1.2) at loc(-1.65, 0.0)
  pad a : smd-pad(0.9, 1.2) at loc(1.65, 0.0)
  layer(Courtyard(Top)) = Rectangle(4.5, 2.0)
  layer(Silkscreen("pol", Top)) = Line(0.12, [Point(1.65, -1.0) Point(-2.4, -1.0)])
  layer(Silkscreen("pol", Top)) = Line(0.12, [Point(-2.4, 1.0) Point(1.65, 1.0) ])
  layer(Silkscreen("pol", Top)) = Line(0.30, [Point(-2.4, -1.0) Point(-2.4, 1.0)])
  ref-label()

; QFNs

public pcb-landpattern QFN50P715X715X80-48 :
  name = "QFN50P715X715X80-48"
  make-qfn-landpattern(0.5, 7.15, 48, 0.3, 0.5)
  pad p[49] : smd-pad(5.1,5.1) at loc(0.0, 0.0)

public pcb-landpattern QFN50P400X400X85-24 :
  name = "QFN50P400X400X85-24"
  make-qfn-landpattern(0.5, 4.0, 24, 0.25, 0.4)
  pad p[25] : smd-pad(2.5,2.5) at loc(0.0, 0.0)  

public pcb-landpattern SOT95P280X100-3N :
  
  val x0 = -0.95
  val y0 = -1.0
  pad p[1] : smd-pad(0.6, 0.7) at loc(x0,y0)
  pad p[2] : smd-pad(0.6, 0.7) at loc((- x0), y0)
  pad p[3] : smd-pad(0.6, 0.7) at loc(0.0, (- y0))

  layer(Courtyard(Top)) = Rectangle(3.3, 2.8)
  layer(Silkscreen("pol", Top)) = Circle(x0, y0 - 1.0, 0.2)
  ref-label()

public pcb-landpattern SC-70-3 :
  
  val x0 = -1.85 / 2.0
  val y0 = -1.3 / 2.0
  pad p[1] : smd-pad(0.6, 0.7) at loc(x0,y0)
  pad p[2] : smd-pad(0.6, 0.7) at loc((- x0), y0)
  pad p[3] : smd-pad(0.6, 0.7) at loc(0.0, (- y0))

  layer(Courtyard(Top)) = Rectangle(2.65, 2.35)
  ref-label()

public defn SOT23 () :
  SOT95P280X100-3N

public pcb-landpattern SOT95P280X145-5N :
  val x0 = -0.95
  val y0 = 2.7 / -2.0
  pad p[1] : smd-pad(0.6, 1.05) at loc(x0,y0)
  pad p[2] : smd-pad(0.6, 1.05) at loc(0.0, y0)
  pad p[3] : smd-pad(0.6, 1.05) at loc((- x0), y0)
  pad p[4] : smd-pad(0.6, 1.05) at loc((- x0), (- y0))
  pad p[5] : smd-pad(0.6, 1.05) at loc(x0, (- y0))

  layer(Courtyard(Top)) = Rectangle(2.7, 3.95)  
  layer(Silkscreen("pol", Top)) = Circle(x0, y0 - 1.0, 0.2)
  
  ref-label()

public pcb-landpattern SOT95P280X145-6N :
  val x0 = -0.95
  val y0 = 2.7 / -2.0
  pad p[1] : smd-pad(0.6, 1.05) at loc(x0,y0)
  pad p[2] : smd-pad(0.6, 1.05) at loc(0.0, y0)
  pad p[3] : smd-pad(0.6, 1.05) at loc((- x0), y0)
  pad p[4] : smd-pad(0.6, 1.05) at loc((- x0), (- y0))
  pad p[5] : smd-pad(0.6, 1.05) at loc(0.0, (- y0))
  pad p[6] : smd-pad(0.6, 1.05) at loc(x0, (- y0))

  layer(Silkscreen("pol", Top)) = Circle(x0, y0 - 1.0, 0.2)
  layer(Courtyard(Top)) = Rectangle(2.7, 3.95)  
  
  ref-label()

public pcb-landpattern pin-header-pkg (n-pin:Int, n-row:Int, pin-pitch:Double, row-pitch:Double) :
  make-pin-grid(n-pin, n-row, pin-pitch, row-pitch)

  val n-col = to-int(ceil(to-double(n-pin) / to-double(n-row)))

  val c-w = to-double(n-row) * row-pitch
  val c-h = to-double(n-col) * pin-pitch

  layer(Courtyard(Top)) = Rectangle(c-w, c-h)
  layer(Courtyard(Bottom)) = Rectangle(c-w, c-h)
  layer(Silkscreen("f-silk", Top)) = LineRectangle(c-w, c-h)
  
  ref-label()

public pcb-landpattern top-smd-testpoint-pkg (d:Double) :
  pad p : top-smd-testpoint-pad(d) at loc(0.0, 0.0)
  layer(Courtyard(Top)) = Circle(d / 2.0)
  layer(Silkscreen("f-silk", Top)) = Circle(d / 2.0)
  ref-label()

public pcb-landpattern btm-smd-testpoint-pkg (d:Double) :
  pad p : btm-smd-testpoint-pad(d) at loc(0.0, 0.0)
  layer(Courtyard(Bottom)) = Circle(d / 2.0)
  layer(Silkscreen("f-silk", Bottom)) = Circle(d / 2.0)
  ref-label()

public pcb-pad generic-smd-pad (
  shape:Shape, 
  solder-mask-defined?:True|False,
  solder-mask-registration:Double
):
  val bigger-shape = offset(shape, solder-mask-registration)
  val [pad-shape, mask-shape] = 
    if solder-mask-defined?:
      [bigger-shape, shape]
    else:
      [shape, bigger-shape]
    
  shape = pad-shape
  type = SMD
  layer(SolderMask(Top)) = mask-shape

public defn make-ipc-compliant-two-pin-landpattern (length:Toleranced,      ; L
                                                    width:Toleranced,       ; W
                                                    lead-length:Toleranced, ; T
                                                    lead-width?:False|Toleranced,  ; ...
                                                    fabrication-tolerance:Double,
                                                    placement-tolerance:Double
                                                    density-level:DensityLevel,
                                                    polarized?:True|False,
                                                    solder-mask-defined?:True|False):
  inside pcb-landpattern:
    ; helper to compute the excess required by density level and tolerances
    defn wiggle-room (C:Double):
      val F = fabrication-tolerance
      val P = placement-tolerance
      sqrt(C * C + F * F + P * P)

    ; compute the solder fillets based on the protrusion type
    val land-protrusion-type = BigRectangularLeads when nominal(length) > 0.6 else SmallRectangularLeads
    val fillets = lead-fillets(land-protrusion-type, density-level)

    val Cw = max(plus(width), minus(length))
    val Cl = max(plus(length), minus(length))
    val Cs = 
      let:
        val a = max(plus(lead-length), minus(lead-length))
        val b = max(plus(length), minus(length))
        sqrt(a * a + b * b)
    
    ; compute the base dimensions of the lands
    val Lmax = max(length)
    val Lmin = min(length)
    val Tmin = min(lead-length)
    val Wmin = match(lead-width?):
      (lead-width:Toleranced): 
        min(lead-width)
      (_:False):
        min(width)
    
    val Smax = Lmax - 2.0 * Tmin
    val [Jt, Jh, Js] = [toe(fillets), heel(fillets), side(fillets)]
    val Zmax = Lmin + 2.0 * Jt + wiggle-room(Cl)
    val Gmin = Smax - 2.0 * Jh - wiggle-room(Cs)
    val Xmin = Wmin + 2.0 * Js + wiggle-room(Cw)

    ; finalize the geometry
    val land-length = 0.5 * (Zmax - Gmin)
    val land-width  = Xmin

    val x-max = 0.5 * Gmin + 0.5 * land-length
    val x-min = -1.0 * x-max
    ; println("land-length:%_, land-width:%_, x-min:%_, x-max:%_" % [land-length, land-width, x-min, x-max])

    val refs: Tuple<Ref> = 
      [Ref("a"), Ref("c")] when polarized? else 
      [IndexRef(Ref("p"), 1), IndexRef(Ref("p"), 2)]

    ; generate the landpattern
    val pad_ = generic-smd-pad(Rectangle(land-length, land-width), solder-mask-defined?, SOLDER-MASK-REGISTRATION)
    pad (refs[0]): pad_ at loc(x-min, 0.0)
    pad (refs[1]): pad_ at loc(x-max, 0.0)

    val dims = extant-dims()
    layer(Courtyard(Top)) = offset(Rectangle(x(dims), y(dims)), courtyard-excess(fillets))

    if polarized?:
      draw-polarity-marker(Ref("a"))
    ref-label()

public defn make-ipc-compliant-two-pin-landpattern (length:Toleranced,      ; L
                                                    width:Toleranced,       ; W
                                                    lead-length:Toleranced, ; T
                                                    lead-width?:False|Toleranced,  ; ...
                                                    density-level:DensityLevel,
                                                    polarized?:True|False):
  make-ipc-compliant-two-pin-landpattern(
    length, width, lead-length, lead-width?, 
    FABRICATION-TOLERANCE, PLACEMENT-TOLERANCE, 
    density-level, polarized?,
    false
  )

public defn make-ipc-compliant-two-pin-landpattern (length:Toleranced,      ; L
                                                    width:Toleranced,       ; W
                                                    lead-length:Toleranced, ; T
                                                    density-level:DensityLevel,
                                                    polarized?:True|False):
  make-ipc-compliant-two-pin-landpattern(
    length, width, lead-length, false, 
    density-level, polarized?
  )

public pcb-landpattern ipc-compliant-two-pin-landpattern (length:Toleranced,
                                                          width:Toleranced,
                                                          lead-length:Toleranced,
                                                          lead-width?:False|Toleranced,
                                                          fabrication-tolerance:Double,
                                                          placement-tolerance:Double
                                                          density-level:DensityLevel,
                                                          polarized?:True|False,
                                                          solder-mask-defined?:True|False):
  make-ipc-compliant-two-pin-landpattern(
    length, width, lead-length, lead-width?,
    fabrication-tolerance, placement-tolerance, 
    density-level, polarized?
    solder-mask-defined?
  )

public defn ipc-compliant-two-pin-landpattern (length:Toleranced,
                                               width:Toleranced,
                                               lead-length:Toleranced,
                                               lead-width?:False|Toleranced,
                                               density-level:DensityLevel,
                                               polarized?:True|False):
  ipc-compliant-two-pin-landpattern(
    length, width, lead-length, lead-width?, 
    FABRICATION-TOLERANCE, PLACEMENT-TOLERANCE, 
    density-level, polarized?,
    false
  )

public defn ipc-compliant-two-pin-landpattern (length:Toleranced,       ; L
                                                width:Toleranced,       ; W
                                                lead-length:Toleranced, ; T
                                                density-level:DensityLevel,
                                                polarized?:True|False):
  ipc-compliant-two-pin-landpattern(
    length, width, lead-length, false, 
    density-level, polarized?
  )

public defn chip-resistor-landpattern (part-name:String, imperial?:True|False, density-level:DensityLevel):
  val dimensions = resistor-dimensions(part-name, imperial?)
  ipc-compliant-two-pin-landpattern(length(dimensions)
                                    width(dimensions)
                                    lead-length(dimensions)
                                    density-level
                                    false)

public defn chip-resistor-landpattern (part-name:String, density-level:DensityLeve):
  if suffix?(part-name, "i"):
    chip-resistor-landpattern(part-name[0 to length(part-name) - 1], true, density-level:DensityLeve)
  else:
    chip-resistor-landpattern(part-name, false, density-level:DensityLeve)

public defn chip-resistor-landpattern (part-name:String, imperial?:True|False):
  chip-resistor-landpattern(part-name, imperial?, DensityLevelC)

public defn chip-resistor-landpattern (part-name:String):
  chip-resistor-landpattern(part-name, DensityLevelC)
