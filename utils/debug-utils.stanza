#use-added-syntax(jitx)
defpackage ocdb/utils/debug-utils :
  import core
  import collections
  import math
  import jitx
  import ocdb/utils/fonts
  import jitx/commands
  import ocdb/utils/defaults

  import ocdb/utils/checks
  import ocdb/utils/bundles
  import ocdb/utils/landpatterns
  import ocdb/utils/generic-components
  ; import ocdb/calculate-connected

  import jitx/powergen/api
  import jitx/powergen/gen

  import ocdb/utils/design-vars

  import ocdb/manufacturers/rules
  import ocdb/manufacturers/stackups
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol

; =============
; USAGE
; =============

; The debug utility provides the ability to generate a host of standard 
; components in a design. The components are enabled by assigning a debug
; property to the module.
;
; properties(my-module) :
;   debug => true
; 
; This also enables simultaneous debug and production designs to appear on
; the same board.

; =============
; TESTPOINTS
; =============

; Adds a debug testpoint to a pin or net.
; Parameters
; ------------
; ref: reference to pin or net
; cmp: reference to pcb-component for testpoint
public defn db-testpoint (ref:JITXObject, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      add-testpoint(ref, cmp, false, Top)

; Adds a debug testpoint to a pin or net that persists as smd testpad 
; to production on top layer.
; Parameters
; ------------
; ref: reference to pin or net
; cmp: reference to pcb-component for testpoint
public defn db-testpoint-persist (ref:JITXObject, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      add-testpoint(ref, cmp, true, Top)

; Adds a debug testpoint to a pin or net that persists as smd testpad
; to production on bottom layer.
; Parameters
; ------------
; ref: reference to pin or net
; cmp: reference to pcb-component for testpoint
public defn db-testpoint-persist-btm (ref:JITXObject, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      add-testpoint(ref, cmp, true, Bottom)

; Adds debug testpoints to a tuple of pins or nets 
; Parameters
; ------------
; refs: Tuple of references to pins or nets
; cmp: reference to pcb-component for testpoint
public defn db-testpoint (refs:Tuple<JITXObject>, cmp:Instantiable) : 
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        add-testpoint(ref, cmp, false, Top)
   
; Adds debug testpoints to a tuple of pins or nets that persists as 
; smd testpads to production on top layer.
; Parameters
; ------------
; refs: Tuple of references to pins or nets
; cmp: reference to pcb-component for testpoint
public defn db-testpoint-persist (refs:Tuple<JITXObject>, cmp:Instantiable) : 
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        add-testpoint(ref, cmp, true, Top)
    
; Adds debug testpoints to a tuple of pins or nets that persists as 
; smd testpads to production on bottom layer.
; Parameters
; ------------
; refs: Tuple of references to pins or nets
; cmp: reference to pcb-component for testpoint
public defn db-testpoint-persist-btm (refs:Tuple<JITXObject>, cmp:Instantiable) : 
  ;FIXME place component on bottom 
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        add-testpoint(ref, cmp, true, Bottom)
    
; Adds a debug smd testpad to a pin or net.
; Parameters
; ------------
; ref: reference to pin or net
public defn db-testpad (ref:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = smd-testpoint-cmp()
      add-testpoint(ref, cmp, false, Top)

; Adds a debug smd testpad to a pin or net that persists as smd testpad
; to production on top layer.
; Parameters
; ------------
; ref: reference to pin or net
public defn db-testpad-persist (ref:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = smd-testpoint-cmp()
      add-testpoint(ref, cmp, true, Top)
  
; Adds a debug smd testpad to a pin or net that persists as smd testpad
; to production on bottom layer.
; Parameters
; ------------
; ref: reference to pin or net
public defn db-testpad-persist-btm (ref:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = smd-testpoint-cmp()
      add-testpoint(ref, cmp, true, Top)
  
; Adds debug smd testpads to a tuple of pins or nets.
; Parameters
; ------------
; refs: reference to a tuple of pins or nets
public defn db-testpad (refs:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        val cmp = smd-testpoint-cmp()
        add-testpoint(ref, cmp, false, Top)

; Adds debug smd testpads to a tuple of pins or nets that persist to 
; production on top layer.
; Parameters
; ------------
; refs: reference to a tuple of pins or nets
public defn db-testpad-persist (refs:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        val cmp = smd-testpoint-cmp()
        add-testpoint(ref, cmp, true, Top)

; Adds debug smd testpads to a tuple of pins or nets that persist to 
; production on bottom layer.
; Parameters
; ------------
; refs: reference to a tuple of pins or nets
public defn db-testpad-persist-btm (refs:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        val cmp = smd-testpoint-cmp()
        add-testpoint(ref, cmp, true, Bottom)

; Adds a debug test header to a pin or net.
; Parameters
; ------------
; ref: reference to a pin or net
public defn db-testheader (ref:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(1)
      add-testpoint(ref, cmp, false, Top)

; Adds a debug test header to a pin or net that persists as smd testpad
; to production on top layer.
; Parameters
; ------------
; ref: reference to a pin or net
public defn db-testheader-persist (ref:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(1)
      add-testpoint(ref, cmp, true, Top)

; Adds a debug test header to a pin or net that persists as smd testpad
; to production on bottom layer.
; Parameters
; ------------
; ref: reference to a pin or net
public defn db-testheader-persist-btm (ref:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(1)
      add-testpoint(ref, cmp, true, Bottom)

; Adds debug test headers to a tuple of pins or nets.
; Parameters
; ------------
; refs: reference to a tuple of pins or nets
public defn db-testheader (refs:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        val cmp = pin-header(1)
        add-testpoint(ref, cmp, false, Top)

; Adds debug test headers to a tuple of pins or nets that persist as 
; smd testpads to production on top layer.
; Parameters
; ------------
; refs: reference to a tuple of pins or nets
public defn db-testheader-persist (refs:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        val cmp = pin-header(1)
        add-testpoint(ref, cmp, true, Top)

; Adds debug test headers to a tuple of pins or nets that persist as 
; smd testpads to production on bottom layer.
; Parameters
; ------------
; refs: reference to a tuple of pins or nets
public defn db-testheader-persist-btm (refs:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      for ref in refs do :
        val cmp = pin-header(1)
        add-testpoint(ref, cmp, true, Bottom)

; ============
; JUMPERS
; ============

; Adds a user specified jumper component with a connection to 
; input-node and to each node in nodes. Connects input node and default
; directly for production. 
; Useful for switching between power supplies.
; Parameters
; ------------
; input-node: reference to input pin or net
; nodes: reference to tuple of pins or nets
; default: node that will be connected to input-node for production
; cmp: reference to jumper component
public defn db-jumper-mux (input-node:JITXObject, nodes:Tuple<JITXObject>,
                        default:JITXObject, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      net-inline-jumper(input-node, nodes, default, cmp)

; Adds a jumper with a connection to input-node and to each node in 
; nodes. Connects input node and default directly for production. 
; Useful for switching between power supplies.
; Parameters
; ------------
; input-node: reference to input pin or net
; nodes: reference to tuple of pins or nets
; default: node that will be connected to input-node for production
public defn db-jumper-mux (input-node:JITXObject, nodes:Tuple<JITXObject>, 
                        default:JITXObject) :
  inside pcb-module :
    eval-when true :
      val n = length(nodes)
      val cmp = pin-header(n + 1)
      net-inline-jumper(input-node, nodes, default, cmp)

; Adds 2 pin user specified jumper components between one node and 
; a list of other nodes.
; Nets each of these connections directly for production.
; Parameters
; ------------
; node1: reference to pin or net
; nodes: reference to tuple of pins or nets
; cmp: reference to jumper component
public defn db-jumper (node1:JITXObject, nodes:Tuple<JITXObject>, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      for ref in nodes do :
        net-inline-jumper(node1, [ref], ref, cmp)

; Adds 2 pin jumpers between node1 and each node in nodes.
; Nets each of these connections directly for production.
; Parameters
; ------------
; node1: reference to pin or net
; nodes: reference to tuple of pins or nets
public defn db-jumper (node1:JITXObject, nodes:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(2)
      for ref in nodes do :
        net-inline-jumper(node1, [ref], ref, cmp)

; Adds user selected jumper components between pairs of pins or nets.
; Nets each of these connections directly for production.
; Parameters
; ------------
; nodes: reference to a tuple of pin or net pairs.
public defn db-jumper (nodes:Tuple<Tuple<JITXObject>>, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      for pair in nodes do :
        net-inline-jumper(pair[0], [pair[1]], pair[0], cmp)

; Adds 2 pin jumpers between pairs of pins or nets.
; Nets each of these connections directly for production.
; Parameters
; ------------
; nodes: reference to a tuple of pin or net pairs.
public defn db-jumper (nodes:Tuple<Tuple<JITXObject>>) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(2)
      for pair in nodes do :
        net-inline-jumper(pair[0], [pair[1]], pair[0], cmp)

; Add a 2 pin jumpers between node1 and node2.
; Nets this connection directly for production.
; Parameters
; ------------
; node1: reference to pin or net
; node2: reference to pin or net
public defn db-jumper (node1:JITXObject, node2:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(2)
      net-inline-jumper(node1, [node2], node2, cmp) 

; Add a 0 ohm resistor between node1 and node2.
; Nets this connection directly for production.
; Parameters
; ------------
; node1: reference to pin or net
; node2: reference to pin or net
public defn db-zero-res (node1:JITXObject, node2:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = chip-resistor(0.0)
      net-inline-jumper(node1, [node2], node2, cmp)

; Add a user specified jumper between node1 and node2. Persists as 
; 0 ohm resistor on the top layer for production.
; Parameters
; ------------
; node1: reference to pin or net
; node2: reference to pin or net
; cmp: reference to component for jumper
public defn db-jumper-persist-zero-res (node1:JITXObject, node2:JITXObject, 
                                         cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      val p-cmp = chip-resistor(0.0)
      net-inline-jumper-persist-cmp(node1, [node2], cmp, p-cmp) 

; Add a 2 pin jumper between node1 and node2. Persists as 0 ohm
; resistor on the top layer for production.
; Parameters
; ------------
; node1: reference to pin or net
; node2: reference to pin or net
public defn db-jumper-persist-zero-res (node1:JITXObject, node2:JITXObject) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(2) 
      val p-cmp = chip-resistor(0.0)
      net-inline-jumper-persist-cmp(node1, [node2], cmp, p-cmp)

; Add 2 pin jumpers between one node and a list of other nodes. 
; Persists as 0 ohm resistors on the top layer for production.
; Parameters
; ------------
; node1: reference to pin or net
; nodes: reference to a tuple of pins or nets
public defn db-jumper-persist-zero-res (node1:JITXObject, 
                                            nodes:Tuple<JITXObject>) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(2)
      val p-cmp = chip-resistor(0.0)
      net-inline-jumper-persist-cmp(node1, nodes, cmp, p-cmp)

; Add user specified jumper components between pairs of nodes.
; Persists as 0 ohm resistors on the top layer for production.
; Parameters
; ------------
; nodes -- reference to tuple of pairs of pins or nets
; cmp -- reference to jumper component
public defn db-jumper-persist-zero-res (nodes:Tuple<Tuple<JITXObject>>, 
                                         cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      val p-cmp = chip-resistor(0.0)
      for pair in nodes do :
        net-inline-jumper-persist-cmp(pair[0], [pair[1]], cmp, p-cmp)

; Add 2 pin jumpers between pairs of nodes.
; Persists as 0 ohm resistors on the top layer for production.
; Parameters
; ------------
; nodes -- reference to tuple of pairs of pins or nets
public defn db-jumper-persist-zero-res (nodes:Tuple<Tuple<JITXObject>>) :
  inside pcb-module :
    eval-when true :
      val cmp = pin-header(2)
      val p-cmp = chip-resistor(0.0)
      for pair in nodes do :
        net-inline-jumper-persist-cmp(pair[0], [pair[1]], cmp, p-cmp)

; ======================
; MISC. DEBUG COMPONENTS
; ======================

; Adds a 10 pin Arm JTAG connector to a component
; For debug, the connector is a 10 pin header with additional testheaders
; on all the signals.
; For production, the connector is a 10 pin tag connect connector.
; Component must support jtag
; Parameters
; ------------
; pwr : Reference to power port JTAG will be connected to
; cmp : Component that JTAG will be connected to
public defn db-jtag-to-cmp (pwr:JITXObject, cmp:JITXObject) :
  inside pcb-module :
    eval-when true :
      require jtag: jtag() from cmp
      db-jtag(pwr, jtag)

; Adds a FTDI connector to a component
; Component must support uart 
; Returns a tuple with [ftdi-vdd, ftdi-gnd]
; Parameters
; ------------
; pwr : Reference to power port that ftdi connector will be connected to
; cmp : Component that ftdi connector will be connected to
public defn db-ftdi-two-comms (pwr:JITXObject, cmp:JITXObject) :
  inside pcb-module :
    eval-when true :
      if property(self.debug) :
        require uart: uart() from cmp
        db-ftdi(pwr, uart)

; Adds a FTDI connector with RTS and CTS to a component
; Component must support uart4 
; Returns a tuple with [ftdi-vdd, ftdi-gnd]
; Parameters
; ------------
; pwr : Reference to power port that ftdi connector will be connected to
; cmp : Component that ftdi connector will be connected to
public defn db-ftdi-four-comms (pwr:JITXObject, cmp:JITXObject) :
  inside pcb-module :
    eval-when true :
      if property(self.debug) :
        require ftdi: uart([UART-RTS, UART-CTS, UART-RX, UART-TX]) from cmp
        db-ftdi(pwr, ftdi)

; ====================
; BASE FUNCTIONS
; ====================

; Generator function to add a test point to a pin or net
; Parameters
; ------------
; ref : reference to pin or net that test point is attached to
; cmp : pcb-component for test point
; persist? : test points migrate to bottom layer for production
public defn add-testpoint (ref:JITXObject, cmp:Instantiable, persist?:True|False, side:Side):
  ; FIXME: return the instance if created
  inside pcb-module  :
    eval-when true :
      if property(self.debug) or persist?:
        inst tp: cmp
        place(tp) on side
        if property(self.debug):
          schematic-group(tp) = debug-temp-sch
          layout-group(tp)    = debug-temp-layout
          val pins = ports(tp)
          if not empty?(pins) :
            net (ref, pins[0])
        else:
          schematic-group(tp) = debug-persist-sch
          layout-group(tp) = debug-persist-layout
          net (ref, tp.p)

; Adds a n-way jumper from node1 to nodes
; For production board, nets node1 to default
; Parameters
; ------------
; node1 : pin or net to connect to first pin of jumper
; nodes : tuple of pins or nets to connect to remaining pins of jumper
; default : Connected to node1 directly when dev? is False
; n : number of nodes to mux node1 with
; cmp : component of jumper
public defn net-inline-jumper (node1:JITXObject, nodes:Tuple<JITXObject>, 
                               default:JITXObject, cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      val n = length(nodes)
      if property(self.debug) :
        inst j : cmp
        schematic-group(j) = debug-temp-sch
        layout-group(j) = debug-temp-layout
        val pins = pins(j)
        if not empty?(pins) :
          net (node1, pins[0])
          for i in 0 to n do :
            net (nodes[i], pins[i + 1])
      else :
        net (node1, default)

; Adds user defined jumper components between node1 and each node in
; nodes.
; Parameters
; ------------
; node1 : pin or net to connect each jumper to
; nodes : tuple of pins or nets to connect each jumper to
; cmp : component of jumper
; persist-cmp : component that jumper persists to in production 
public defn net-inline-jumper-persist-cmp (node1:JITXObject, nodes:Tuple<JITXObject>,
                                           cmp:Instantiable, persist-cmp:Instantiable) :
  inside pcb-module :
    eval-when true :
      val n = length(nodes)
      for i in 0 to n do :
        if property(self.debug) :
          inst j : cmp
          schematic-group(j) = debug-temp-sch
          layout-group(j) = debug-temp-layout
          val pins = pins(j)
          if not empty?(pins) :
            net (node1, pins[0])
            net (nodes[i], pins[1])
        else :
          inst zero : persist-cmp 
          schematic-group(zero) = debug-persist-sch
          layout-group(zero) = debug-persist-layout
          val pins = pins(zero)
          if not empty?(pins) :
            net (node1, pins[0])
            net (nodes[i], pins[1])

; Adds a 10 pin Arm JTAG connector to a component
; For debug, the connector is a 10 pin header with additional testheaders
; on all the signals.
; For production, the connector is a 10 pin tag connect connector.
; Parameters
; ------------
; jtag-pwr : Reference to power port
; jtag-comms : Reference to jtag port
public defn db-jtag (jtag-pwr:JITXObject, jtag-comms:JITXObject) :
  inside pcb-module :
    eval-when true :
      if property(self.debug) :
        inst jtag-conn : pin-header(10, 2)
        inst r-pu1 : chip-resistor(10.0e3)[3]
        inst r-pu2 : chip-resistor(4.7e3)
        inst r-pd : chip-resistor(10.0e3)
        schematic-group(jtag-conn) = debug-temp-sch
        layout-group(jtag-conn) = debug-temp-layout
        schematic-group(r-pu1) = debug-temp-sch
        layout-group(r-pu1) = debug-temp-layout
        schematic-group(r-pu2) = debug-temp-sch
        layout-group(r-pu2) = debug-temp-layout
        schematic-group(r-pd) = debug-temp-sch
        layout-group(r-pd) = debug-temp-layout
        net (jtag-pwr.vdd, jtag-conn.p[1], r-pu1[0].p[1], 
             r-pu1[1].p[1], r-pu2.p[1], r-pu1[2].p[1])
        net (jtag-pwr.gnd, jtag-conn.p[3], jtag-conn.p[5], 
             jtag-conn.p[9], r-pd.p[1])
        net tms (jtag-comms.tms, jtag-conn.p[2], r-pu1[0].p[2])
        net tck (jtag-comms.tck, jtag-conn.p[4], r-pd.p[2])
        net tdo (jtag-comms.tdo, jtag-conn.p[6], r-pu1[2].p[2])
        net tdi (jtag-comms.tdi, jtag-conn.p[8], r-pu1[1].p[2])
        net trstn (jtag-comms.trstn, jtag-conn.p[10], r-pu2.p[2])
        db-testheader-persist([tms, tck, tdo, tdi, trstn])
      else :
        inst jtag-conn : ocdb/components/tag-connect/TC2050-IDC-NL/module
        schematic-group(jtag-conn) = debug-persist-sch 
        layout-group(jtag-conn) = debug-persist-layout
        net (jtag-comms, jtag-conn.j)
        net (jtag-conn.pwr, jtag-pwr)

; Adds a FTDI connector to a component 
; Returns a tuple with [ftdi-vdd, ftdi-gnd]
; Parameters
; ------------
; pwr : power port that ftdi is connected to
; uart : uart port that ftdi is connected to 
public defn db-ftdi (pwr:JITXObject, uart:JITXObject) :
  inside pcb-module :
    eval-when true :
      if property(self.debug) :
        inst ftdi-conn : pin-header(6, 1)
        schematic-group(ftdi-conn) = debug-temp-sch
        layout-group(ftdi-conn) = debug-temp-layout
        net (pwr.gnd, ftdi-conn.p[1])
        net (pwr.vdd, ftdi-conn.p[3])
        match(port-type(uart)) :
          (pa:Bundle) :
            if pa == /uart() :
              net (uart.rx, ftdi-conn.p[4]) 
              net (uart.tx, ftdi-conn.p[5])
            else if pa == /uart([UART-RTS, UART-CTS, UART-RX, UART-TX]) :
              net (uart.cts, ftdi-conn.p[2])
              net (uart.txd, ftdi-conn.p[4])
              net (uart.rxd, ftdi-conn.p[5])
              net (uart.rts, ftdi-conn.p[6])

; Adds an indicator LED to a pin or net.
; Parameters
; ------------
; node : reference to pin or net LED is connected to
; led-cmp : reference to LED component
; res : value of resistor in series with LED
; buffer? : true if buffer required
; buf-dmp : reference to buffer component
; pwr : reference to power port 

; Adds an indicator LED to a pin or net.
; Parameters
; ------------
; node : pin or net to connect LED to
; led-cmp : LED component
; res : value of resistor in series with LED
; max-v : max voltage on pin or net
; min-v : min voltage on pin or net
; buffer? : true if buffer required
; buf-dmp : reference to buffer component
