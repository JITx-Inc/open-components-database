#use-added-syntax(jitx)
defpackage ocdb/utils/checks :
  import core
  import collections
  import math
  import lang-utils
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/space-derating
  import ocdb/utils/generator-utils
  import ocdb/utils/property-structs
  import ocdb/utils/design-vars
  import ocdb/utils/passive-checks/capacitor-checks
  import ocdb/utils/passive-checks/resistor-checks
  import ocdb/utils/passive-checks/inductor-checks
  import ocdb/utils/pin-checks/all
  import ocdb/utils/netlist-checks/all
  import ocdb/utils/netlist-checks/utils
  import ocdb/utils/propagation

;<>
#CHECK(
  condition = p-props is GenericPin,                    ; A boolean check                     (True|False)
  name = "Generic Pin",                                 ; short name for the check category   (Printable)
  description = "Checks the voltage applied to pins",   ; The description of the pcb check    (Printable)
  category = "Pin Checks",                               ; Category for the check              (Printable)
  subcheck-description = "sub-check detail description",; The description of the sub check    (Printable)
  pass-message = "pass printable %_" % [ref(p)],        ; What is printed if the check passes (Printable)
  info-message = "info printable %_ " % [ref(p)],       ; What is printed if the check needs more info  (Printable)
  fail-message = "fail printable %_ " % [ref(p)],       ; What is printed if the check fails  (Printable)
  locators = [p]                                        ; Locators                            (Tuple<JITXObject|JITXDef>)
)
<>

; ====================================
; ==== Check convenience functions ===
; ====================================

doc: \<S>
Set of standard checks to run on a top-level-module.
 - Component instances marked DNP are skipped
 - Resistors, Capacitors are checked
 - Components with temperature rating are checked
   against design variables, see ocdb/utils/design-vars
 - Pins are checked
   - GenericPin properties are checked
   - PowerPin properties are checked
   - ResetPin properties are checked
 - Landpattern checks are run, see check-landpattern
 - Digital I/O pin checks are run, see check-io
<S>
public var check-flag : True|False
check-flag = false


public defn check-design (module:JITXObject):
  erc-check-design(module)
  ; drc-check-design(module)

public defn erc-check-design (module:JITXObject):
  inside pcb-module:
    for i in populated-components(module) do :
      check rated-temperature(i)
      
      check-capacitor(i) when has-property?(i.capacitor)
      check-resistor(i)  when has-property?(i.resistor)
      check-inductor(i)  when has-property?(i.inductor)    
      check-pins(i)

    eval-when PROPAGATION-FINISHED :
      check-netlist(module)

public defn drc-check-design (module:JITXObject):
  inside pcb-module:
    check-all-landpatterns(module)
    ; This needs to be added back when we are able to detect whether a board has been set
    ; if exists?(board) :
    ;   run-design-verification()


    ; if board(design) is False :
    ;   issue-error(CannotPlaceWithoutBoard(path(design)))
    ; if rules(design) is False :
    ;   issue-error(CannotPlaceWithoutRules(path(design)))

defn get-other-pin (comp:JITXObject,  p:JITXObject) :
  for ps in pins(comp) find! :
    ps != p

pcb-check rated-temperature (component:JITXObject):
  val name = "Rated temperature check"
  val description = "Check rated temperature property for components versus design constraints"
  val category = "Component Checks"
  #CHECK(
    condition =            has-property?(component.rated-temperature),
    name =                 "Rated temperature check"
    description =          "Check rated temperatures for components versus design constraints"
    category =             "Component Checks (Data)"
    subcheck-description = "Check the rated-temperature of component versus the design constraints",
    pass-message =         "%_ has a property for rated-temperature of %_C" % [ref(component) property(component.rated-temperature)],
    info-message =         "%_ does not have the rated-temperature property attached" % [ref(component)],
    locators =             [instance-definition(component)]
  )

  val temp = property(component.rated-temperature)
  if temp is Toleranced:
    #CHECK(
      condition =            in-range?(temp, OPERATING-TEMPERATURE),
      name =                 "Rated temperature check"
      description =          "Check rated temperatures for components versus design constraints"
      category =             "Component Checks"
      subcheck-description = "Check the rated-temperature of a component against the operating temperature of the design.",
      pass-message =         "%_ has a rated temperature %_ containing the operating temperature %_" % [ref(component), temp, OPERATING-TEMPERATURE],
      fail-message =         "%_ does not have a rated temperature %_ containing the operating temperature %_" % [ref(component), temp, OPERATING-TEMPERATURE],
      locators =             [component]
    )

; Returns if a pin is a digital-output pin or capable of being one
defn is-digital-output? (p:JITXObject) -> True|False : 
  has-property?(p.digital-io) or 
  has-property?(p.digital-output)

; Returns if a pin is a digital-input pin or capable of being one
defn is-digital-input? (p:JITXObject) -> True|False : 
  has-property?(p.digital-io) or 
  has-property?(p.digital-input)

; Returns if a pin is a digital input or output pin
defn is-digital-pin? (p:JITXObject) -> True|False :
  has-property?(p.digital-io) or
  has-property?(p.digital-input) or
  has-property?(p.digital-output)

public pcb-check within? (t:Toleranced, value:Toleranced) :
  val name = "Within Check"
  val description = "Check that a value is within a given range"
  val category = "value-check"
  #CHECK(
    condition =            in-range?(t, value),
    name =                 "Within Check",
    description =          "Check that a value is within a given range",
    category =             "Value checks"
    subcheck-description = "Check that a value is within a given range"
    pass-message =         "Range %_ is correctly within %_" % [value t]
    fail-message =         "Value %_ to %_ is not within the range of %_ to %_" % [min-value(value) max-value(value) min-value(t) max-value(t)]
    locators =             []
    )

public pcb-check connected (p:JITXObject|Tuple<JITXObject>) :
  val name = "Connected pin checks"
  val description = "Check that the object(s) are connected"
  val category = "Connected Checks"

  ;Helper function used by object-connected-message and objects-connected-message
  defn connected-str (connected?:True|False) -> String :
    "connected" when connected? else "not connected"

  ;Prepare the appropriate message for checking if a single object is connected to the design.
  defn object-connected-message (obj:JITXObject, connected?:True|False) -> Printable :
    "Object %_ is %_" % [ref(obj), connected-str(connected?)]
  
  ;Prepare the appropriate message for checking if a Tuple of objects are connected to each other.
  defn objects-connected-message (objs:Tuple<JITXObject>, connected?:True|False) -> Printable :
    "Objects %, are %_" % [map(ref, objs), connected-str(connected?)]

  val [pass-message, fail-message, locators] =
    match(p) :
      (p:JITXObject) :
        [object-connected-message(p, true),
         object-connected-message(p, false),
         [p]]
      (p:Tuple<JITXObject>) :
        [objects-connected-message(p, true),
         objects-connected-message(p, false),
         p]

  #CHECK(
    condition =            connected?(p),
    name =                 name
    description =          "Check that the object(s) are connected"
    category =             category
    subcheck-description = "Verify the design object is connected",
    pass-message =         pass-message,
    fail-message =         fail-message,
    locators =             locators
  )

; ====== Component-level checks ======
; ====================================
; public pcb-check pull-up-check (p:JITXObject) :

; Extract the copper layer on a given side of a landpattern
; - note: geoms unsupported
defn copper (lp:LandPattern, side:Side) -> Seqable<Shape> :
  for pad in pads(lp) seq?: 
    if /side(pad) == side or pad-type(/pad(pad)) == TH:
      One(pose(pad) * pad-shape(/pad(pad)))
    else:
      None()

; Get the locations of all the pads in a land pattern
defn pad-locs (lp:LandPattern) -> Seqable<Pose> :
  seq(pose, pads(lp))

; Get the minimum pitch of all the pads in a land pattern
defn min-pitch (lp:LandPattern) -> Double :
  min-space(seq(center, pad-locs(lp)))

; Checks that the copper layers on both sides of a landpattern are within the 
; min-copper-copper-space rule.
public pcb-check check-min-copper-copper-space (lp:LandPattern, side:Side) :
  val name = "Layout checks"
  val description = "Check min copper spacing"
  val category = "Manufacturing Checks"

  val copper = to-tuple(copper(lp, side))
  if not empty?(copper) :
    val min-copper-copper-space = clearance(current-rules(), MinCopperCopperSpace)
    val min-space = min-space(copper)
    #CHECK(
      condition =            min-space >= min-copper-copper-space,
      name =                 "Landpattern minimum space"
      description =          "Check min copper spacing"
      category =             "Manufacturing Checks"
      subcheck-description = "Check landpattern copper minimum spacing",
      pass-message =         "Landpattern %_ min spacing %_ does not violate min spacing rules %_" % [/name(lp), min-space, min-copper-copper-space],
      fail-message =         "Landpattern %_ min spacing %_ violates min spacing rules %_" % [/name(lp), min-space, min-copper-copper-space],
      locators =             [lp]
    )

; Checks that the copper layers on both sides of a ladnpattern dont' violate 
; the minimum copper width rule
public pcb-check check-min-copper-width (lp:LandPattern, side:Side) :
  val name = "Layout checks"
  val description = "Check min copper width"
  val category = "Manufacturing Checks"
  val copper = to-tuple(copper(lp, side))
  if not empty?(copper) :
    val min-copper-width = clearance(current-rules(), MinCopperCopperSpace)
    val min-width = min-width(copper)
    #CHECK(
      condition =            min-width >= min-copper-width,
      name =                 "Landpattern minimum width"
      description =          "Check min copper width"
      category =             "Manufacturing Checks"
      subcheck-description = "Check landpattern copper minimum width",
      pass-message =         "Landpattern %_ min width %_ does not violate min width rules %_" % [/name(lp), min-width, min-copper-width],
      fail-message =         "Landpattern %_ min width %_ violates min width rules %_" % [/name(lp), min-width, min-copper-width],
      locators =             [lp]
    )

; Checks that a BGA landpattern does not violate the min-pitch-bga design rule
public pcb-check check-bga-pitch (lp:LandPattern) :
  val name = "Layout checks"
  val description = "Check bga pad pitch"
  val category = "Manufacturing Checks"
  val min-pitch-bga = clearance(current-rules(), MinPitchBGA)
  #CHECK(
    condition =            min-pitch(lp) >= min-pitch-bga,
    name =                 "Layout checks"
    description =          "Check bga pad pitch"
    category =             "Manufacturing Checks"
    subcheck-description = "Check landpattern bga minimum pitch",
    pass-message =         "Landpattern %_ min bga pitch %_ does not violate min bga pitch rules %_" % [/name(lp), min-pitch(lp), min-pitch-bga],
    fail-message =         "Landpattern %_ min bga pitch %_ violates min bga pitch rules %_" % [/name(lp), min-pitch(lp), min-pitch-bga],
    locators =             [lp]
  )

; Checks that a leaded component does not violate the min-leaded-pitch  design rule
public pcb-check check-leaded-pitch (lp:LandPattern) :
  val name = "Layout checks"
  val description = "Check leaded pad pitch"
  val category = "Manufacturing Checks"
  val min-pitch-leaded = clearance(current-rules(), MinPitchLeaded)
  val min-pitch =  min-pitch(lp)
  #CHECK(
    condition =            min-pitch >= min-pitch-leaded,
    name =                 "Layout checks"
    description =          "Check leaded pad pitch"
    category =             "Manufacturing Checks"
    subcheck-description = "Check landpattern leaded minimum pitch",
    pass-message =         "Landpattern %_ min leaded pitch %_ does not violate min leaded pitch rules %_" % [/name(lp), min-pitch, min-pitch-leaded],
    fail-message =         "Landpattern %_ min leaded pitch %_ violates min leaded pitch rules %_" % [/name(lp), min-pitch, min-pitch-leaded],
    locators =             [lp]
  )

; Checks that the solder mask layers of a land pattern do not violate the minimum
; solder mask sliver
public pcb-check check-min-solder-mask-sliver (lp:LandPattern, shapes:Seqable<Shape>) :
  val name = "Layout checks"
  val description = "Check min soldermask size"
  val category = "layout-check"
  val s = to-tuple(shapes)
  if not empty?(s):
    val min-space = min-space(s)
    val rule-space = clearance(current-rules(), MinSolderMaskBridge)
    #CHECK(
      condition =            min-space >= rule-space,
      name =                 "Layout checks"
      description =          "Check min soldermask size"
      category =             "Manufacturing Checks"
      subcheck-description = "Check landpattern minimum soldermask bridge spacing",
      pass-message =         "Landpattern %_ min soldermask spacing %_ does not violate min rules %_" % [/name(lp), min-space, rule-space],
      fail-message =         "Landpattern %_ min soldermask spacing %_ violates min rules %_" % [/name(lp), min-space, rule-space],
      locators =             [lp]
    )

defstruct LandpatternCheckInfo <: Equalable&Hashable :
  landpattern: LandPattern
  bga: True|False
  leaded: True|False
with :
  equalable => true
  hashable => true

; Runs all the land pattern checks on either an instance or definition.
; Not currently used in the design checks
public defn check-landpattern (obj:JITXObject|JITXDef) :
  ; extract the land pattern
  val lp =
    match(obj) :
      (landpattern:LandPattern) :
        landpattern
      (d:JITXDef) :
        landpattern(d)
      (i:JITXObject) :
        landpattern(instance-definition(i))

  check-landpattern $ LandpatternCheckInfo(lp, property?(obj.bga, false), property?(obj.leaded, false))

defn check-landpattern (info:LandpatternCheckInfo) :
  val lp = landpattern(info)

  ; perform the checks
  inside pcb-module :
    for side in [Top, Bottom] do :
      check check-min-copper-copper-space(lp, side)
      check check-min-copper-width(lp, side)
      check check-min-solder-mask-sliver(lp, layer(lp, SolderMask(side)))

    if bga(info) :
      check check-bga-pitch(lp)

    if leaded(info) :
      check check-leaded-pitch(lp)

; Runs landpattern checks recursively on all the lands in a module
public defn check-all-landpatterns (module:JITXObject) :
  defn info (inst: JITXObject) :
    LandpatternCheckInfo(landpattern $ instance-definition(inst),
                         property?(inst.bga, false),
                         property?(inst.leaded, false))

  inside pcb-module :
    val instance-infos = unique $ seq(info, component-instances(module))

    do(check-landpattern, instance-infos)
    
; Runs landpattern checks recursively starting from self.
public defn check-all-landpatterns () : 
  inside pcb-module: 
    check-all-landpatterns(self)


doc: "Helper to force power-states property to propagate through \
      components in a design. Currently, the property may only   \
      be shared along components with the power-supply-component \
      property set `true`."
public defn propagate-power-states (module:JITXObject) : 
  ; Collect all the pins in the design
  val all-pins = 
    for i in populated-components(module) seq-cat :
      pins(i)
  
  ; println("pins: %, " % [seq(ref, all-pins)])

  ; Find the pins with the power-states property
  val roots =
    for pin in all-pins filter :
      has-property?(pin.power-states)
  
  ; DFS walk of the netlist, to update power-states of 
  ; connected power-pins 
  val visited = HashSet<JITXObject>()
  defn visit-pins (pin:JITXObject, power-states-tuple:Tuple<PowerState>) :
    if not visited[pin] :
      add(visited, pin)
      if not has-property?(pin.power-states) :
        set-property(pin, `power-states, power-states-tuple)
        
      if has-property?(pin.power-pin) or
         has-property?(pin.power-supply-pin) :
        do(visit-pins{_, power-states-tuple}, connected-pins(pin))

  defn visit-power-supply-components (pin:JITXObject, power-states-tuple:Tuple<PowerState>) :
    val instance = containing-instance!(pin)
    if has-property?(instance.power-supply-component) and
        property(instance.power-supply-component) : 
      do(visit-pins{_, power-states-tuple}, pins(instance))

  ; propagate the power-states to connected power-pins
  do(visit-pins{_0, property(_0.power-states)}, roots)
  do(visit-power-supply-components{_0, property(_0.power-states)}, roots)

  ; propagate from power pins to io-pins
  for io-pin in filter(is-digital-pin?, all-pins) do :
    val vdd-pin = 
      if has-property?(io-pin.digital-input) : 
        vdd-pin(property(io-pin.digital-input))
      else if has-property?(io-pin.digital-output) : 
        vdd-pin(property(io-pin.digital-output))
      else if has-property?(io-pin.digital-io) : 
        vdd-pin(property(io-pin.digital-io))
      else : 
        fatal("Expected a digital io pin.")
    if has-property?(vdd-pin.power-states) and 
       (not has-property?(io-pin.power-states)): 
      set-property(io-pin, `power-states, property(vdd-pin.power-states))

defn check-has-power-states (p:JITXObject) :
  #CHECK(condition = has-property?(p.power-states)
         name        = "Check Power States"
         description = "Checks that all i/o pins have power states"
         category    = "power-states"
         subcheck-description = "Check that a pin has power states"
         pass-message = "%_ has a valid .power-states property" % [ref(p)]
         fail-message = "%_ is missing the .power-states property" % [ref(p)]
         locators = [p])
