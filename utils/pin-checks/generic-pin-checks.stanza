#use-added-syntax(jitx)
defpackage ocdb/utils/pin-checks/generic-pin-checks :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/property-structs
  import ocdb/utils/pin-checks/utils
  
val NAME        = "Generic Pin Checks"
val DESCRIPTION = "Check Generic Pin Properties"

doc: "Check a generic pin"
public defn check-generic-pin (p:JITXObject) :
  inside pcb-module :
    check generic-pin(p)

pcb-check generic-pin (p:JITXObject) :
  val g-props = property(p.generic-pin)
  #CHECK(
      condition = has-property?(p.net-voltage)
      name = NAME
      category = CATEGORY
      description = DESCRIPTION
      subcheck-description = "Verify the generic pin has a net-voltage property attached"
      pass-message = "Pin %_ has the net-voltage property (%_V) attached" % 
        [context(p), property(p.net-voltage)],
      info-message = "Pin %_ does not have the net-voltage property attached" %
        [context(p)],
      locators = [p]
    )

    val max-voltage = eval-voltage(max-voltage(g-props))
    #CHECK(
      condition = in-range?(max-voltage, property(p.net-voltage)),
      name = NAME
      category = CATEGORY
      description = DESCRIPTION      
      subcheck-description = "Verify the max voltage of a generic pin is within the designs' supply voltage range",
      pass-message = "Generic pin %_ max-voltage %_ is compatible with the supply voltage range %_" 
        % [context(p), max-voltage, property(p.net-voltage)],
      fail-message = "Generic pin %_ max-voltage %_ is not compatible with the supply voltage range %_" 
        % [context(p), max-voltage, property(p.net-voltage)],
      locators = [p]
    )
  
