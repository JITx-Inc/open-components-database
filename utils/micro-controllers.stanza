#use-added-syntax(jitx)
defpackage ocdb/utils/micro-controllers :
  import core
  import collections
  import json

  import jitx
  import jitx/commands
  import jitx/errors
  import ocdb/utils/landpatterns
  import ocdb/utils/design-vars
  import ocdb/utils/property-structs
  import ocdb/utils/box-symbol
  import ocdb/utils/db-parts

  import ocdb/utils/stm
  import ocdb/utils/stm-to-jitx
  import ocdb/components/st-microelectronics/landpatterns


;============================================================
;======================== Accessor ==========================
;============================================================

doc: \<>
One can query an actual STM micro-controller from the JITX database that can be bought.
The component is wrapped in our parametrizeable micro-controller module.
This call requires internet access.
`micro-controller` calls the lower level [Part Query API](../../jitx-commands/dbquery.md) adding the list of attributes provided
 by the user on top of design settings.

```stanza
public defn micro-controller (params:Tuple<KeyValue>) -> (Tuple<KeyValue<Symbol,?>> -> Instantiable)
```

Example:

```stanza
#use-added-syntax(jitx)
defpackage ocdb/designs/mcu :
  import core

  import jitx
  import jitx/commands

  import ocdb/utils/defaults
  import ocdb/utils/micro-controllers
  import ocdb/utils/generic-components

println("Available mcu cores: %_" % [look-up-micro-controllers("core")])

val BOARD-SHAPE = RoundedRectangle(25.0, 25.0, 0.25)
pcb-module my-design:
  inst mcu : micro-controller(["core" => "ARM Cortex-M3"])([`cap-bypass-package => 4.7e-6])
  add-mounting-holes(BOARD-SHAPE, [2, 3])

make-default-board(my-design, 4, BOARD-SHAPE)
view-board()
view-schematic()
```

`micro-controller(["core" => "ARM Cortex-M3"])` is a module generator for an STM micro-controller
based on the ARM Cortex-M3. It needs to be run with arguments `\[`cap-bypass-package => 4.7e-6\]` for our micro-controller
API to generate a module with the required configuration.

See [ocdb/utils/stm-to-jitx](#ocdbstm-to-jitx) for documentation of the micro-controller generator.
<>

public defn micro-controller (params:Tuple<KeyValue>) -> (Tuple<KeyValue<Symbol,?>> -> Instantiable) :
  val mcu = MicroController(params)
  val component = to-jitx(mcu)
  mcu-module(component)

public defn find-micro-controller (core-parameters:Tuple<KeyValue<String, ?>>, 
                            module-parameters:Tuple<KeyValue<Symbol, ?>>,  
                            mcu-design) :
  val possible-mcus = MicroControllers(core-parameters, 10)
  for mcu in possible-mcus first :
    println("Testing %_ " % [mpn(mcu)])
    val test-mcu = mcu-module $ to-jitx(mcu)
    val design = mcu-design(test-mcu(module-parameters))
    set-main-module(design)
    val result = assign-pins?()
    match(result:Instantiable):
      println("MPN: %_ satisfies IO requirements. Producing design." % [mpn(mcu)])
      One(test-mcu(module-parameters))
    else :
      None()
;============================================================
;================ look-up-micro-controllers =================
;============================================================

doc: \<>
```stanza
public defn look-up-micro-controllers (attribute: String) -> Tuple
public defn look-up-micro-controllers (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple
```

Looks up the list of available values (at most 1000 returned) for `attribute` amongst micro-controllers in the JITX database.
This call filters on the same properties as [MicroController](#micro-controller-accessors). Additional properties `filter-properties` can
be given in argument to restrict further criteria on the considered micro-controllers.

Example:
```stanza
$ jitx repl
stanza> import ocdb/utils/micro-controllers
stanza> println("Available mcu cores: %_" % [look-up-micro-controllers("core")])
Available mcu cores: ["ARM Cortex-M0+" "ARM Cortex-M3" "ARM Cortex-M4" "ARM Cortex-M7"]
stanza> println $ look-up-micro-controllers("io")
[21.0 36.0 37.0 109.0 111.0 114.0]
```
<>

public defn look-up-micro-controllers (attribute: String) -> Tuple :
  look-up-micro-controllers(attribute, [])

public defn look-up-micro-controllers (attribute: String, filter-properties:Tuple<KeyValue>) -> Tuple :
  look-up-micro-controllers(attribute, filter-properties, [])

public defn look-up-micro-controllers (attribute: String, filter-properties:Tuple<KeyValue>, exist:Tuple<String>) -> Tuple :
  look-up-micro-controllers(attribute, filter-properties, exist, OPTIMIZE-FOR, OPERATING-TEMPERATURE)

public defn look-up-micro-controllers (attribute: String, filter-properties:Tuple<KeyValue>, exist:Tuple<String>, sort:Tuple<String>, operating-temperature:Toleranced|False) -> Tuple :
  val user-properties = to-tuple $ cat(filter-properties, ["_distinct" => attribute])
  val query-properties = micro-controller-query-properties(user-properties, exist, sort, operating-temperature)

  query-distinct(query-properties, "look-up-micro-controllers")

;============================================================
;===================== Micro Controller =====================
;============================================================

doc: \<>
There are about 600 STM micro-controllers in the JITX database. Most of them are currently out-of-stock in trusted sellers,
this is why the [default design requirements](#microcontroller-accessors) filter out most micro-controllers for sourcing constraints.

Check the [properties reference](../utilities/properties.md) for a description of supported attributes.

Here are available attribute values with [default design requirements](#microcontroller-accessors) as of 10/14/2021. They can be queried anytime with:
```stanza
$ jitx repl
stanza> import ocdb/utils/micro-controllers
stanza> for attribute in ["manufacturer", "mpn", "trust", "dimensions", "mounting", "rated-temperature", "core", "core-architecture", "data-width", "flash", "frequency", "io", "line", "mfg-package", "ram", "eeprom", "series", "supply-voltage", "rated-esd"] do :
      >   println("| %_ | %@ |" % [attribute, look-up-micro-controllers(attribute)])
```

| Attribute | Values |
|:-----|:-----|
| manufacturer | "STMicroelectronics" |
| mpn | "STM32L031G6U6" "STM32L100C6U6A" "STM32L152QEH6" "STM32L476QEI6" "STM32F412CGU6" "STM32F767ZIT6" |
| trust | "low" |
| dimensions (x, y, z, area) | (4.0, 4.0, 0.55, 16.0) (7.0, 7.0, 0.55, 49.0) (7.0, 7.0, 0.6, 49.0) (22.0, 22.0, 1.6, 484.0) |
| mounting | "smd" |
| rated-temperature (min, max) | (-40.0, 85.0) |
| core | "ARM Cortex-M0+" "ARM Cortex-M3" "ARM Cortex-M4" "ARM Cortex-M7" |
| core-architecture | "ARM" |
| data-width | 32.0 |
| flash | 16000.0 32000.0 512000.0 2048000.0 |
| frequency | 32000000.0 80000000.0 100000000.0 216000000.0 |
| io | 21.0 37.0 111.0 109.0 36.0 114.0 |
| line | "STM32F412" "STM32F7x7" "STM32L0x1" "STM32L100" "STM32L151/152" "STM32L4x6" |
| mfg-package | "UFQFPN28" "UFQFPN48" "UFBGA132" "LQFP144" |
| ram | 8000.0 10000.0 80000.0 128000.0 256000.0 384000.0 |
| eeprom | 1024000.0 2048000.0 16384000.0 |
| series | "STM32L0" "STM32L1" "STM32L4" "STM32F4" "STM32F7" |
| supply-voltage (min, max) | (1.65, 3.6) (1.8, 3.6) (1.71, 3.6]) (1.7, 3.6) |
| rated-esd | 2000.0 |
<>

public pcb-struct ocdb/utils/micro-controllers/MicroController <: Component :
  ; Generic properties
  manufacturer: String
  mpn: String
  trust: String
  x*: Double ; with: (as-method => true)
  y*: Double ; with: (as-method => true)
  z: Double|False
  mounting: String
  rated-temperature: Toleranced|False
  ; Specific properties
  core: String
  core-architecture: String
  data-width: Int
  flash: Double
  frequency: Double
  io: Int
  line: String
  mfg-package: String
  ram: Double
  eeprom: Double|False
  series: String
  supply-voltage: MinMaxRange
  rated-esd: Double|False
  sellers*: Tuple<Seller>|False ; with: (as-method => true)
  resolved-price*: Double|False ; with: (as-method => true)
  pin-properties: STMPinProperties
  bundles: Tuple<STMBundle>
  supports: Tuple<STMSupports>

defmethod x (c:MicroController) : 
  x*(c)
defmethod y (c:MicroController) : 
  y*(c)
defmethod sellers (c:MicroController) : 
  sellers*(c)
defmethod resolved-price (c:MicroController) : 
  resolved-price*(c)


public defn MicroController (json: JObject) -> MicroController :
  val [x, y, z] = parse-dimensions(json["dimensions"] as JObject)

  MicroController(json["manufacturer"] as String,
                  json["mpn"] as String,
                  json["trust"] as String,
                  x,
                  y,
                  z,
                  json["mounting"] as String,
                  parse-rated-temperature(json),
                  json["core"] as String,
                  json["core-architecture"] as String,
                  to-int(json["data-width"] as Double),
                  json["flash"] as Double,
                  json["frequency"] as Double,
                  to-int(json["io"] as Double),
                  json["line"] as String,
                  json["mfg-package"] as String,
                  json["ram"] as Double,
                  optional-double(json, "eeprom"),
                  json["series"] as String
                  parse-supply-voltage(json),
                  optional-double(json, "rated-esd"),
                  parse-sellers(json),
                  optional-double(json, "resolved_price"),
                  create-pin-properties(json),
                  create-bundles(json),
                  create-supports(json),
                )

;============================================================
;=============== MicroController Accessors ==================
;============================================================

doc: \<>
One can query an actual micro-controller from the JITX database that you can be bought. This call requires internet access.
`MicroController` calls the lower level [Part Query API](../../jitx-commands/dbquery.md) adding the list of attributes provided
 by the user on top of design settings.

```stanza
public defn MicroController (properties:Tuple<KeyValue>) -> MicroController
```

Fixed Requirements :
* category: "microcontroller"

Default design Requirements (set by global variables defined in `ocdb/utils/design-vars`) :
*  _sort: \["area"]\
* max-rated-temperature.min: 0.0
* min-rated-temperature.max: 25.0
* _stock: 100
* _sellers: \["Digi-Key" "Mouser" "Newark" "Allied Electronics & Automation" "Avnet" "Future Electronics" "Arrow Electronics"\]

Those design requirements can be changed, either by changing `ocdb/utils/design-vars` or by importing `ocdb/utils/design-vars` and
setting new values for the global variables:
* _sort: set by `OPTIMIZE-FOR`.
* max-rated-temperature.min / min-rated-temperature.max : set by `OPERATING-TEMPERATURE`.
* _stock: set by `DESIGN_QUANTITY`.
* _sellers: can be overridden creating ~/.jitx/current/user.params with
```stanza
bom :
  vendors = ("seller 1" "seller 2")
```

Sellers need to spell exactly seller names from the Octopart reference or they will be ignored: [Octopart reference](https://octopart.com/api/v4/values#sellers)

Here are accessors to override design requirements:
```stanza
public defn MicroController (properties:Tuple<KeyValue>,
                             exist:Tuple<String>) -> MicroController
public defn MicroController (properties:Tuple<KeyValue>,
                             exist:Tuple<String>,
                             sort:Tuple<String>,
                             operating-temperature:Toleranced|False) -> MicroController
```

Arguments:
* `exist`: one can require the resulting micro-controller to have an attribute that is otherwise optional (for example "tolerance").
* `sort`: overrides the sorting arguments that would otherwise be `OPTIMIZE-FOR`.
* `operating-temperature`: overrides the rated temperature range that would otherwise be `OPERATING-TEMPERATURE`.

Example: Find the best micro-controllers for our design requirements (optimizes by area by default)
```stanza
$ jitx repl
stanza> import ocdb/utils/micro-controllers
stanza> val mcu = MicroController([])
stanza> println $ mcu
MicroController(
  mpn = STM32L031G6U6
  trust = low
  (x, y, z) = (4.0, 4.0, 0.55)
  mounting = smd
  rated-temperature = MinMaxRange(min=-40.0, max=85.0)
  core = ARM Cortex-M0+
  core-architecture = ARM
  data-width = 32
  flash = 16000.0
  frequency = 32000000.0
  io = 21
  line = STM32L0x1
  mfg-package = UFQFPN28
  ram = 8000.0
  eeprom = 1024000.0
  series = STM32L0
  supply-voltage = MinMaxRange(min=-40.0, max=85.0)
  rated-esd = 2000.0
  sellers =
    Seller(
      company-name = Mouser
      resolved-price = 2.55
      offers = (
        SellerOffer(
          inventory-level = 110
          prices = (
            SellerOfferPrice(quantity = 1, converted-price = 3.29)
            SellerOfferPrice(quantity = 10, converted-price = 2.96)
            SellerOfferPrice(quantity = 50, converted-price = 2.96)
            SellerOfferPrice(quantity = 100, converted-price = 2.55)
            SellerOfferPrice(quantity = 250, converted-price = 2.4)
            SellerOfferPrice(quantity = 500, converted-price = 2.11)
            SellerOfferPrice(quantity = 1000, converted-price = 1.83)
            SellerOfferPrice(quantity = 5880, converted-price = 1.82)
            SellerOfferPrice(quantity = 10000, converted-price = 1.83)))))
  resolved-price = 2.55)
```

```stanza
public defn MicroControllers (properties:Tuple<KeyValue>, limit: Int) -> Tuple<MicroController>
```
Similar to `MicroController` but querying up to 25 micro-controllers.

```stanza
public defn MicroController (raw-json: JObject) -> MicroController
```
Creates a `MicroController` from a `JObject`.

Example:
```stanza
$ jitx repl
stanza> import jitx/commands
stanza> import ocdb/utils/db-parts
stanza> import json
stanza> val jobject = dbquery-first-allow-non-stock(["category" => "microcontroller" "flash" => 32.0e3, "_stock" => 1, "_sellers" => ["Mouser"]]) as JObject
stanza> val mcu = MicroController(jobject)
stanza> println $ mcu
MicroController(
  mpn = STM32L100C6U6A
  trust = low
  (x, y, z) = (7.0, 7.0, 0.55)
  mounting = smd
  rated-temperature = MinMaxRange(min=-40.0, max=85.0)
  core = ARM Cortex-M3
  core-architecture = ARM
  data-width = 32
  flash = 32000.0
  frequency = 32000000.0
  io = 37
  line = STM32L100
  mfg-package = UFQFPN48
  ram = 10000.0
  series = STM32L1
  supply-voltage = MinMaxRange(min=-40.0, max=85.0)
  sellers =
    Seller(
      company-name = Mouser
      resolved-price = 4.45
      offers = (
        SellerOffer(
          inventory-level = 2
          prices = (
            SellerOfferPrice(quantity = 1, converted-price = 4.45)
            SellerOfferPrice(quantity = 10, converted-price = 4.0)
            SellerOfferPrice(quantity = 25, converted-price = 3.78)
            SellerOfferPrice(quantity = 50, converted-price = 3.78)
            SellerOfferPrice(quantity = 100, converted-price = 3.28)
            SellerOfferPrice(quantity = 250, converted-price = 3.11)
            SellerOfferPrice(quantity = 500, converted-price = 2.79)
            SellerOfferPrice(quantity = 1000, converted-price = 2.36)
            SellerOfferPrice(quantity = 2500, converted-price = 2.24)
            SellerOfferPrice(quantity = 10000, converted-price = 2.24)))))
  resolved-price = 4.45)
```
<>

public defn MicroController (user-properties:Tuple<KeyValue>) -> MicroController :
  MicroController(user-properties, [])

public defn MicroController (user-properties:Tuple<KeyValue>, exist:Tuple<String>) -> MicroController :
  MicroController(user-properties, exist, OPTIMIZE-FOR, OPERATING-TEMPERATURE)

public defn MicroController (user-properties:Tuple<KeyValue>, exist:Tuple<String>, sort:Tuple<String>, operating-temperature:Toleranced|False) -> MicroController :
  val query-properties = micro-controller-query-properties(user-properties, exist, OPTIMIZE-FOR, OPERATING-TEMPERATURE)
  ; - If _stock or _sellers key exist, all STM mcus are queried from the mongo database in the limit of maximum 1000,
  ; then we query the sourcing data for each, filter on stock / sellers constraints and
  ; finally we sort again if OPTIMIZE_FOR[0] is "price" or "cost".
  ; - If we don't need to filter on sourcing data (includes sorting on price), we can just query 1 mcu from the mongo database and return it
  val jobject = dbquery-first-allow-non-stock(query-properties) as JObject
  MicroController(jobject)

public defn MicroControllers (user-properties:Tuple<KeyValue>, limit: Int) -> Tuple<MicroController> :
  val query-properties = micro-controller-query-properties(user-properties, [], OPTIMIZE-FOR, OPERATING-TEMPERATURE)
  ;Query the database with the given properties
  map{MicroController, _} $ dbquery(query-properties, limit) as Tuple<JObject>

defn micro-controller-query-properties (user-properties:Tuple<KeyValue>,
                                        exist:Tuple<String>,
                                        sort:Tuple<String>,
                                        operating-temperature:Toleranced|False) -> Tuple<KeyValue> :
  ; Ensure queries hit V1 DB for STM Microcontrollers
  val user-properties-v1-db = to-tuple $ cat(user-properties, ["_type" => "components"])
  query-properties(user-properties-v1-db,
                   exist,
                   sort,
                   operating-temperature,
                   "microcontroller",
                   true)

;============================================================
;======================= MCU to JITX ========================
;============================================================

doc: \<>
A module can be generated instantiating a [MicroController](#microcontroller-struct) and
taking user options to parametrize the micro-controller module.

```stanza
;Generate a module that accepts user options and instantiates the given component.
public defn mcu-module (component:Instantiable) -> (Tuple<KeyValue<Symbol,?>> -> Instantiable) :
  pcb-module module (options:Tuple<KeyValue<Symbol,?>>) :
    schematic-group(self) = stm
    val settings = Settings(DEFAULT-SETTINGS)
    for entry in options do :
      settings[key(entry)] = value(entry)
      
    public inst mcu : component
    
    connect-stm(mcu, settings)
  module
```

[`micro-controller`](#micro-controller) is a shorthand to generate a module from micro-controller requirements.

Example :
```stanza
#use-added-syntax(jitx)
defpackage ocdb/designs/mcu :
  import core
  import ocdb/utils/micro-controllers

pcb-module my-design:
  inst mcu : micro-controller(["core" => "ARM Cortex-M3"])([`cap-bypass-package => 4.7e-6])
```
is equivalent to
```stanza
#use-added-syntax(jitx)
defpackage ocdb/designs/mcu :
  import core
  import ocdb/utils/micro-controllers

val mcu = MicroController(["core" => "ARM Cortex-M3"])
val module-generator = mcu-module $ to-jitx(mcu)

pcb-module my-design:
  inst mcu : module-generator([`cap-bypass-package => 4.7e-6])
```

Available user settings are:

* Adding a resistor and capacitor pull-up between the reset pin and power supply

| Option | Values | Default |
|:-----|:-----|:-----|
| \`reset-pullup | `Double` | 10.0e3 |
| \`reset-cap | `Double` | 10.0e-9 |

* Adding a bypass capacitor for the package and between each power pin individually and ground

| Option | Values | Default |
|:-----|:-----|:-----|
| \`cap-bypass-package | `Double` | 4.7e-6 |
| \`cap-bypass-pin | `Double` | 100.0e-9 |

* Configuring booting method

| Option | Values | Default |
|:-----|:-----|:-----|
| \`boot-from | "flash", "system", "sram"  | "flash" |
| \`boot-resistor | `Double`  | 10.0e3 |

* Connecting a debug interface

| Option | Values | Default |
|:-----|:-----|:-----|
| \`debug-interface | `Bundle` | `swd()` (pins: swdio, swdclk) |
| \`debug-connector | `Instantiable` | `ocdb/components/tag-connect/TC2050-IDC-NL/module` (pins: p\[1 through 10\]) |

* Configuring the micro-controller clock

| Option | Values | Default |
|:-----|:-----|:-----|
| \`HSE-freq | `Double` | 16.0e6 |
| \`HSE-ppm | `Double` | 30.0e-6 |
| \`HSE-source | "crystal", "osc" | "crystal" |
| \`LSE-freq | `Double` | 32.768e3 |
| \`LSE-ppm | `Double` | 0.05 |
| \`LSE-source | "crystal", "osc" | "crystal" |
<>

pcb-component mcu-component (mcu:MicroController) : 
  manufacturer = manufacturer(mcu)
  mpn = mpn(mcu)
  val mappings = to-jitx-pin-properties(pin-properties(mcu))
  val bundle-table = to-jitx-bundles(bundles(mcu))
  to-jitx-supports(supports(mcu), bundle-table, mappings)
  val lp = find({name(_) == mfg-package(mcu)}, STM32-LAND-PATTERNS)
  throw(Exception("%_ is not a supported package." % [mfg-package(mcu)])) when lp is False
  assign-landpattern(lp as LandPattern)
  make-box-symbol()

  #for field in [trust, x, y, z, 
                 mounting, rated-temperature, core, core-architecture, 
                 data-width, flash, frequency, io, 
                 line, ram, eeprom, series, 
                 supply-voltage, rated-esd, sellers, resolved-price] :
    property(self.field) = field(mcu)  

;============================================================
;======================== to-jitx ===========================
;============================================================

doc: \<>
``stanza
defmethod to-jitx (m: MicroController) -> Instantiable
```

Takes a `MicroController` struct and returns an instance.
Example:
```stanza
#use-added-syntax(jitx)
defpackage my-design :
  import ocdb/utils/db-parts
  import ocdb/utils/micro-controllers

val micro-controller = MicroController(["max-io" => 40])

pcb-module my-module :
  inst res : to-jitx(micro-controller)
```
<>

public defmethod to-jitx (m:MicroController) : 
  mcu-component(m)

;============================================================
;====================== Printer =============================
;============================================================

defmethod print (o:OutputStream, m:MicroController) :
    print(o, "MicroController(%_)" % [indented-list $ short-print-items(m)])

public defn print-full (m:MicroController) :
  val items = cat(short-print-items(m),
                  ["pin-properties = %_" % [pin-properties(m)]
                   "bundles = %_" % [bundles(m)]
                   "supports = %_" % [supports(m)]])
  print("MicroController(%_)" % [indented-list(items)])

defn short-print-items (m: MicroController) -> Tuple<Printable> :
  val items = [
    "mpn = %_" % [mpn(m)]
    "trust = %_" % [trust(m)]
    "(x, y, z) = (%,)" % [[x(m), y(m), z(m)]]
    "mounting = %_" % [mounting(m)]
    "rated-temperature = %_" % [rated-temperature(m)]
    "core = %_" % [core(m)]
    "core-architecture = %_" % [core-architecture(m)]
    "data-width = %_" % [data-width(m)]
    "flash = %_" % [flash(m)]
    "frequency = %_" % [frequency(m)]
    "io = %_" % [io(m)]
    "line = %_" % [line(m)]
    "mfg-package = %_" % [mfg-package(m)]
    "ram = %_" % [ram(m)]
    "eeprom = %_" % [eeprom(m)]
    "series = %_" % [series(m)]
    "supply-voltage = %_" % [supply-voltage(m)]
    "rated-esd = %_" % [rated-esd(m)]]

  match(sellers(m), resolved-price(m)) :
    (s: Tuple<Seller>, p: Double) :
      to-tuple $ cat(items, ["sellers = %_" % [indented-list(s)]
                             "resolved-price = %_" % [p]])
    (s: Tuple<Seller>, p: False) :
      to-tuple $ cat(items, ["sellers = %_" % [indented-list(s)]])
    (s: False, p: False): items

;============================================================
;=================== Parsing utils ==========================
;============================================================

defn parse-supply-voltage (json: JObject) -> MinMaxRange :
  val supply-voltage-json = json["supply-voltage"] as JObject
  MinMaxRange(supply-voltage-json["min"] as Double, supply-voltage-json["max"] as Double)
