#use-added-syntax(jitx)
defpackage ocdb/utils/generator-utils:
  import core
  import collections
  import lang-utils with :
    prefix(min-max) => lang-

  import jitx
  import jitx/commands
  import jitx/powergen/gen

  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/design-vars
  import ocdb/utils/property-structs
  import ocdb/modules/power-regulators
  import ocdb/utils/bundles
  import ocdb/utils/relative-voltages
  import ocdb/utils/propagation

; =======================================
; Ciruit convenience functions
; =======================================

; Add load balancing caps to crystal oscillator
public defn add-xtal-caps (xtal:JITXObject, gnd:JITXObject, stray-capacitance:Double) :
  inside pcb-module:
    val c-load = load-capacitance(property(xtal.crystal-resonator))
    val c-bal = closest-std-val(2.0 * (c-load - stray-capacitance), 5.0)
    cap-strap(xtal.p[1], gnd, ["capacitance" => c-bal "temperature-coefficient.code" => "C0G" ])
    val c = cap-strap(xtal.p[2], gnd, ["capacitance" => c-bal "temperature-coefficient.code" => "C0G" ])
    c 
; Default stray capacitance assumed 5pf. 
public defn add-xtal-caps (xtal:JITXObject, gnd:JITXObject) :
  add-xtal-caps(xtal, gnd, 5.0e-12)

; Add pullup resistors to an open-drain bus (like i2c) to vio pin. Specced for minimum power draw meeting speed requirements [TI app note:slva689].
public defn add-open-drain-pullups (bus:JITXObject, vio:JITXObject, clk-rate:Double, bus-capacitance:Double) :
  inside pcb-module:
    val rise-time = 0.35 / (clk-rate * 5.0) ; Signal bandwidth~ 5x clock rate for fairly sharp edge
    val r = closest-std-val(rise-time / (0.8473 * bus-capacitance), 10.0)
    pcb-module collector (r-val:Double, count:Int):
      public inst r : chip-resistor(r-val)[count]
    inst rs:collector(r, length(ports(bus)))
    for (p in ports(bus), i in 0 to false) do :
      net (rs.r[i].p[1] p)
      net (rs.r[i].p[2] vio)
      eval-when has-property?(rs.r[i].p[2].voltage) :
        property(rs.r[i].p[1].voltage) = min-max(0.0, max-value(property(rs.r[i].p[2].voltage)))
    rs

; Default is 100kHz clock rate, 100pF bus capacitance.
public defn add-open-drain-pullups (bus:JITXObject, vio:JITXObject) :
  add-open-drain-pullups(bus, vio, 100.0e3, 100.0e-12)

public pcb-enum ocdb/utils/generator-utils/USB-C-ConfigurationChannel :
  SourceDefault
  Source5V-1A5
  Source5V-3A0
  SinkDefault

; Creates and attaches USB-C configuration resistors
public defn usb-c-configuration-channel (usb-c-bundle:JITXObject, method:USB-C-ConfigurationChannel) :
  if port-type(usb-c-bundle) != usb-c :
    fatal("Bundle type passed to usb-c-configuration-channel must be bundle type usb-c.")

  inside pcb-module:
    switch(method) :
      SourceDefault:
        res-strap(usb-c-bundle.cc[1], usb-c-bundle.vbus.vdd, closest-std-val((5.0 / 80.0e-6) - 5.1e3, 5.0))
        res-strap(usb-c-bundle.cc[2], usb-c-bundle.vbus.vdd, closest-std-val((5.0 / 80.0e-6) - 5.1e3, 5.0))
      Source5V-1A5: 
        res-strap(usb-c-bundle.cc[1], usb-c-bundle.vbus.vdd, closest-std-val((5.0 / 180.0e-6) - 5.1e3, 5.0))
        res-strap(usb-c-bundle.cc[2], usb-c-bundle.vbus.vdd, closest-std-val((5.0 / 180.0e-6) - 5.1e3, 5.0))
      Source5V-3A0: 
        res-strap(usb-c-bundle.cc[1], usb-c-bundle.vbus.vdd, closest-std-val((5.0 / 330.0e-6) - 5.1e3, 5.0))
        res-strap(usb-c-bundle.cc[2], usb-c-bundle.vbus.vdd, closest-std-val((5.0 / 330.0e-6) - 5.1e3, 5.0))
      SinkDefault: 
        res-strap(usb-c-bundle.cc[1], usb-c-bundle.vbus.gnd, 5.1e3)
        res-strap(usb-c-bundle.cc[2], usb-c-bundle.vbus.gnd, 5.1e3)

; =======================================
; Piecewise linear functions
; Example call : PWL([[x0 y0] [x1 y1] ... [xn yn])[x]. Returns interpolated value of y at x
; =======================================
public pcb-struct ocdb/utils/generator-utils/PWL :
  ps:Tuple<[Double, Double]>

public defn get (f:PWL, x:Double) :
  val ps = ps(f)
  val n = length(ps)
  if x < ps[0][0] :
    ps[0][1]
  else if x >= ps[0][0] and x <= ps[n - 1][0] :
    val i = for i in 0 to n find! :
      ps[i][0] >= x
    val j = for i in reverse(0 to n) find! :
      ps[i][0] <= x
    if i == j :
      ps[i][1]
    else :
      val dydx = (ps[i][1] - ps[j][1]) / (ps[i][0] - ps[j][0])
      dydx * (x - ps[j][0]) + ps[j][1]
  else if x > ps[n - 1][0] :
    ps[n - 1][1]
  else  :
    fatal("Something is wrong in PWL with x = %_" % [x])

; =======================================
; Assign a port to its bundle
; =======================================
public defn support (port:JITXObject) :
  val bund = port-type(port)
  match(bund:Bundle) :
    inside pcb-module :
      supports bund :
        for (bpin in pins(bund), pin in pins(port)) do :
          bpin => pin
  else :
    fatal("Port %_ is not a bundle type." % [ref(port)])

; =======================================
; Assign schematic and layout groups
; =======================================
public defn group-modules (mods:Tuple<Tuple<JITXObject>>) :
  inside pcb-module :
    val g-count = to-seq(0 to false)  
    for m in mods do :
      val g-name = Ref("g-sg-%_" % [next(g-count)])
      for r in m do :
        schematic-group(r) = (g-name)
        layout-group(r) = (g-name)

public defn connect-floating-inputs-to-gnd ():
  inside pcb-module :
    for i in component-instances(self) do :
      for p in pins(i) do :
        ; println("Is %_ connected? %_" % [p, connected?(p)])
        if not connected?(p) and
           has-property?(p.digital-io) and
           property(p.type) == "i" :
          println("Connecting floating input %_ to gnd." % [p])
          net (p, self.gnd)

public defn connect-gnd-pins ():
  inside pcb-module :
    for i in instances(self) do :
      for p in ports(i) do :
        val port-name = tail(ref(p), ref-length(ref(p)) - 1)
        if port-name == Ref("gnd") :
          net (self.gnd, p)

public defn is-resistor? (i: JITXObject) :
  match(get-property?(i, `resistance)) :
    (p:One) : true
    (p:None) : false

public defn is-capacitor? (i: JITXObject) :
  match(get-property?(i, `capacitance)) :
    (p:One) : true
    (p:None) : false

public defn is-inductor? (i: JITXObject) :
  match(get-property?(i, `inductance)) :
    (p:One) : true
    (p:None) : false

public defn resistance! (i: JITXObject) :
  property(i.resistance)

public defn dc-resistance! (i: JITXObject) :
  property(i.dc-resistance)

public defn calculate-operating-points ()  :
  defn get-other-pin (comp:JITXObject,  p:JITXObject) :
    ; Used on 2-pin components to get the single other pin
    for ps in pins(comp) find! :
      ps != p

  defn resistor-operating-point (v: Double, r: Double) :
    OperatingPoint(min-max(0.0, v), min-max(0.0, v / r))

  defn capacitor-operating-point (v: Double) :
    OperatingPoint(min-max(0.0, v), min-max(0.0, 0.0))

  defn inductor-operating-point (v: Double, i: Double) :
    OperatingPoint(min-max(0.0, v), min-max(0.0, i))

  defn check-dual-pin-count! (i: JITXObject) : 
    val pin-count = length(pins(i)) 
    fatal("Resistor, capacitor or inductor %_ has %_ pins instead of 2." % [ref(i), pin-count]) when pin-count != 2

  inside pcb-module :
    for i in component-instances(self) do :
      if is-resistor?(i) or is-capacitor?(i) or is-inductor?(i):
        check-dual-pin-count!(i)
        if has-property?(pins(i)[0].voltage) and has-property?(pins(i)[1].voltage) :
          val p1 = property(pins(i)[0].voltage)
          val p2 = property(pins(i)[1].voltage)
          val voltage = abs(max((max-value(p1) - min-value(p2)), (max-value(p2) - min-value(p1))))
          if is-resistor?(i) :
            property(i.operating-point) = resistor-operating-point(voltage, resistance!(i))
          if is-capacitor?(i) :
            property(i.operating-point) = capacitor-operating-point(voltage)
          if is-inductor?(i) :
            property(i.operating-point) = inductor-operating-point(voltage, voltage / dc-resistance!(i))

; - jitx/commands/connected-pins(p) result does not contain p.
; - connected-group(p) contains p if it is a component pin (not net or module pin)
defn connected-group (obj: Pin|Net) :
  defn is-component-pin? (pin: Pin) :
    containing-instance(pin) is Instance

  val extra-pins =
    match(obj) :
      (pin: Pin) : [pin] when is-component-pin?(pin) else []
      (net: Net) : []

  to-tuple $ cat(extra-pins, connected-pins(obj))


; =======================================
; Attach the DNP (do not populate) to objects (components, array of instances, or module)
; =======================================
public defn dnp (objs:Seqable<JITXObject>) :
  inside pcb-module :
    for obj in objs do :
      switch(instance-type(obj)):
        SingleComponent: 
          do-not-populate(obj)
        else: 
          dnp $ instances(obj)

public defn dnp (obj:JITXObject) :
  dnp([obj])

; =======================================
; Attach the power generator to designs and loads.
; =======================================
public defn generate-power () :
  println("JITX: Generating power system.")
  inside pcb-module :
    for i in component-instances(self) do :
      for p in pins(i) do : ; [TODO] public-pins or pins?
        if has-property?(p.power-request) :
          val [v a n] = property(p.power-request)
          within (rail) = make-load("Load", v, a, n) :
            net (p, pos(rail))
            net (property(p.gnd-ref), neg(rail))

    for i in component-instances(self) do :
      for p in pins(i) do : ; [TODO] public-pins or pins?
        if has-property?(p.power-input) :
          generate-power-system(property(p.power-input), max-value(OPERATING-TEMPERATURE), p, property(p.gnd-ref))

public defn set-power-source (pos:JITXObject, neg:JITXObject, v-in:Double):
  inside pcb-module:
    property(pos.power-input) = v-in
    property(pos.gnd-ref) = neg
    property(pos.power-supply-pin) = PowerSupplyPin(typ(v-in), 0.3) 

public defn propagate-voltages () :
  inside pcb-module:
    for c in component-instances(self) do:
      for p in pins(c) do :
        if has-property?(p.digital-io):
          val prop = property(p.digital-io)
          if driver(prop) is CMOSOutput|TTLOutput :
            property(p.voltage) = min-max(min-value(vol(driver(prop))) max-value(voh(driver(prop))))
        else if has-property?(p.digital-output):
          val prop = property(p.digital-output)
          if driver(prop) is CMOSOutput|TTLOutput :
            property(p.voltage) = min-max(min-value(vol(driver(prop))) max-value(voh(driver(prop))))
    for item in all-connected-items(self) do :
      ;First gather all the voltages on all connected nets.
      val voltages = to-tuple $ 
        for net in nets(item) seq? :
          val prop? = property?(net.voltage)
          match(prop?:One) :
            if value(prop?) is-not Toleranced :
              ; We cannot necessarily know which net is at issue, since 
              ; it may not have a ref. This is a slightly better error than
              ; previous, as downstream it will cause a type error.
              fatal("Cannot propagate voltages. Found a voltage that is not a toleranced value: %_." % [value(prop?)])
          prop?
      
      ;If at least one net has a voltage property.
      if not empty?(voltages) :
        val voltage = voltage!(voltages, item)
        ;Now assign the voltage to all of the component pins in the module.
        for p in component-pins(item) do :
          property(p.voltage) = voltage

defn voltage! (voltages: Tuple<Toleranced>, item: ConnectedItems) -> Toleranced :
  defn unnamed (idx: Int) -> Ref :
    Ref $ to-string("unnamed-net-%_" % [idx])

  ;Let's check that all the voltages happen to be the same.
  ;If they are different, then something has gone wrong.
  if length(voltages) > 1 and length(unique(voltages)) != 1 :
    fatal("Mismatched voltages %_ on nets %_" % [voltages, net-names]) where :
      ;Gather all the net names (some nets don't have names.).
      val net-names = to-tuple $
        for (net in nets(item), idx in 0 to false) seq :
          call-if-false?(unnamed{idx}, ref?(net))

  voltages[0]

; =======================================
; Run transformations to propagate voltages from sources, and run delayed evaluations
; =======================================
public defn run-final-passes (module:Instantiable) -> Instantiable :
  val result-module = transform-module{calculate-operating-points, _} $
    let loop (design: Instantiable = module, i: Int = 0) :
      defn run-eval-loop (design: Instantiable) :
        val design* = run-evals?(design)
        match(design*: Instantiable) : loop(design*, i + 1)
        else : design

      if i == 5 :
        throw $ Exception("A loop executing eval-whens, propagating net voltages and assigning pins has been \
                           encountered: 5 iterations reached. Check that no eval-when generate other eval-whens in an \
                           infinite loop, or that there is no infinite loop of 2nd order between eval-when execution \
                           and net voltage propagation or pin assignment.")
      
      
      ;TODO: Review the order and necessity of those algos
      val filename = to-string("voltage-propagation-iteration%_.txt" % [i])
      design $> ocdb/utils/voltage-propagation/propagate-voltages{_, filename}
             ;$> transform-module{propagate-voltages, _}
             ;$> transform-module{propagate-relative-voltages, _}
             $> assign-pins
             $> run-eval-loop
  
  PROPAGATION-FINISHED = true
  val final-module = run-evals(result-module)
  
  ; If we did not set the main module, a user forgetting to set it himself on the new module would be exporting
  ; the module before adding operating points (the main module is set in the loop to be able to assign pins).
  ; Such bug would be invisible.
  set-main-module(final-module)
  final-module

; FIXME: assign-pins was obviously not meant to be used like this, it depends on the flattening
; Is run-evals? actually accessing the information resulting from the pin assignment?
defn assign-pins (design: Instantiable) -> Instantiable :
  set-main-module(design)
  assign-pins()
