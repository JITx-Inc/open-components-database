#use-added-syntax(esir)
defpackage ocdb/generator-utils:
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import esir/fonts
  import esir/repl-lib
  import ocdb/tests/default-harness

  import ocdb/checks
  import ocdb/bundles
  import ocdb/pinspec
  import ocdb/land-patterns
  import ocdb/generic-components
  import ocdb/calculate-connected

  import jitpcb/powergen
  import jitpcb/powergen/gen

  import ocdb/design-vars

;[strip]
  import jitpcb/visualizer
  import ocdb/rules
  import ocdb/stackups
  import ocdb/symbols
  import ocdb/box-symbol
;[/strip]

public var DESIGN-TEMPERATURE = 0.0

public pcb-connection isolate (a:Ref, b:Ref) :
  unique inst buf : {ocdb/texas-instruments/ISO1540/component}
  net ({a}.sda, {buf}.SDA1)
  net ({a}.scl, {buf}.SCL1)
  net ({b}.sda, {buf}.SDA2)
  net ({b}.scl, {buf}.SCL2)
when :
  port-type(a) == #PT(i2c) and
  port-type(b) == #PT(i2c) 
  
public pcb-component example-resistor :
  manufacturer = "Yageo"
  mpn = "RC0402FR-071KL"
  description = "RES SMD 1K OHM 1% 1/16W 0402"
  reference-prefix = "R"
  pin p[1]
  pin p[2]
  symbol = {resistor-sym(false)}(p[1] => p[1], p[2] => p[2])
  package = {ipc-two-pin-package("0402")}(p[1] => p[1], p[2] => p[2])

public defn make-voltage-regulator (input:Ref, gnd:Ref, v-out:[Double Double Double]|Double, reg:Ref) -> [Ref, Ref] :
  inside pcb-module :
    val vin = property(input.voltage)
    unique inst vrm : {reg}
    net ({input}, {vrm}.vin)
    properties({vrm}.vout):
      voltage => v-out
    [vrm.vout, vrm.en]

public defn make-board-controller (rails:Tuple<Ref>) :
  inside pcb-module :
    val vm = make-voltage-monitor(rails)
    unique inst board-controller : {ocdb/microsemi/A2F200M3F-FGG256I/module}

    val n = length(rails)
    require mon:gpio[n] from {board-controller}
    for i in 0 to n do : net (mon[i].gpio, {vm}.out[i])

    board-controller

public pcb-module voltage-monitor (rail-voltages:Tuple<[Double,Double,Double]>) :
  port src : power 
  val n = length(rail-voltages)
  port out : pin[n]
  port rails : pin[n]

  ; Each monitor has 6 ports so create enough of them
  var num-mon = (n + 6 - 1) / 6

  ; Instatiate a group of MAX1606X voltage monitors
  inst mon : {ocdb/maxim/MAX1606x/component}[num-mon]

  for i in 0 to n do :
    properties(rails[i]):
      voltage => rail-voltages[i]
    val [chip-idx, chip-ref, mon-idx] = [i / 6, mon[i / 6], i % 6]

  ; Divide input to match voltage of MAX16061E
    ocdb/passive-circuits/make-voltage-divider(rails[i], chip-ref.in[mon-idx], src.gnd, [0.3 0.373 0.4], 1.0e-3)

    net (out[i], {chip-ref}.out[mon-idx])
    net (src.gnd, {chip-ref}.GND, {chip-ref}.PAD, {chip-ref}.TOL)
    net (src.vdd, {chip-ref}.VCC)

public defn make-voltage-monitor (rails:Tuple<Ref>):
  inside pcb-module :
    ; Extract voltage property to tuple of voltages.
    val rail-voltages = for r in rails map :
      property(r.voltage)
    unique inst voltage-monitor : {voltage-monitor(rail-voltages)}
    val n = length(rails)
    for i in 0 to n do :
      net ({voltage-monitor}.rails[i], {rails}[i])
    voltage-monitor


; Piecewise linear function
public deftype PWL
public defmulti get (f:PWL, x:Double) -> Double
public defn PWL (ps:Tuple<[Double,Double]>) -> PWL :
  new PWL :
    defmethod get (this, x:Double) :
      val n = length(ps)
      if x < ps[0][0] :
        ; println("Warning: PWL is extrapolating with zero-order hold")
        ps[0][1]
      else if x >= ps[0][0] and x <= ps[n - 1][0] :
        val i = for i in 0 to n find! :
          ps[i][0] >= x
        val j = for i in reverse(0 to n) find! :
          ps[i][0] <= x
        if i == j :
          ps[i][1]
        else :
          val dydx = (ps[i][1] - ps[j][1]) / (ps[i][0] - ps[j][0])
          dydx * (x - ps[j][0]) + ps[j][1]
      else if x > ps[n - 1][0] :
        ; println("Warning: PWL is extrapolating with zero-order hold")
        ps[n - 1][1]
      else  :
        fatal("Something is wrong in PWL with x = %_" % [x])

;[strip]
; Assign schematic and layout groups
; sch-lay-grp([[inst0] [i1 i2]])
public defn sch-lay-grp (mods:Tuple<Tuple<Ref>>) :
  inside pcb-module :
    val g-count = to-seq(0 to false)  
    for m in mods do :
      val g-name = Ref("g-sg-%_" % [next(g-count)])
      for r in m do :
        schematic-group({r}) = {g-name}
        layout-group({r}) = {g-name}
;[/strip]

; This function is used to create a package mapping from a PinSpec
public defn gen-symbol-map (ps:PinSpec, pkg:Ref) :
  inside pcb-component :
    make-pins(ps)
    assign-package(pkg, ps)
;[strip]
    make-box-symbol(ps)
;[/strip]

public defn apply-power-pin-params (vdd:Double, rated-voltage:Tuple<Double>) :
  inside properties:
    power-pin => true
    rated-voltage => rated-voltage
    vdd => vdd

public defn apply-digital-io-params (rated-voltage:[Double,Double], vil:Double vih:Double vol:Double voh:Double) :
  inside properties:
    digital-io => true
    type => "io"
    rated-voltage => rated-voltage
    vil => vil
    vih => vih
    vol => vol
    voh => voh

public defn apply-lvds-params (rated-voltage:[Double,Double], vol:Double, voh:Double, vo-diff:[Double,Double,Double] vo-cm:[Double,Double,Double] vi-diff:[Double,Double,Double] vi-cm:[Double,Double,Double]) :
  inside properties:
    lvds => true
    rated-voltage => rated-voltage 
    voh => voh 
    vol => vol 
    vo-diff => vo-diff 
    vo-cm   => vo-cm   
    vi-diff => vi-diff 
    vi-cm   => vi-cm   


;================
; Check utilities
;================
; User defined pass that gets run at end of design pipeline
public pcb-check final-pass ():
  ; println("Final pass")
  defn propogate-voltage (n:NetStmt) :
    val supply-pin  = for p in refs(n) find : has-property?(p.voltage)
    if supply-pin is Ref :
      val sp = supply-pin as Ref
      if has-property?(sp.voltage) : 
        val v = property(sp.voltage)
        for p in refs(n) do :
          if has-property?(p.supply-pin) :
            if property(p.voltage) != v :
              println("Incompatible supply voltages on same net.")
          else :
            inside pcb-module:
              properties({p}):
                voltage => v
  for n in nets(self) do :
    propogate-voltage(n)

public defn check-design () :
  inside pcb-module:
    check final-pass()

    for (instance in all-component-instances(self)) do :
      properties({instance}):
        temperature => DESIGN-TEMPERATURE
      ; Check components
      if has-property?(instance.resistor) :
        check resistor-check(instance)
      if has-property?(instance.capacitor) :
        check capacitor-check(instance)

    ; Check pins
      for p in ports(instance) do :
        if has-property?(p.power-pin) :
          check power-pin(p)

    check io()

public defn connect-floating-inputs-to-gnd ():
  inside pcb-module :
    for i in all-component-instances(self) do :
      for p in all-pins(i) do :
        ; println("Is %_ connected? %_" % [p, connected?(p)])
        if not connected?(p) and
           has-property?(p.digital-io) and
           property(p.type) == "i" :
          println("Connecting floating input %_ to gnd." % [p])
          net ({p}, gnd)

public defn generate-power () :
  println("JITPCB: Generating power system.")
  inside pcb-module :
    for i in all-component-instances(self) do :
      for p in all-pins(i) do :
        if has-property?(p.power-request) :
          val [v a n] = property(p.power-request)
          within (rail) = make-load("Load", v, a, n) :
            net ({p}, {pos(rail)})
            net ({property(p.gnd-ref)}, {neg(rail)})

    for i in all-component-instances(self) do :
      for p in all-pins(i) do :
        if has-property?(p.power-input) :
          generate-power-system(property(p.power-input), OPERATING-TEMPERATURE[1], p, property(p.gnd-ref))

public defn set-power-source (pos:Ref, neg:Ref, v-in:Double):
  inside pcb-module:
    properties({pos}):
      power-input => v-in
      gnd-ref => #R({neg})

;public defn expose-pin (port:Ref, comp-pin:Ref) :
;  inside pcb-module :
;    pin {port}
;    net ({port}, comp-pin) 

