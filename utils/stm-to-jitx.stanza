#use-added-syntax(jitx)
defpackage ocdb/utils/stm-to-jitx:
  import core
  import collections
  import json
  import jitx
  import jitx/commands

  import ocdb/utils/bundles
  import ocdb/utils/property-structs

  import ocdb/utils/stm
  import ocdb/scripts/cubemx-importer-utils
  import ocdb/components/st-microelectronics/stm-api

;=========================================
;============== STM to JITX ==============
;=========================================

defn stm-to-jitx (generic-pin:STMGenericPin) -> GenericPin :
  GenericPin(stm-to-jitx(max-voltage(generic-pin)), rated-esd(generic-pin))

defn stm-to-jitx (power-pin:STMPowerPin) -> PowerPin :
  PowerPin(stm-to-jitx(recommended-voltage(power-pin)))

defn stm-to-jitx (voltage-limits:STMVoltageLimits) -> Toleranced :
  min-max(min-val(voltage-limits), max-val(voltage-limits))

defn has-power-props? (p:STMPinPropertiesRow) :
  val is-gnd? = prefix?(upper-case $ to-string(pin(p)), "VSS")
  power-props?(p) and not is-gnd?

;Generate pin-properties inside of a component.
public defn to-jitx-pin-properties (pin-properties:STMPinProperties) -> HashTable<Ref, Ref> :
  inside pcb-component :
    val generic-props = stm-to-jitx $ generic-pin(pin-properties)
    val power-props = stm-to-jitx $ power-pin(pin-properties)
    
    ;Determine if the pads numeric (Double -> Int) or named (Ref -> String).
    val numeric-pads? = any?({pad(_) is Int}, rows(pin-properties))
    val named-pads? = any?({pad(_) is Ref}, rows(pin-properties))
    
    ;If the pads are neither or both, then we are using malformed data.
    if numeric-pads? and named-pads? :
      fatal("Generated a micro-controller with both Int and Ref pads.") 
    if not numeric-pads? and not named-pads? :
      fatal("Generated a micro-controller without pads.") 
    
    ; We need to compile a list of reused pad to pin mappings.
    val pad-mappings = HashTable-init<Ref|Int, Vector<Ref>>(Vector<Ref>{})
    defn check-pad (pad:Ref|Int, pin:Ref) :
      add(pad-mappings[pad], pin)
      length(pad-mappings[pad]) == 1

    ;Generate the pin-properties.
    ;Cases are split between Int and Ref pads, and across generic and power properties usages.
    pin-properties : 
      [ pin:Ref | pads : (Ref|Int) ... | side:Dir | generic-pin:GenericPin | power-pin:PowerPin | bank:Ref ]
      for row in rows(pin-properties) do : 
        val pin-ref  = pin(row)
        val pad-ref  = pad(row)
        val bank-ref = 
          match(bank?(row)) :
            (one:Ref)    : one
            (none:False) : Ref(`Other)

        if check-pad(pad(row), pin(row)) : 
          match(generic-props?(row), has-power-props?(row)) :
            (g:True,  p:True) :
              [(pin-ref) | (pad-ref) | side(row) | generic-props | power-props | (bank-ref) ]
            (g:True,  p:False) :
              [(pin-ref) | (pad-ref) | side(row) | generic-props | -           | (bank-ref) ]
            (g:False, p:True) :
              [(pin-ref) | (pad-ref) | side(row) | -             | power-props | (bank-ref) ]
            (g:False, p:False) :
              [(pin-ref) | (pad-ref) | side(row) | -             | -           | (bank-ref) ]
         
    to-hashtable<Ref, Ref> $ 
      for shared in values(pad-mappings) seq-cat : 
        var root: Ref|False = false
        for pin in shared seq : 
          if root is False:
            root = pin
          pin => (root as Ref)

;Generate all bundles and store them in a table indexed by name.
public defn to-jitx-bundles (bundles:Tuple<STMBundle>) -> HashTable<String, Bundle> :
  val bundle-table = HashTable<String, Bundle>()
  inside pcb-component :
    for bundle-name in map(name, bundles) do :
      pcb-bundle b :
        name = bundle-name
        pin p
      bundle-table[bundle-name] = b
  bundle-table

;Generate all support statements inside of a component which will include bundles from bundle-table.
public defn to-jitx-supports (supports:Tuple<STMSupports>,
                              bundle-table:HashTable<String, Bundle>,
                              pin-name-table:HashTable<Ref, Ref>) -> False :
  defn lookup-pin (pin-name:Ref) :
    match(get?(pin-name-table, pin-name)) : 
      (r:Ref): r
      (f:False): pin-name
  
  ;Generate a supports statement for a bundle with the given mappings.
  defn generate-support (b:Bundle, mappings:Tuple<STMSupportMapping>) :
    inside pcb-component :
      supports b :
        for mapping in mappings do :
          ;Left hand side of the mapping is the bundle pin.
          val key = dot(b, bundle-pin(mapping))
          ;Right hand side of the mapping is a local or required pin.
          val value = match(require(mapping)): 
            (req:False): dot(self, lookup-pin(pin(mapping)))
            (req:String):
              require p0: bundle-table[req]
              dot(p0, lookup-pin(pin(mapping)))
          key => value

  ;Generate a supports statement for a bundle b with the given mappings.
  ;There are two options, the first option acts as normal while the second option requires b2.
  defn generate-support (b1:Bundle, b2:Bundle, mappings:Tuple<STMSupportMapping>) :
    inside pcb-component :
      supports b1 :
        option :
          for mapping in mappings do :
            ;Left hand side of the mapping is the bundle pin.
            val key = dot(b1, bundle-pin(mapping))
            ;Right hand side of the mapping is a local or required pin.
            val value = match(require(mapping)): 
              (req:False): 
                dot(self, lookup-pin(pin(mapping)))
              (req:String): 
                require p0: bundle-table[req]
                dot(p0, lookup-pin(pin(mapping)))
            key => value
        option :
          require p : b2
          for mapping in mappings do :
            val bundle-pin-name = bundle-pin(mapping)
            ;Left hand side of the mapping is the bundle pin.
            val key = dot(b1, bundle-pin-name)
            ;Right hand side of the mapping is a required pin from the alternate bundle.
            val value = dot(p, bundle-pin-name)
            key => value
  
  for support in supports do :
    val supported-bundle = bundle(support)
    val options = qsort(options(supported-bundle))
    val bundle-name = name(supported-bundle)
    val bundle:Bundle|[Bundle, Bundle] =
      match(get?(bundle-table, bundle-name)) :
        (b:Bundle) :
          b
        (f:False) :
          get-bundle-by-name(bundle-name, options)
    match(bundle) :
      (b:Bundle) : generate-support(b, mappings(support))
      ([b1, b2]:[Bundle, Bundle]) : generate-support(b1, b2, mappings(support))

;Generate a module that accepts user options and instantiates the given component.
public defn mcu-module (component:Instantiable) -> (Tuple<KeyValue<Symbol,?>> -> Instantiable) :
  pcb-module module (options:Tuple<KeyValue<Symbol,?>>) :
    schematic-group(self) = stm
    val settings = Settings(DEFAULT-SETTINGS)
    for entry in options do :
      settings[key(entry)] = value(entry)
      
    public inst mcu : component
    
    connect-stm(mcu, settings)
  module
