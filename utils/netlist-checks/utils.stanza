#use-added-syntax(jitx)
defpackage ocdb/utils/netlist-checks/utils :
  import core
  import collections
  import jitx
  import jitx/commands

public var CATEGORY = "Netlist Checks"
public defn context (obj:JITXObject) : 
  val ref = ref(obj)
  val i   = containing-instance!(obj)
  "%_" % [ ref ]

public defn all-populated-pins (module:JITXObject) -> Tuple<Pin> :
  populated-components(module)
    $> seq-cat{pins, _}
    $> to-tuple
    $> {_ as Tuple<Pin>}

; Returns component instances not marked DNP
public defn populated-components (module:JITXObject) -> Tuple<JITXObject> : 
  component-instances(module) 
    $> filter{{not do-not-populate?(_)}, _}
    $> to-tuple

; Retrieve the instance of an object, assuming it exists
public defn containing-instance! (obj:JITXObject) -> Instance :
  containing-instance(obj) as Instance

; A table of connected groups (global nets)
public defstruct Connections :
  connected-groups:Tuple<Tuple<Pin>>
  non-connected-pins:Tuple<Pin>

; Construct the Connections table from a module
public defn connections (module:JITXObject) -> Connections :
  val visited-connections = HashSet<Pin>()
  val connected-groups    = Vector<Tuple<Pin>>()
  val non-connected-pins  = Vector<Pin>()

  for p in all-populated-pins(module) do :
    if visited-connections[p] :
      None()
    else :
      val connections = connected-pins(p)
      if empty?(connections) :
        add(non-connected-pins, p)
      else :
        add-all(visited-connections, connections)
        val connected-group = to-tuple $ cat([p], connections)
        add(connected-groups, connected-group)

  Connections(to-tuple(connected-groups),
              to-tuple(non-connected-pins))

; A single digital pin and its property
public defstruct DigitalPin <: Equalable :
  pin: Pin
  prop: ?

public defmethod equal? (p1: DigitalPin, p2: DigitalPin) -> True|False :
  pin(p1) == pin(p2)

; A table of different digital pins in a netlist
public defstruct DigitalPinCategories :
  ios:Tuple<DigitalPin>
  inputs:Tuple<DigitalPin>
  outputs:Tuple<DigitalPin>
  all:Tuple<Pin>

; Construct the categorized pin table
public defn categorize-digital-pins (pins: Seqable<Pin>) -> DigitalPinCategories :
  val ios     = Vector<DigitalPin>()
  val inputs  = Vector<DigitalPin>()
  val outputs = Vector<DigitalPin>()

  for p in pins do :
    ; TODO: Checking that voltage propagation is correct for collector check, can remove later
    val io? = property?(p.digital-io)
    val i?  = property?(p.digital-input)
    val o?  = property?(p.digital-output)

    var count = 0
    if not empty?(io?) :
      add(ios, DigitalPin(p, value! $ io?))
      count = count + 1
    if not empty?(i?) :
      add(inputs, DigitalPin(p, value! $ i?))
      count = count + 1
    if not empty?(o?) :
      add(outputs, DigitalPin(p, value! $ o?))
      count = count + 1

    ; TODO: re-add this check
    ; if count != 0 :
    ;   #CHECK(
    ;     condition = count == 1,
    ;     name = NAME
    ;     description = DESCRIPTION
    ;     category = CATEGORY
    ;     subcheck-description = 
    ;       "Check that io pins exactly one digital i.o property (`digital-input`, `digital-output`, `digital-io`)"
    ;     pass-message = "%_ has a single digital i/o property" 
    ;       % [context(p)],
    ;     fail-message = "%_ has multiple digital i/o properties. `digital-io` = %_, `digital-input` = %_, `digital-output` = %_" 
    ;       % [context(p), io?, i?, o?],
    ;     locators = [p])

  DigitalPinCategories(to-tuple(ios),
                       to-tuple(inputs),
                       to-tuple(outputs),
                       to-tuple(pins))

