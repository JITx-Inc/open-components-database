#use-added-syntax(jitx)
defpackage ocdb/utils/netlist-checks/power-states :
  import core
  import collections
  import jitx
  import jitx/commands
  import lang-utils
  import ocdb/utils/netlist-checks/utils
  import ocdb/utils/connections

public defn check-power-states (module:JITXObject, netlist:GlobalNetList) :
  inside pcb-module :
    check power-states(module, netlist)

doc: "This check will make sure that components connected to each other \
      over digital-io have matching power states, that is to say if a   \
      component has the same named power state as something it is       \
      connected to, this checks that they are both powered on or off.   \
                                                                        \
      - module: the module to check."
public pcb-check power-states (module:JITXObject, netlist:GlobalNetList) :
  for net in nets(netlist) do :
    val pin-categories = categorize-digital-pins(pins(net))
    val digital-pins = to-tuple $ cat-all([inputs(pin-categories),
                                           outputs(pin-categories),
                                           ios(pin-categories)])

    for p in seq(pin, digital-pins) do :
      #CHECK(condition = has-property?(p.power-states)
             name        = "Check Power States"
             description = "Checks that all i/o pins have power states"
             category    = "power-states"
             subcheck-description = "Check that a pin has power states"
             pass-message = "%_ has a valid .power-states property" % [context(p)]
             fail-message = "%_ is missing the .power-states property" % [context(p)]
             locators = [p])

    val condition? = all-equal? $
      for digital-pin in digital-pins seq :
        property(pin(digital-pin).power-states)

    #CHECK(condition    = condition?
           name        = "Power States"
           description = "Checks that all components have matching power states."
           category    = "power-states"
           subcheck-description = "Checking power states match on connected pins"
           pass-message = "Connected pins %, have matching power states" 
            % [seq(context{pin(_)}, digital-pins)]
           fail-message = "Connected pins %, do not have matching power states"  
            % [seq(context{pin(_)}, digital-pins)]
           locators = to-tuple(seq(pin, digital-pins)))
