#use-added-syntax(jitx)
defpackage ocdb/utils/bundles :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults

defn diff-pair-pins () :
  inside pcb-bundle:
    pin N
    pin P

public pcb-bundle rtd :
  port N : pin[2]
  port P : pin[2]

public pcb-bundle diff-pair :
  diff-pair-pins()

public pcb-bundle lvds : 
  diff-pair-pins()

public pcb-bundle SPST :
  pin p
  pin t

public pcb-bundle power :
  pin vdd
  pin gnd

public pcb-bundle fpga-diff : 
  diff-pair-pins()

public pcb-enum ocdb/utils/bundles/JTAGPins :
  JTAG-TRSTN

public pcb-bundle jtag (pins:Tuple<ocdb/utils/bundles/JTAGPins>):
  pin tck
  pin tdi
  pin tdo
  pin tms
  for p in pins do :
    switch(p) :
      JTAG-TRSTN : make-pin(`trstn)

public defn jtag ():
  jtag([JTAG-TRSTN])

public pcb-bundle gpio :
  pin gpio

public pcb-bundle timer :
  pin timer

public pcb-bundle adc :
  pin adc

public pcb-bundle dac :
  pin dac

public pcb-bundle reset :
  pin reset

public pcb-bundle i2c :
  pin sda
  pin scl

public pcb-bundle can :
  pin canh
  pin canl

public pcb-bundle can-interface :
  pin rx
  pin tx

public pcb-enum ocdb/utils/bundles/SWDPins :
  SWD-SWO
  SWD-TRACESWO

public pcb-bundle swd (pins:Tuple<ocdb/utils/bundles/SWDPins>):
  pin swdio
  pin swdclk
  for p in pins do :
    switch(p) :
      SWD-SWO : make-pin(`swo)
      SWD-TRACESWO : make-pin(`traceswo)

public defn swd ():
  swd([])
      
public pcb-enum ocdb/utils/bundles/UARTPins :
  UART-DTR
  UART-CTS
  UART-DCD
  UART-RI
  UART-DST
  UART-RTS
  UART-CK
  UART-DE
  UART-CS
  UART-RX
  UART-TX

public pcb-bundle uart (pins:Tuple<UARTPins>) :
  for p in pins do :
    switch(p) :
      UART-DTR : make-pin(`dtr)
      UART-CTS : make-pin(`cts)
      UART-DCD : make-pin(`dcd)
      UART-RI  : make-pin(`ri)
      UART-DST : make-pin(`dst)
      UART-RTS : make-pin(`rts)
      UART-CK : make-pin(`ck)
      UART-DE : make-pin(`de)
      UART-CS : make-pin(`cs)
      UART-RX : make-pin(`rx)
      UART-TX : make-pin(`tx)

public defn uart ():
  uart([UART-RX, UART-TX])

public pcb-bundle usart (pins:Tuple<ocdb/utils/bundles/UARTPins>) :
  for p in pins do :
    switch(p) :
      UART-DTR : make-pin(`dtr)
      UART-CTS : make-pin(`cts)
      UART-DCD : make-pin(`dcd)
      UART-RI  : make-pin(`ri)
      UART-DST : make-pin(`dst)
      UART-RTS : make-pin(`rts)
      UART-CK : make-pin(`ck)
      UART-DE : make-pin(`de)
      UART-CS : make-pin(`cs)
      UART-RX : make-pin(`rx)
      UART-TX : make-pin(`tx)

public defn usart ():
  usart([UART-RX, UART-TX, UART-CK])

public pcb-enum ocdb/utils/bundles/SPIPins :
  SPI-SDO
  SPI-SDI
  SPI-CS
  SPI-CIPO
  SPI-COPI
  SPI-SDIO

public pcb-bundle spi  (pins:Tuple<SPIPins>):
  pin sck
  for p in pins do :
    switch(p) :
      SPI-SDI : make-pin(`sdi)
      SPI-SDO : make-pin(`sdo)
      SPI-CS  : make-pin(`cs)
      SPI-CIPO  : make-pin(`cipo)
      SPI-COPI  : make-pin(`copi)
      SPI-SDIO  : make-pin(`sdio)

; Most common spi bundle
public defn spi-peripheral () :
  spi([SPI-SDO SPI-SDI SPI-CS])

public defn spi-controller () :
  spi([SPI-COPI SPI-CIPO SPI-CS])

public pcb-bundle quad-spi :
  port sdio : pin[4]
  pin sck
  pin cs

public pcb-bundle usb-2-data :
  diff-pair-pins()

public pcb-bundle usb-2 :
  port data : usb-2-data
  port vbus : power
  pin id

public pcb-bundle usb-c :
  port data : usb-2-data[[1 2]]
  port vbus : power
  port cc : pin[[1 2]]
  port sbu : pin[[1 2]]
  port rx : diff-pair[[1 2]]
  port tx : diff-pair[[1 2]]

public pcb-bundle usb-c-full-bundle :
  pin VBUS
  pin CC1
  pin CC2
  pin DP1
  pin DN1
  pin DP2
  pin DN2
  pin SBU1
  pin SBU2
  pin GND
  pin shield
  pin SSTXP1
  pin SSTXN1
  pin SSRXP1
  pin SSRXN1
  pin SSRXP2
  pin SSRXN2
  pin SSTXP2
  pin SSTXN2
  
public pcb-bundle rgmii :
  port txd : pin[4]
  port rxd : pin[4]
  pin tx-clk
  pin tx-ctrl
  pin rx-clk
  pin rx-ctrl

public pcb-bundle ethernet-1000 :
  port mdi : diff-pair[4]

public pcb-bundle trd :
  port trd : diff-pair
  pin common

public pcb-bundle rgb-led :
  pin r
  pin g
  pin b
  pin a

public pcb-bundle crystal :
  pin in
  pin out

public pcb-bundle low-freq-oscillator :
  pin in
  pin out

public pcb-bundle high-freq-oscillator : 
  pin in
  pin out

public pcb-bundle rs485 :
  pin b
  pin a
  
public pcb-enum ocdb/utils/bundles/I2SPins :
  I2S-SDMI
  I2S-MCK

public pcb-bundle i2s  (pins:Tuple<ocdb/utils/bundles/I2SPins>):
  pin ck
  pin ws
  pin sdmo
  for p in pins do :
    switch(p) :
      I2S-SDMI : make-pin(`sdmi)
      I2S-MCK  : make-pin(`mck)

public defn i2s () :
  i2s([])

public pcb-bundle mipi-d-phy :
  port clk : diff-pair
  port data : diff-pair

; Dynamic lookup for simplicity
; Could pre-populate for performance at some point, if needed
public defn get-bundle-by-name (name:String, options:Tuple<String>) -> Bundle | [Bundle, Bundle] :
  switch(name) :
    ;============= Single Pin Bundles ===============
    "gpio"  : gpio
    "adc"   : adc
    "dac"   : dac
    "timer" : timer

    ;=============== Two Pin Bundles ================
    "low-freq-oscillator"  : low-freq-oscillator
    "high-freq-oscillator" : high-freq-oscillator
    "can-interface"        : can-interface
    "i2c"                  : i2c

    ;=============== 3+ Pin Bundles =================
    "quad-spi" : quad-spi

    ;========== Optionally Pinned Bundles ===========
    ;Collect the optional pins and pass them as Bundle arguments.
    "swd" : swd $
      for option in options map :
        switch(option) :
          "SWD-SWO" : SWD-SWO
          "SWD-TRACESWO" : SWD-TRACESWO
    "jtag" : jtag $
      for option in options map :
        switch(option) :
          "JTAG-TRSTN" : JTAG-TRSTN
    "i2s" : i2s $
      for option in options map :
        switch(option) :
          "I2S-MCK" : I2S-MCK
          "I2S-SDMI" : I2S-SDMI
    "uart" :
      val options =
        for option in options map :
          switch(option) :
            "UART-DTR" : UART-DTR
            "UART-CTS" : UART-CTS
            "UART-DCD" : UART-DCD
            "UART-RI" : UART-RI
            "UART-DST" : UART-DST
            "UART-RTS" : UART-RTS
            "UART-CK" : UART-CK
            "UART-DE" : UART-DE
            "UART-CS" : UART-CS
            "UART-RX" : UART-RX
            "UART-TX" : UART-TX
      [uart(options) usart(options)]
    "usart" :
      usart $
        for option in options map :
          switch(option) :
            "UART-DTR" : UART-DTR
            "UART-CTS" : UART-CTS
            "UART-DCD" : UART-DCD
            "UART-RI" : UART-RI
            "UART-DST" : UART-DST
            "UART-RTS" : UART-RTS
            "UART-CK" : UART-CK
            "UART-DE" : UART-DE
            "UART-CS" : UART-CS
            "UART-RX" : UART-RX
            "UART-TX" : UART-TX
    "spi" : spi $
      for option in options map :
        switch(option) :
          "SPI-SDO" : SPI-SDO
          "SPI-SDI" : SPI-SDI
          "SPI-CS" : SPI-CS
          "SPI-CIPO" : SPI-CIPO
          "SPI-COPI" : SPI-COPI
          "SPI-SDIO" : SPI-SDIO
    "spi-controller" :
      spi-controller()
    else :
      fatal("Bundle '%_' is not supported." % [name])

public defn get-bundle-by-name (name:String) -> Bundle | [Bundle, Bundle] :
  get-bundle-by-name(name, [])
