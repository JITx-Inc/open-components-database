#use-added-syntax(jitx)
defpackage ocdb/utils/passive-checks/utils :
  import core
  import collections
  import jitx
  import jitx/commands

doc:"Helper to create a context string for an object being checked."
public defn context (c:JITXObject) :
  "%_" % [ref(c)]

doc:"Category used by passive component checks."
public val CATEGORY = "Component Checks"

doc:"Make sure that a component has the correct properties."
public defn check-has-properties (name:String, 
                                  thing:JITXObject, 
                                  properties:Tuple<Symbol>) :
  val missing = 
    for prop in properties seq? :
      match(get-property?(thing, prop)) : 
        (one:One)   : None()
        (none:None) : One(prop)

  val condition = empty?(missing)
  val pass = "%_ has properties: %," % [context(thing), properties]
  val fail = "%_ is missing properties: %," % [context(thing), missing]

  #CHECK( condition   = condition
          name        = name
          locators    = [thing, originating-instantiable(thing)]
          description = "%_ data consistency" % [context(thing)]
          category    = "%_ (Data)" % [CATEGORY]
          subcheck-description = "%_ has properties %," % [context(thing), properties] 
          info-message = fail
          pass-message = pass )


doc:"Helper to check if a component has a property."
public defn has-prop-msg (condition: () -> Maybe<True|False>, 
                 instance: JITXObject,
                 prop: Symbol) :
  val context = context(instance)
  val [pass?, info-msg] = 
    match(condition()) :
      (one:One<True|False>) :
        if value(one) :
          [true, "%_ is has property `%_`" % [context, prop]]
        else :
          [false, "%_ is missing property `%_`" % [context, prop]]
      (n:None) :
        [true, "%_ does not require property `%_`" % [context, prop]]
  [pass?, "Component has property `%_`" % [prop] info-msg]
