#use-added-syntax(jitx)
defpackage ocdb/utils/connects :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/bundles
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import lang-utils

; [TODO]: remove has-pin? from here and clean up connect-spi
defn has-pin? (stm:JITXObject, pin-q:String) :
  val t = to-tuple $ for p in pins(stm) filter :
    substring?(to-string(ref(p)), pin-q)
  not empty?(t)

public defn ensure-bundle-port! (port:JITXObject, bundle:Bundle):
  defn handle-failure ():
    fatal("The port %_ is not of bundle %_." % [ref(port), name(bundle)])

  match(port-type(port)):
    (b?:Bundle):
      if b? != bundle:
        handle-failure()
    (_:?):
      handle-failure()

; Connect two i2c lines with a buffer. 
public defn connect-i2c-isolation (x:JITXObject,
                                   y:JITXObject,
                                   buffer:Instantiable) -> Instance :
  ensure-bundle-port!(x, i2c)
  ensure-bundle-port!(y, i2c)  
  inside pcb-module:
    inst buf: buffer
    net (x, buf.p[1])
    net (y, buf.p[2])
    buf

; Connect to i2c lines with a buffer, using a default component (TI ISO1540)
public defn connect-i2c-isolation (x:JITXObject, y:JITXObject) -> Instance :
  inside pcb-module:
    val buf = connect-i2c-isolation(x, y, ocdb/components/texas-instruments/ISO1540/component)
    property(buf.VCC1.requires-power) = true
    property(buf.VCC1.power-request)  = [3.3 0.3 0.05]
    buf
    
; Wrapper around connect-i2c-isolation for backwards compatibility
public defn connect-isolate (a:JITXObject, b:JITXObject) -> Instance :
  connect-i2c-isolation(a, b)

; Connect PHY using a default component (Marvell 8831510-A0-NNB2C000)
public defn connect-phy (x:JITXObject, y:JITXObject) -> Instance :
  ensure-bundle-port!(x, rgmii)
  ensure-bundle-port!(y, ethernet-1000)
  inside pcb-module:
    inst phy : ocdb/components/marvell/88E1510-A0-NNB2C000/module
    net (x, phy.rgmii)
    net (y.mdi, phy.mdi)
    schematic-group(phy) = phy
    phy

; Connect USB-2 over UART using FT232 USB to serial interface
public defn connect-ft232 (x:JITXObject, y:JITXObject) -> Instance :
  ensure-bundle-port!(x, usb-2)
  ensure-bundle-port!(y, uart([UART-DTR, UART-RTS, UART-RX, UART-TX]))
  inside pcb-module :
    inst xcvr : ocdb/components/future-designs/FT232RL/module
    net (x, xcvr.usb-2)
    net (y.tx, xcvr.uart.rx)
    net (y.rx, xcvr.uart.tx)
    net (y.dtr, xcvr.uart.dtr)
    net (y.rts, xcvr.uart.rts)
    
    schematic-group(xcvr) = xcvr
    xcvr

; Connect USB-2 over UART using CP2105 
public defn connect-cp2105 (usb:JITXObject, uart:JITXObject) -> Instance  :
  inside pcb-module :
    public inst xcvr : ocdb/components/si-labs/CP2105/module(true)
    net (usb, xcvr.usb-2)
    net (uart.tx,  xcvr.e-uart.rx)
    net (uart.rx,  xcvr.e-uart.tx)
    net (uart.dtr, xcvr.e-uart.dtr)
    net (uart.rts, xcvr.e-uart.rts)
    xcvr

; Connects a SPI controller to 1 or more peripherals, pulls gpio for peripherals[1..n] for cs
public defn connect-spi (base:JITXObject, controller:JITXObject, peripherals:Tuple<JITXObject>) :
  fatal("connect-spi(base, controller, peripherals) needs at least 1 peripheral to execute.")  when empty?(peripherals)
  inside pcb-module :
    for p in peripherals do :
      net (controller.sck p.sck)
      if has-pin?(p, "sdi") :
        net (controller.copi p.sdi)
      if has-pin?(p, "sdo") :
        net (controller.cipo p.sdo)
      if has-pin?(p, "copi") :
        net (controller.copi p.copi)
      if has-pin?(p, "cipo") :
        net (controller.cipo p.cipo)
    net (controller.cs peripherals[0].cs)
    if length(peripherals) > 1 :
      for i in peripherals[1 to length(peripherals)] do :
        require cs:gpio from base 
        net (cs.gpio i.cs)

; Connects a SPI controller to 1 or more peripherals, pulls gpio for peripherals[1..n] for cs
public defn connect-spi (controller:JITXObject, peripheral:JITXObject) :
  inside pcb-module :
    net (controller.sck peripheral.sck)
    if has-pin?(peripheral, "sdi") :
      net (controller.copi peripheral.sdi)
    if has-pin?(peripheral, "sdo") :
      net (controller.cipo peripheral.sdo)
    if has-pin?(peripheral, "copi") :
      net (controller.copi peripheral.copi)
    if has-pin?(peripheral, "cipo") :
      net (controller.cipo peripheral.cipo)
    net (controller.cs peripheral.cs)
