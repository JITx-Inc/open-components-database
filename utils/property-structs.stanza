#use-added-syntax(jitx)
defpackage ocdb/utils/property-structs :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/generator-utils
  import ocdb/utils/connections
  import lang-utils

public pcb-struct ocdb/utils/property-structs/OperatingPoint :
  peak-voltage:Toleranced
  peak-current:Toleranced

defmethod print (o:OutputStream, op:OperatingPoint) :
  print(o, "OperatingPoint(peak-voltage: %_, peak-current: %_)" % [
    peak-voltage(op),
    peak-current(op)
  ])

public pcb-struct ocdb/utils/property-structs/PowerRail :
  rail:JITXObject
  voltage:Toleranced

; Voltage on a net. library-name = voltage
public pcb-struct ocdb/utils/property-structs/NetVoltage :
  voltage:Toleranced

; === Pin Property Structs ===
; ============================

; Library property name: generic-pin
public pcb-struct ocdb/utils/property-structs/GenericPin :
  max-voltage:Toleranced|RelativeVoltage    ; Maximum voltage that can be applied to pin (V)
  rated-esd:Double                          ; Rated ESD voltage (V)

; Library property name: power-supply-pin
public pcb-struct ocdb/utils/property-structs/PowerSupplyPin :
  supply-voltage:Toleranced
  max-current:Double

; Library property name: power-pin
public pcb-struct ocdb/utils/property-structs/PowerPin :
  recommended-voltage:Toleranced|RelativeVoltage
  
; Library property name: digital-input
public pcb-struct ocdb/utils/property-structs/DigitalInput :
  vil:Toleranced|RelativeVoltage    ; Range of voltages that will read as logic low (V)
  vih:Toleranced|RelativeVoltage    ; Range of voltages that will read as logic high (V)
  vdd-pin:JITXObject                ; Pin that powers the high reference 
  gnd-pin:JITXObject                ; Pin that powers the low reference
  leakage-current:Double            ; Leakage current in Amps

; Library property name: digital-output
public pcb-struct ocdb/utils/property-structs/DigitalOutput :
  driver:LogicFamily          ; Driver model of the output
  tristateable:True|False     ; Can this pin be put in a high-impedance mode?
  vdd-pin:JITXObject          ; Pin that powers the high reference 
  gnd-pin:JITXObject          ; Pin that powers the low reference

; Library property name: digital-io
public pcb-struct ocdb/utils/property-structs/DigitalIO :
  driver:LogicFamily                ; Driver model of the output
  vil:Toleranced|RelativeVoltage    ; Range of voltages that will read as logic low (V)
  vih:Toleranced|RelativeVoltage    ; Range of voltages that will read as logic high (V)  gnd-pin:JITXObject          ; Pin that powers the driver low reference
  vdd-pin:JITXObject                ; Pin that powers the high reference 
  gnd-pin:JITXObject                ; Pin that powers the low reference
  leakage-current:Double            ; Leakage current in Amps

; Library property name: reset-pin
public pcb-struct ocdb/utils/property-structs/ResetPin :
  input:DigitalInput

; === Logic Property Structs ===
; ==============================
deftype LogicFamily <: jitx/value/JITXValue&Equalable&Hashable
public pcb-struct ocdb/utils/property-structs/CMOSOutput <: LogicFamily :
  vol:Toleranced|RelativeVoltage
  voh:Toleranced|RelativeVoltage

public pcb-struct ocdb/utils/property-structs/TTLOutput <: LogicFamily :
  vol:Toleranced|RelativeVoltage
  voh:Toleranced|RelativeVoltage

; vol: Voltage Output Low
; iol: Current Output Low
public pcb-struct ocdb/utils/property-structs/OpenCollector <: LogicFamily :
  vol:Toleranced|RelativeVoltage
  iol:Double

; === Oscillator Property Structs ===
; ===================================
; Library property name: crystal-oscillator
public pcb-struct ocdb/utils/property-structs/CrystalOscillator :
  ; Max critical gain not given - determine from parameters: Max critical gain for oscillator: 4*ESR*(2*PI*F)^2*(c-shunt + c-load)^2
  max-critical-gain:Double ; Critical gain of amplifier in A/V
  drive-level:Double ; Drive level of amplifier in Watts 
  c-pin:Double ; Internal capacitance in Farads
  frequency-tolerance:Double ; Allowable variation of frequency in Hertz
  frequency:Double ; Target frequency in Hertz

; === Component Property Structs ===
; ==================================

; Library property name: rated-temperature : Toleranced

; Library property name: crystal-resonator
public pcb-struct ocdb/utils/property-structs/CrystalResonator :
  load-capacitance:Double     ; Load capacitance in Farads                
  shunt-capacitance:Double    ; Shunt capacitance in Farads                
  motional-capacitance:Double ; Motional capacitance in Farads                    
  ESR:Double                  ; Series resistance of crystal in Ohms  
  frequency:Double            ; Fundamental frequency in Hz        
  frequency-tolerance:Double  ; Frequency tolerance in Hz                
  max-drive-level:Double      ; Max drive level in W              


; public defn apply-lvds-params (obj:JITXObject, vol:Double, voh:Double, vo-diff:[Double, Double, Double] vo-cm:[Double, Double, Double] vi-diff:[Double, Double, Double] vi-cm:[Double, Double, Double]) :
;   inside pcb-module :
;     property(obj.lvds) = true
;     property(obj.voh) = voh 
;     property(obj.vol) = vol 
;     property(obj.vo-diff) = vo-diff 
;     property(obj.vo-cm) = vo-cm   
;     property(obj.vi-diff) = vi-diff 
;     property(obj.vi-cm) = vi-cm   

; === Property Struct Printers ===
; ================================
;[TODO] Write print methods for other property structs.

doc:"A well-defined state for a device's power, for example hibernation. \
                                                                         \
     - name: the name of the state                                       \
     - powered?: true when the pin/component is powered on in the state, \
                 false if it is not."
public pcb-struct ocdb/utils/property-structs/PowerState : 
  name:String,
  powered?:True|False
defmethod print (o:OutputStream, p:PowerState) : 
  print(o, "PowerState(name:%_, powered?:%_)" % [name(p), powered?(p)])

doc:"A helper function to setup the power states of a component or pin."
public defn set-power-states (obj:JITXObject, states:Tuple<KeyValue<String, True|False>>) : 
  val states* = map(PowerState{key(_0), value(_0)}, states)
  set-property(obj, `power-states, states*)

;==============================================================================
;============================== Relative Voltages =============================
;==============================================================================
doc:"A RelativeVoltage represents a relationship between a pin's voltage rating \
     and the voltage on another object."
public deftype RelativeVoltage <: Equalable&Hashable&jitx/value/JITXValue

doc:"Compute the voltage."
public defmulti resolve (rv:RelativeVoltage, v:Toleranced) -> Toleranced

doc:"The object this voltage is relative to."
public defmulti relative (rv:RelativeVoltage) -> JITXObject

doc:"Check if the relative voltage has a known absolute voltage."
public defn has-absolute-voltage? (rv:RelativeVoltage) -> True|False :
  get-property?(relative(rv), `voltage) is One

doc:"Return the absolute voltage of a RelativeVoltage structure."
public defn absolute-voltage (rv:RelativeVoltage) -> Toleranced :
  val nv = get-property?(relative(rv), `voltage)
  match(nv:One<Toleranced>) :
    resolve(rv, value(nv))
  else :
    fatal("%_ is missing a voltage property. run-final-passes(...) must be called" % [ref(relative(rv))])

doc:"Given a Toleranced|RelativeVoltage, return the absolute voltage."
public defn eval-voltage (v:Toleranced|RelativeVoltage) -> Toleranced :
  match(v) :
    (t:Toleranced) : t
    (rv:RelativeVoltage) : absolute-voltage(rv)


doc:"A FractionalVoltage represents a voltage rating that is some factor * voltage on another pin."
public pcb-struct ocdb/utils/property-structs/FractionalVoltage <: RelativeVoltage :
  factor:Double|Toleranced
  pin:JITXObject

doc:"An OffsetVoltage represents a voltage rating that is factor + voltage on another pin."
public pcb-struct ocdb/utils/property-structs/OffsetVoltage <: RelativeVoltage :
  factor:Double|Toleranced
  pin:JITXObject

defmethod print (o:OutputStream, v:OffsetVoltage) :
  print(o, "%_ volts relative to %_" % [factor(v), pin(v)])

doc:\<doc>
  A DualOffsetVoltage is a voltage rating that is equal to \
     
  ```stanza
    min-max(min-value(voltage) - factor-min, 
            max-value(voltage) + factor-max)
  ```

<doc>                  
public pcb-struct ocdb/utils/property-structs/DualOffsetVoltage <: RelativeVoltage :
  factor-min:Double
  factor-max:Double
  pin:JITXObject

doc:"A PwlVoltage is a relative voltage that uses piecewise-linear (`PWL`) functions \
     to represent the min and max values."
public pcb-struct ocdb/utils/property-structs/PWLVoltage <: RelativeVoltage :
  pwl-min:PWL
  pwl-max:PWL
  pin:JITXObject

defmethod resolve (rv:FractionalVoltage, v:Toleranced) -> Toleranced :
  factor(rv) * v

defmethod resolve (rv:OffsetVoltage, v:Toleranced) -> Toleranced :
  factor(rv) + v

defmethod resolve (rv:DualOffsetVoltage, v:Toleranced) -> Toleranced :
  val min = min-value(v) + factor-min(rv)
  val max = max-value(v) + factor-max(rv)
  jitx/min-max(min, max)

defmethod resolve (rv:PWLVoltage, v:Toleranced) -> Toleranced :
  jitx/min-max(pwl-min(rv)[min-value(v)], 
               pwl-max(rv)[min-value(v)] )

defmethod relative (rv:FractionalVoltage) : pin(rv)
defmethod relative (rv:OffsetVoltage) : pin(rv)
defmethod relative (rv:DualOffsetVoltage) : pin(rv)
defmethod relative (rv:PWLVoltage) : pin(rv)
