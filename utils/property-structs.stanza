#use-added-syntax(jitx)
defpackage ocdb/property-structs:
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/generator-utils
  import ocdb/tolerance

public pcb-struct ocdb/property-structs/OperatingPoint :
  peak-voltage:Toleranced
  peak-current:Toleranced

public pcb-struct ocdb/property-structs/PowerRail :
  rail:JITXObject
  voltage:Toleranced

; === Pin Property Structs ===
; ============================

; Library property name: generic-pin
public pcb-struct ocdb/property-structs/GenericPin :
  max-voltage:Toleranced
  rated-esd:Double

; Library property name: power-supply-pin
public pcb-struct ocdb/property-structs/PowerSupplyPin :
  supply-voltage:Toleranced|Double
  max-current:Double

; Library property name: power-pin
public pcb-struct ocdb/property-structs/PowerPin :
  recommended-voltage:Toleranced
  
; Library property name: digital-input
public pcb-struct ocdb/property-structs/DigitalInput :
  vil:Double
  vih:Double
  vdd-pin:JITXObject
  gnd-pin:JITXObject
  leakage-current:Double

; Library property name: digital-output
public pcb-struct ocdb/property-structs/DigitalOutput :
  driver:LogicFamily
  tristateable:True|False
  vdd-pin:JITXObject
  gnd-pin:JITXObject

; Library property name: digital-io
public pcb-struct ocdb/property-structs/DigitalIO :
  driver:LogicFamily
  vil:Double
  vih:Double
  vdd-pin:JITXObject
  gnd-pin:JITXObject
  leakage-current:Double

; Library property name: reset-pin
public pcb-struct ocdb/property-structs/ResetPin :
  input:DigitalInput

; === Logic Property Structs ===
; ==============================
deftype LogicFamily <: jitx/client/JITXValue
public pcb-struct ocdb/property-structs/CMOSOutput <: LogicFamily :
  vol:Toleranced
  voh:Toleranced

public pcb-struct ocdb/property-structs/TTLOutput <: LogicFamily :
  vol:Toleranced
  voh:Toleranced

; vol: Voltage Output Low
; iol: Current Output Low
public pcb-struct ocdb/property-structs/OpenCollector <: LogicFamily :
  vol:Toleranced
  iol:Double

; === Oscillator Property Structs ===
; ===================================
; Library property name: crystal-oscillator
public pcb-struct ocdb/property-structs/CrystalOscillator :
  ; Max critical gain not given - determine from parameters: Max critical gain for oscillator: 4*ESR*(2*PI*F)^2*(c-shunt + c-load)^2
  max-critical-gain:Double ; Critical gain of amplifier in A/V
  drive-level:Double ; Drive level of amplifier in Watts 
  c-pin:Double ; Internal capacitance in Farads
  frequency-tolerance:Double ; Allowable variation of frequency in Hertz
  frequency:Double ; Target frequency in Hertz

; === Component Property Structs ===
; ==================================

; Library property name: rated-temperature
public pcb-struct ocdb/property-structs/RatedTemperature :
  operating-temperature : Toleranced

; Library property name: crystal-resonator
public pcb-struct ocdb/property-structs/CrystalResonator :
  load-capacitance:Double     ; Load capacitance in Farads                
  shunt-capacitance:Double    ; Shunt capacitance in Farads                
  motional-capacitance:Double ; Motional capacitance in Farads                    
  ESR:Double                  ; Series resistance of crystal in Ohms  
  frequency:Double            ; Fundamental frequency in Hz        
  frequency-tolerance:Double  ; Frequency tolerance in Hz                
  max-drive-level:Double      ; Max drive level in W              


; public defn apply-enable-pin-params (obj:JITXObject, enable:JITXObject) :
;   inside pcb-module :
;     property(obj.digital-io) = true
;     property(obj.type) = "i"
;     property(obj.enable-pin) = true
;     property(obj.active-ref) = enable

; public defn apply-lvds-params (obj:JITXObject, vol:Double, voh:Double, vo-diff:[Double,Double,Double] vo-cm:[Double,Double,Double] vi-diff:[Double,Double,Double] vi-cm:[Double,Double,Double]) :
;   inside pcb-module :
;     property(obj.lvds) = true
;     property(obj.voh) = voh 
;     property(obj.vol) = vol 
;     property(obj.vo-diff) = vo-diff 
;     property(obj.vo-cm) = vo-cm   
;     property(obj.vi-diff) = vi-diff 
;     property(obj.vi-cm) = vi-cm   

; === Property Struct Printers ===
; ================================
;[TODO] Write print methods for other property structs.
defmethod print (o:OutputStream, r:RatedTemperature) :
  print(o, operating-temperature(r))

doc:"A well-defined state for a device's power, for example hibernation. \
                                                                         \
     - name: the name of the state                                       \
     - powered?: true when the pin/component is powered on in the state, \
                 false if it is not."
public pcb-struct ocdb/property-structs/PowerState <: Equalable&Hashable : 
  name:String,
  powered?:True|False
defmethod equal? (l:PowerState, r:PowerState) : 
  name(l)     == name(r) and 
  powered?(l) == powered?(r)
defmethod hash (p:PowerState) : 
  hash([name(p), powered?(p)])
defmethod print (o:OutputStream, p:PowerState) : 
  print(o, "PowerState(name:%_, powered?:%_)" % [name(p), powered?(p)])

doc:"A helper function to setup the power states of a component or pin."
public defn set-power-states (obj:JITXObject, states:Tuple<KeyValue<String, True|False>>) : 
  val states* = map(PowerState{key(_0), value(_0)}, states)
  set-property(obj, `power-states, states*)
