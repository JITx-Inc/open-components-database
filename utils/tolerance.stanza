#use-added-syntax(jitx)
defpackage ocdb/tolerance:
  import core
  import collections
  import math

; A generic value with some tolerance. May be offcenter (upper tolerance != lower tolerance)
public pcb-struct ocdb/tolerance/Toleranced:
  tol+:Double,
  tol-:Double,
  typ: Double,

defmethod print (o:OutputStream, t:Toleranced):
  println(o, "Toleranced(typ:%_, +:%_, -:%_)" % [nominal(t), plus(t), minus(t)])

; Create a tolerance value with the same tolerance in both directions
public defn Toleranced (value:Double, tolerance:Double) -> Toleranced:
  Toleranced(value, tolerance, tolerance)

; Create a tolerance with minimum, typical, and maximum
public defn min-typ-max (min:Double, typ:Double, max:Double) -> Toleranced:
  Toleranced(typ, typ - min, max - typ)

; Create a tolerance from percentages higher and lower
public defn tol% (tol+:Double, typ:Double, tol-:Double) -> Toleranced:
  val plus = tol+ * typ
  val minus = tol- * typ
  Toleranced(typ, plus, minus)

; Create a tolerance from differences higher and lower
public defn tol (tol+:Double, typ:Double, tol-:Double) -> Toleranced:
  Toleranced(typ, tol+, tol-)

; Return the upper tolerance, as a percentage
public defn tol+% (t:Toleranced) -> Double:
  tol+(t) / typ(t)

; Return the lower tolerance, as a percentage
public defn tol-% (t:Toleranced) -> Double:
  tol-(t) / typ(t)

; Return the max value
public defn max-value (t:Toleranced) -> Double:
  typ(t) + tol-(t)

; Return the min value
public defn min-value (t:Toleranced) -> Double:
  typ(t) - tol-(t)

; Return the center of the value range
public defn center (t:Toleranced) -> Double:
  0.5 * (min-value(t) + max-value(t))

; Check if a value is within the tolerance's range.
public defn in-range? (t:Toleranced, value:Double) -> True|False:
  value >= mi-value(t) and value <= max-value(t)
 
 ; Return the difference between max and min of the toleranced values
public defn tolerance-range (t:Toleranced) -> Double:
  max-value(t) - min-value(t)
