#use-added-syntax(jitx)
defpackage ocdb/tolerance:
  import core
  import collections
  import math

; A generic value with some tolerance. May be off-center (upper tolerance != lower tolerance)
public pcb-struct ocdb/tolerance/Toleranced:
  typ: Double,
  tol+:Double,
  tol-:Double,

defmethod print (o:OutputStream, t:Toleranced):
  print(o, "Toleranced(%_ <= %_ <= %_)" % [min-value(t), typ(t), max-value(t)])

; Create a tolerance with minimum, typical, and maximum
public defn min-typ-max (min:Double, typ:Double, max:Double) -> Toleranced:
  val tol- = typ - min
  val tol+ = max - typ
  tol(typ, tol+, tol-)

; Create a tolerance from percentages higher and lower
public defn tol% (typ:Double, tol+:Double, tol-:Double) -> Toleranced:
  val check = min-typ-max(0.0, 0.5, 1.0)
  fatal("tol+ must be in range 0.0 <= tol+ <= 1.0") when not in-range?(check, tol+)
  fatal("tol- must be in range 0.0 <= tol- <= 1.0") when not in-range?(check, tol-)
  val plus  = tol+ * typ
  val minus = tol- * typ
  Toleranced(typ, plus, minus)

; Create a tolerance from differences higher and lower
public defn tol (typ:Double, tol+:Double, tol-:Double) -> Toleranced:
  Toleranced(typ, tol+, tol-)

; Create a tolerance with the same upper and lower tolerances
public defn tol (typ:Double, tol+-:Double) -> Toleranced:
  tol(typ, tol+-, tol+-)

; Returns the upper tolerance, as a percentage
public defn tol+% (t:Toleranced) -> Double:
  fatal("typ(Toleranced) must be nonzero to compute tol+%.") when typ(t) == 0.0
  tol+(t) / typ(t)

; Returns the lower tolerance, as a percentage
public defn tol-% (t:Toleranced) -> Double:
  fatal("typ(Toleranced) must be nonzero to compute tol-%.") when typ(t) == 0.0
  tol-(t) / typ(t)

; Returns the max value
public defn max-value (t:Toleranced) -> Double:
  typ(t) + tol+(t)

; Returns the min value
public defn min-value (t:Toleranced) -> Double:
  typ(t) - tol-(t)

; Returns the center of the value range
public defn center (t:Toleranced) -> Double:
  min-value(t) + 0.5 * (max-value(t) - min-value(t))

; Check if a value is within the tolerance's range.
public defn in-range? (t:Toleranced, value:Double) -> True|False:
  value >= min-value(t) and value <= max-value(t)
 
 ; Returns the difference between max and min of the toleranced values
public defn tolerance-range (t:Toleranced) -> Double:
  max-value(t) - min-value(t)
