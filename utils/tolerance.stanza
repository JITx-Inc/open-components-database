#use-added-syntax(jitx)
defpackage ocdb/tolerance:
  import core
  import collections
  import math

; A generic value with some tolerance. May be off-center (upper tolerance != lower tolerance)
; tol+/tol- are relative to typ and not absolute
public pcb-struct ocdb/tolerance/Toleranced:
  typ: Double,
  tol+:Double,
  tol-:Double,

defmethod print (o:OutputStream, t:Toleranced):
  print(o, "Toleranced(%_ <= %_ <= %_)" % [min-value(t), typ-value(t), max-value(t)])

; Create a tolerance with minimum, typical, and maximum
public defn min-typ-max (min:Double, typ:Double|False, max:Double) -> Toleranced:
  fatal("min-typ-max() should have max > min.") when max < min
  val typ-r = match(typ) :
    (t:Double) : t
    (f) : min + 0.500 * (max - min)
  fatal("min-typ-max() should be min <= typ <= max") when (typ-r < min) or (max < typ-r)
  val tol- = typ-r - min
  val tol+ = max - typ-r
  tol(typ-r, tol+, tol-)

; Create a tolerance with minimum, and maximum 
; with the typ assumed to be in the center of the range of {min, max}
public defn min-max (min:Double, max:Double) -> Toleranced:
  min-typ-max(min, false, max)

; Create a tolerance from percentages higher and lower 
; where the argument is the percentage (double) in the range of 0.0 to 100.0
; and not a decimal representation of the percentage.
public defn tol% (typ:Double, tol+:Double, tol-:Double) -> Toleranced:
  val check100 = min-typ-max(0.0, false, 100.0)
  val check1 = min-typ-max(0.0, false, 1.0)
  fatal("tol+ must be in range 0.0 <= tol+ <= 100.0") when not in-range?(check100, tol+)
  fatal("tol- must be in range 0.0 <= tol- <= 100.0") when not in-range?(check100, tol-)
  println("tol%%(%_, %_, %_) 2nd argument (tol+ = %_%%) might be mis-specified, expecting 0.0 <= tol+%% <= 100.0" % [typ, tol+, tol-, tol+]) when in-range?(check1, tol+)
  println("tol%%(%_, %_, %_) 3rd argument (tol- = %_%%) might be mis-specified, expecting 0.0 <= tol-%% <= 100.0" % [typ, tol+, tol-, tol-]) when in-range?(check1, tol-)
  val plus  = typ * tol+ / 100.0
  val minus = typ * tol- / 100.0
  Toleranced(typ, plus, minus)

; Create a symmetric tolerance from percentage 
; where the percentage ranges from 0.0 to 100.0 (not 0.0 to 1.0)
public defn tol% (typ:Double, tol:Double) -> Toleranced:
  val check100 = min-typ-max(0.0, false, 100.0)
  val check1 = min-typ-max(0.0, false, 1.0)
  fatal("tol must be in range 0.0 <= tol <= 100.0") when not in-range?(check100, tol)
  println("tol%%(%_, %_) 2nd argument (tol = %_%%) might be mis-specified, expecting 0.0 <= tol%% <= 100.0" % [typ, tol, tol]) when in-range?(check1, tol)
  val delta  = typ * tol / 100.0
  Toleranced(typ, delta, delta)

; Create a tolerance from differences higher and lower
public defn tol (typ:Double, tol+:Double, tol-:Double) -> Toleranced:
  Toleranced(typ, tol+, tol-)

; Create a tolerance with the same upper and lower tolerances
public defn tol (typ:Double, tol+-:Double) -> Toleranced:
  tol(typ, tol+-, tol+-)


; Create a tolerance with zero upper and lower tolerances
public defn tol (typ:Double) -> Toleranced:
  tol(typ, 0.0, 0.0)

; Create a tolerance with zero upper and lower tolerances
public defn typ (typ:Double) -> Toleranced:
  tol(typ, 0.0, 0.0)

; Returns the upper tolerance, as a percentage
public defn tol+% (t:Toleranced) -> Double:
  fatal("typ(Toleranced) must be nonzero to compute tol+%.") when typ-value(t) == 0.0
  100.0 * tol+(t) / typ(t)

; Returns the lower tolerance, as a percentage
public defn tol-% (t:Toleranced) -> Double:
  fatal("typ(Toleranced) must be nonzero to compute tol-%.") when typ-value(t) == 0.0
  100.0 * tol-(t) / typ(t)

; Returns the typ value
public defn typ-value (t:Toleranced) -> Double:
  typ(t)

; Returns the typ value
public defn nom-value (t:Toleranced) -> Double:
  typ(t)

; Returns the max value
public defn max-value (t:Toleranced) -> Double:
  typ(t) + tol+(t)

; Returns the min value
public defn min-value (t:Toleranced) -> Double:
  typ(t) - tol-(t)

; Returns the max value
public defn max-value (a:Double b:Double) -> Double:
  if a >= b :
    a
  else :
    b

; Returns the max value
public defn min-value (a:Double b:Double) -> Double:
  if a <= b :
    a
  else :
    b

; Returns the center of the value range (not necessarily the typ/nom value)
public defn center-value (t:Toleranced) -> Double:
  min-value(t) + 0.5 * (max-value(t) - min-value(t))

; Check if a value is within the tolerance's range.
public defn in-range? (t:Toleranced, value:Double) -> True|False:
  value >= min-value(t) and value <= max-value(t)

; Check if a range is within the tolerance's range.
public defn in-range? (t:Toleranced, value:Toleranced) -> True|False:
  min-value(value) >= min-value(t) and max-value(value) <= max-value(t)
 
 ; Returns the difference between max and min of the toleranced values
public defn tolerance-range (t:Toleranced) -> Double:
  max-value(t) - min-value(t)
