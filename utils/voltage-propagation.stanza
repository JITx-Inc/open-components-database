#use-added-syntax(jitx)
defpackage ocdb/utils/voltage-propagation :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/property-structs

;============================================================
;=================== Implementation =========================
;============================================================

;Perform voltage propagation on the given module.
;Returns a new module backannotated with the .voltage property.

public defn propagate-voltages (module:Instantiable, report-file:String|False) -> Instantiable :
  within transform-module(module) :

    ;First collect the information for the algorithm.
    val connected-groups = collect-connected-groups()

    ;Then identify the starting points.
    val starting-points = starting-points(connected-groups)

    ;And collect all of the RelativeVoltage relationships between
    ;the connected items.
    val relations = relative-relations(connected-groups)

    ;Perform voltage propagation here.
    val [group-voltages, object-voltages] = propagate-relative-relations(
                                              starting-points,
                                              relations)

    ;Check for any inconsistencies now that all voltages are solved.
    val inconsistencies = check-consistency(
                            starting-points,
                            group-voltages,
                            object-voltages,
                            relations)

    ;Generate a human-readable report of the algorithm results, and
    ;save it to a file.
    match(report-file:String) :
      val report = generate-report(connected-groups,
                                   starting-points,
                                   relations,
                                   group-voltages,
                                   object-voltages,
                                   inconsistencies)
      spit(report-file, report)
      ;println("Voltage propagation report saved to %~." % [report-file])
  
    ;Backannotate the design and write out all of the new solved voltages.
    back-annotate-design(connected-groups,
                         starting-points,
                         group-voltages,
                         object-voltages)

;============================================================
;======================= Input Information ==================
;============================================================

;Represents a single connected group of items.
;- id: An identifier for the group.
;- items: All the connected items in the group.
defstruct ConnectedGroup :
  id:Int
  items:Tuple<Item>

;Represents an item that may contain voltage information.
;- object: The JITXObject (net/pin).
;- type: The type of object. Used for nice error messages.
;- voltage: The annotated '.voltage' property on the object.
defstruct Item :
  object:JITXObject
  type:ItemType
  voltage:Maybe

;Represents the type of an object.
defenum ItemType :
  NetType
  ModulePinType
  ComponentPinType
  AbstractPinType

;============================================================
;=============== Collecting the Information =================
;============================================================

;Collect all the connected groups in 'self'.
;Each connected group is represented as a ConnectedGroup.

defn collect-connected-groups () -> Tuple<ConnectedGroup> :

  ;Use a counter to generate ids for the groups.
  val id-counter = to-seq(0 to false)

  ;Scan through all-connected-items and create a ConnectedGroup
  ;for each.
  val groups = Vector<ConnectedGroup>()
  for items in all-connected-items(self) do :
  
    ;Bundle information into an item.
    defn make-item (obj:JITXObject, type:ItemType) -> Item :
      Item(obj, type, property?(obj.voltage))

    ;Call 'make-item' on every object in the sequence.
    defn make-items (objs:Seqable<JITXObject>, type:ItemType) -> Seq<Item> :
      seq(make-item{_, type}, objs)

    ;Collect all the items connected together.
    val all-items = to-tuple $ cat-all $ [
      make-items(nets(items), NetType)
      make-items(module-pins(items), ModulePinType)
      make-items(component-pins(items), ComponentPinType)
      make-items(abstract-pins(items), AbstractPinType)]

    ;Return the connected group.
    add(groups, ConnectedGroup(next(id-counter), all-items))

  ;Note there may still be some objects that are viable starting
  ;points for the voltage propagation that may not have been
  ;part of a connected group.
  ;Scan through the rest of the items in the design, and if they
  ;are a viable starting point, then ensure they are part of a group.

  ;Compute the set of all items that are part of some group.
  val group-set = to-hashset<JITXObject> $
    seq(object, seq-cat(items, groups))

  ;Find all the objects that are viable starting points,
  ;and put them in a trivial group if necessary.
  for item in all-items-with-properties(self, [`voltage]) do :
    if not group-set[object(item)] :
      val voltage = value(item)
      if voltage is Double|Toleranced :      
        val group-item = Item(object(item), ComponentPinType, One(voltage))
        add(groups, ConnectedGroup(next(id-counter), [group-item]))

  ;Return the computed groups.
  to-tuple(groups)

;============================================================
;============= Discover the Starting Points =================
;============================================================

;Represents a group with a known voltage.
;- id: The identifier of the group.
;- source: The item in the group that is annotated with an absolute
;  voltage.
defstruct GroupVoltage :
  id:Int
  source:Item

;Retrieve voltage of the group.
defn voltage (v:GroupVoltage) -> Double|Toleranced :
  value!(voltage(source(v)))

;The voltage propagation starts from some group for which
;we know the absolute voltage. Find all the starting points
;for the propagation algorithm.

defn starting-points (groups:Tuple<ConnectedGroup>) -> Vector<GroupVoltage> :

  ;Return true if the item has an absolute voltage.
  ;Checks whether its voltage is Double|Toleranced.
  defn has-absolute-voltage? (item:Item) -> True|False :
    value?(voltage(item)) is Double|Toleranced

  ;If there is more than one item on the net with an
  ;absolute voltage, then we choose the most specific one
  ;as the starting point. We consider a Double more specific
  ;than a Toleranced.
  ;Returns an integer representing the item's specificity:
  ;lower is more specific.
  defn specificity (item:Item) -> Int :
    match(value!(voltage(item))) :
      (d:Double) : 0
      (t:Toleranced) : 1

  ;Accumulate all the starting points here.
  val starting-points = Vector<GroupVoltage>()

  ;Scan through each group and check whether there exists
  ;an item with an absolute voltage. If there is, then add
  ;a new GroupVoltage object to 'starting-points'.
  for group in groups do :
    val annotated-items = filter(has-absolute-voltage?, items(group))
    if not empty?(annotated-items) :
      val source = minimum(specificity, annotated-items)
      add(starting-points, GroupVoltage(id(group), source))        

  ;Return all the starting points.
  starting-points

;============================================================
;============ Discover Relative Voltage Relations ===========
;============================================================

;Represents a RelativeVoltage constraint between two objects
;in the design.
;
;Note on Terminology: A relative voltage looks like this:
;
;  (Voltage of X) = 3.0V + (Voltage of Y)
;
;We call 'X' the "target".
;We call 'Y' the "anchor".
;
;- target: The target object.
;- anchor: The anchor object.
;- voltage: The RelativeVoltage relation between the objects.
;- target-group: The id of the group that the target object is in (if
;  it is in one).
;- anchor-group: The id of the group that the target object is in (if
;  it is in one).
;- target-item: The corresponding Item for the target object.
;- anchor-item: The corresponding Item for the anchor object.

defstruct RelativeRelation :
  target:JITXObject
  anchor:JITXObject
  voltage:RelativeVoltage
  target-group:Int|False
  anchor-group:Int|False
  target-item:Item|False
  anchor-item:Item|False

defn relative-relations (groups:Tuple<ConnectedGroup>) -> Vector<RelativeRelation> :

  ;Create some tables so that we can look up the group and Item
  ;that a JITXObject corresponds to.

  ;An entry, OBJ => G, means that object 'OBJ' is in connected group 'G'.
  val group-table = HashTable<JITXObject,Int>()
  
  ;An entry, OBJ => ITEM, means that object 'OBJ' corresponds to item 'ITEM'.
  val item-table = HashTable<JITXObject,Item>()

  ;Scan through input groups and populate 'group-table' and 'item-table'.
  for group in groups do :
    for item in items(group) do :
      group-table[object(item)] = id(group)
      item-table[object(item)] = item

  ;Given that 'target' was annotated with 'voltage', create the
  ;RelativeRelation.
  defn make-relation (target:JITXObject, voltage:RelativeVoltage) -> RelativeRelation :
    val anchor = pin(voltage as FractionalVoltage|OffsetVoltage)
    val target-group = get?(group-table, target)
    val anchor-group = get?(group-table, anchor)
    val target-item = get?(item-table, target)
    val anchor-item = get?(item-table, anchor)
    RelativeRelation(target,
                     anchor,
                     voltage,
                     target-group,
                     anchor-group,
                     target-item,
                     anchor-item)

  ;Collect all the relative relations in the design.
  val relations = Vector<RelativeRelation>()
  for item in all-items-with-properties(self, [`voltage]) do :
    val voltage = value(item)
    match(voltage:FractionalVoltage|OffsetVoltage) :
      add(relations, make-relation(object(item), voltage))

  ;Return all the collected relations.
  relations

;============================================================
;=========== Propagate Relative Voltage Relations ===========
;============================================================

;Represents a new voltage for a group calculated from
;a relative voltage relationship to some other group.
defstruct GroupVoltageFromRelativeRelation :
  id:Int
  relation:RelativeRelation
  voltage:Double|Toleranced

;Represents a new voltage for an object calculated from
;a relative voltage relationship to some other object.
defstruct ObjectVoltageFromRelativeRelation :
  object:JITXObject
  relation:RelativeRelation
  voltage:Double|Toleranced

defn propagate-relative-relations (start:Vector<GroupVoltage>,
                                   relations:Vector<RelativeRelation>)
                                ->[Vector<GroupVoltageFromRelativeRelation>
                                   Vector<ObjectVoltageFromRelativeRelation>]:

  ;Compute the "neighbours" of all groups.
  ;Every entry, G => (RS ...), means that for the group 'G',
  ;the relations 'RS' relates G's voltage to some other group.
  val neighbour-table = IntTable<List<RelativeRelation>>(List())

  ;Add the relation 'r' to group 'group' if 'group' is not false.
  defn add-neighbour (group:Int|False, r:RelativeRelation) :
    match(group:Int) :
      update(neighbour-table, cons{r, _}, group)

  ;Add all the relations to the neighbour-table.
  for r in relations do :
    if target-group(r) != anchor-group(r) :
      add-neighbour(target-group(r), r)
      add-neighbour(anchor-group(r), r)

  ;Create a table for storing the computed voltages for each group.
  val voltage-table = IntTable<Double|Toleranced>()

  ;Store the method by which the new voltages were computed.
  val new-voltages = Vector<GroupVoltageFromRelativeRelation>()

  ;Populate the voltage table with the starting points.
  for point in start do :
    voltage-table[id(point)] = value!(voltage(source(point)))

  ;Return true if the given relation is "applicable", i.e.
  ;we know the voltage of its anchor, and therefore we can
  ;compute the voltage of its target.
  defn applicable-primary-relation? (r:RelativeRelation) -> True|False :
    val g = anchor-group(r)
    match(g:Int) :
      key?(voltage-table, g)

  ;Return true if the given relation is "applicable" and a secondary
  ;relation, i.e. we know the voltage of its target, and therefore we
  ;can compute the voltage of its anchor.
  defn applicable-secondary-relation? (r:RelativeRelation) -> True|False :
    val g = target-group(r)
    match(g:Int) :
      key?(voltage-table, g)

  ;Try to compute the voltage of the given group using its
  ;primary relations. If successful, the voltage is stored in the
  ;'voltage-table' and true is returned.
  ;[TODO] Add one based on secondary relations.
  defn compute-voltage (group:Int, relations:List<RelativeRelation>) -> True|False :
    val applicable = filter(applicable-primary-relation?, relations)
    if not empty?(applicable) :
      val relation = next(applicable)
      val voltage = resolve-voltage(relation)
      voltage-table[group] = voltage
      add(new-voltages, GroupVoltageFromRelativeRelation(group, relation, voltage))
      true

  ;Assumes that the voltage of the anchor group is known.
  ;Compute the absolute voltage of the relation.
  defn resolve-voltage (r:RelativeRelation) -> Double|Toleranced :
    val anchor-voltage = voltage-table[anchor-group(r) as Int]
    match(voltage(r)) :
      (r:FractionalVoltage) : factor(r) * anchor-voltage
      (r:OffsetVoltage) : factor(r) + anchor-voltage

  ;Propagate voltages until we make no more progress.
  let loop () :
  
    ;Track whether we made progress on this iteration.
    var progress? = false

    ;Try resolving voltages based on neighbours.
    ;If successful, then record that we made progress.
    for entry in neighbour-table do :
      if not key?(voltage-table, key(entry)) :
        if compute-voltage(key(entry), value(entry)) :
          progress? = true
          
    ;If progress was made, then iterate again.
    loop() when progress?

  ;Finally resolve any remaining relations that were between
  ;objects that were not part of groups.
  val object-voltages = Vector<ObjectVoltageFromRelativeRelation>()
  for r in relations do :
    if target-group(r) is False :
      if applicable-primary-relation?(r) :
        val voltage = resolve-voltage(r)
        add(object-voltages, ObjectVoltageFromRelativeRelation(target(r), r, voltage))
    
  ;Return the results
  [new-voltages, object-voltages]

;============================================================
;==================== Check Consistency =====================
;============================================================

;For each relation:
;
;  (Voltage of X) = 3.0V + (Voltage of Y)
;
;Check its consistency by:
;
;  1) Retrieving the voltage of X and Y
;  2) If they both have absolute voltages, then check
;     whether the absolute voltages satisfy the relation.
;
;If they do not satisfy the relation, then record the
;inconsistency.

defstruct InconsistentRelation :
  target-voltage: Double|Toleranced
  anchor-voltage: Double|Toleranced
  relation:RelativeRelation

defn check-consistency (start:Vector<GroupVoltage>
                        group-voltages:Vector<GroupVoltageFromRelativeRelation>
                        object-voltages:Vector<ObjectVoltageFromRelativeRelation>
                        relations:Vector<RelativeRelation>) :
  ;Build table of voltages. 
  val group-voltage-table = IntTable<Double|Toleranced>()
  val object-voltage-table = HashTable<JITXObject,Double|Toleranced>()
  for v in start do :
    group-voltage-table[id(v)] = voltage(v)
  for v in group-voltages do :
    group-voltage-table[id(v)] = voltage(v)
  for v in object-voltages do :
    object-voltage-table[object(v)] = voltage(v)

  ;Returns the [target-voltage, anchor-voltage].
  defn resolve-voltages (r:RelativeRelation)
                     -> [False|Double|Toleranced,
                         False|Double|Toleranced] :
    defn resolve (group:Int|False, object:JITXObject) :
      match(group:Int) : get?(group-voltage-table,group)
      else : get?(object-voltage-table,object)
    [resolve(target-group(r), target(r))
     resolve(anchor-group(r), anchor(r))]

  ;Iterate through each relation, and check whether a relation is consistent.
  ;If it is not, then create a new InconsistentRelation object.
  val errors = Vector<InconsistentRelation>()
  for r in relations do :
    val [target-voltage, anchor-voltage] = resolve-voltages(r)
    match(target-voltage:Double|Toleranced, anchor-voltage:Double|Toleranced) :
      match(voltage(r)) :
        (v:FractionalVoltage) :
          val desired-target-voltage = factor(v) * anchor-voltage
          if target-voltage != desired-target-voltage :
            add(errors, InconsistentRelation(target-voltage, anchor-voltage, r))
        (v:OffsetVoltage) :
          val desired-target-voltage = factor(v) + anchor-voltage
          if target-voltage != desired-target-voltage :
            add(errors, InconsistentRelation(target-voltage, anchor-voltage, r))

  ;Return all inconsistent relations.
  errors

;============================================================
;================= Back-annotate Design =====================
;============================================================

;Write all the computed voltages back out into the
;'.voltage' properties in the design.

defn back-annotate-design (groups:Tuple<ConnectedGroup>,
                           start:Vector<GroupVoltage>
                           group-voltages:Vector<GroupVoltageFromRelativeRelation>
                           object-voltages:Vector<ObjectVoltageFromRelativeRelation>) :
  inside pcb-module :

    ;Create table for fast lookup of group.
    val group-table = to-inttable<ConnectedGroup> $
      for g in groups seq : id(g) => g

    ;Set the .voltage property on the object in the given group.
    defn annotate-obj (obj:JITXObject, voltage:Double|Toleranced) :
      property(obj.voltage) = voltage

    ;Set the .voltage property on all items in the given group.
    defn annotate-group (group-id:Int, voltage:Double|Toleranced) :
      val group = group-table[group-id]
      for item in items(group) do :
        annotate-obj(object(item), voltage)

    ;Launch!
    for v in start do :
      annotate-group(id(v), voltage(v))
    for v in group-voltages do :
      annotate-group(id(v), voltage(v))
    for v in object-voltages do :
      annotate-obj(object(v), voltage(v))

;============================================================
;==================== Listing of Results ====================
;============================================================

;Represents a solved voltage.
defstruct SolvedVoltage :
  object:JITXObject
  item:Item|False
  voltage:Double|Toleranced

;Summarize all of the solve and unsolved results.
defstruct ResultSummary :
  solved:Tuple<SolvedVoltage>
  unsolved:Tuple<ConnectedGroup>

;Summarize all of the solved and unsolved voltages.
defn summarize-results (group:Tuple<ConnectedGroup>,
                        starting-points:Vector<GroupVoltage>,
                        group-voltages:Vector<GroupVoltageFromRelativeRelation>,
                        object-voltages:Vector<ObjectVoltageFromRelativeRelation>) -> ResultSummary :
  ;Build group table.
  val group-table = to-inttable<ConnectedGroup> $
    for g in group seq : id(g) => g

  ;Accumulate results.
  val solved-groups = IntSet()
  val solved = Vector<SolvedVoltage>()

  ;Mark that the voltage of a group is solved.
  defn set-solved (group-id:Int, voltage:Double|Toleranced) :
    add(solved-groups, group-id)
    val group = group-table[group-id]
    for item in items(group) do :
      add(solved, SolvedVoltage(object(item), item, voltage))

  ;Add all the results
  for point in starting-points do :
    set-solved(id(point), voltage(point))
  for v in group-voltages do :
    set-solved(id(v), voltage(v))
  for v in object-voltages do :
    add(solved, SolvedVoltage(object(v), false, voltage(v)))

  ;Collect all unsolved
  val unsolved = to-tuple $ for g in group filter :
    not solved-groups[id(g)]

  ;Return summary.
  ResultSummary(
    to-tuple(solved),
    unsolved)  
    

;============================================================
;===================== Save Report ==========================
;============================================================

defn generate-report (groups:Tuple<ConnectedGroup>,
                      starting-points:Vector<GroupVoltage>,
                      relations:Vector<RelativeRelation>,
                      group-voltages:Vector<GroupVoltageFromRelativeRelation>,
                      object-voltages:Vector<ObjectVoltageFromRelativeRelation>,
                      inconsistencies:Vector<InconsistentRelation>) :

  ;Summarize all of the results.
  val summary = summarize-results(groups,
                                  starting-points,
                                  group-voltages,
                                  object-voltages)
                      
  ;Helper: Return a human readable name for the given item if there
  ;is a sensible one.
  defn readable-name? (item:Item) -> String|False :
    match(ref?(object(item))) :
      (r:Ref) :
        val type-name = switch(type(item)) :
          NetType: "net"
          ModulePinType: "module pin"
          ComponentPinType: "component pin"
          AbstractPinType: "abstract pin"
        to-string("%_ %_" % [type-name, r])
      (f:False) :
        false

  ;Helper: Force creation of a human readable name.
  ;If no name is found for the item, then return something like "unnamed net".
  defn readable-name! (item:Item) -> String :
    val type-name = switch(type(item)) :
      NetType: "net"
      ModulePinType: "module pin"
      ComponentPinType: "component pin"
      AbstractPinType: "abstract pin"
    match(ref?(object(item))) :
      (r:Ref) : to-string("%_ %_" % [type-name, r])
      (f:False) : to-string("unnamed %_ (%_)" % [type-name, object(item)])

  ;Helper: Force creation of a human readable name.
  defn readable-name! (obj:JITXObject) -> String :
    match(ref?(obj)) :
      (r:Ref) : to-string(r)
      (f:False) : to-string("Unnamed %_" % [obj])

  ;Helper: Force creation of a human readable name using the
  ;item if it is known, or the obj directly as a backup.
  defn readable-name (obj:JITXObject, item:Item|False) -> String :
    match(item:Item) : readable-name!(item)
    else : readable-name!(obj)

  ;Helper: Retrieve a human readable name for the target of a relation.
  defn target-name (r:RelativeRelation) -> String :
    readable-name(target(r), target-item(r))

  ;Helper: Retrieve a human readable name for the anchor of a relation.
  defn anchor-name (r:RelativeRelation) -> String :
    readable-name(anchor(r), anchor-item(r))

  ;Helper: Create a human readable description of the given relative relation.
  defn readable-relation (r:RelativeRelation) -> String :
    match(voltage(r)) :
      (v:FractionalVoltage) :        
        to-string("voltage of %_ = %_ V * voltage of %_" % [target-name(r), factor(v), anchor-name(r)])
      (v:OffsetVoltage) :
        to-string("voltage of %_ = %_ V + voltage of %_" % [target-name(r), factor(v), anchor-name(r)])

  ;Helper: Create a human readable name for the object.
  defn item-name (v:SolvedVoltage) -> String :
    readable-name(object(v), item(v))

  new Printable :
    defmethod print (o:OutputStream, this) :
      ;Shorthands
      val o2 = IndentedStream(o)
      val o3 = IndentedStream(o2)
      defn Pln (x) : println(o, x)
      defn Pln2 (x) : println(o2, x)
      defn Pln3 (x) : println(o3, x)
      
      Pln("### Performing voltage propagation analysis ###\n")
      Pln("Detect which items are electrically connected together:\n")
      for group in groups do :
        Pln2("Connected group %_:" % [id(group)])
        for item in items(group) do :
          match(readable-name?(item)) :
            (s:String) : Pln3(s)
            (f:False) : false
        Pln2("")

      Pln("### Starting Points ###\n")
      Pln("Voltage propagation starts by searching for items that have a\n\
           '.voltage' property of type 'Double' or 'Toleranced'.\n")
      Pln("The following starting points were found:\n")
      for start in starting-points do :
        Pln2("%_ in group %_ has voltage %_\n" % [readable-name!(source(start)), id(start), voltage(start)])

      Pln("### Relative Voltages ###\n")
      Pln("Next, find all the pins and nets in the design whose voltage\n\
           is defined to be relative to something else.\n")
      if empty?(relations) :
        Pln("No relative voltages were found.\n")
      else :
        Pln("The following relative voltages were found:\n")
        for r in relations do :
          Pln2(readable-relation(r))
          Pln2("")
        
      Pln("### Propagation of Relative Voltages ###\n")
      Pln("From these relative voltages, we can compute the voltages of\n\
           other pins and nets.\n")
      val index-counter = to-seq(1 to false)
      for v in group-voltages do :
        val r = relation(v)
        Pln2("%_) From knowing:\n" % [next(index-counter)])
        Pln3(readable-relation(relation(v)))
        Pln2("")
        Pln2("and:\n")
        Pln3("%_ is in group %_\n" % [target-name(r), target-group(r)])
        Pln3("%_ is in group %_\n" % [anchor-name(r), anchor-group(r)])
        Pln2("therefore:\n")
        Pln3("voltage of group %_ is %_.\n" % [id(v), voltage(v)])
      for v in object-voltages do :
        val r = relation(v)
        Pln2("%_) From knowing:\n" % [next(index-counter)])
        Pln3(readable-relation(relation(v)))
        Pln("therefore:\n")
        Pln3("voltage of %_ is %_.\n" % [readable-name!(object(v)), voltage(v)])

      Pln("### Final Check for Inconsistencies ###\n")
      Pln("Finally, check whether all the computed voltages are consistent\n\
           with what was declared in the design.\n")
      if empty?(inconsistencies) :
        Pln("No inconsistencies found.\n")
      else :
        for (err in inconsistencies, index in 1 to false) do :
          val r = relation(err)
          Pln2("%_) Inconsistency found. The following is specified:\n" % [index])
          Pln3(readable-relation(r))
          Pln2("")
          Pln2("However:\n")
          Pln3("voltage of %_ is %_\n" % [target-name(r), target-voltage(err)])
          Pln3("voltage of %_ is %_\n" % [anchor-name(r), anchor-voltage(err)])      
          
      Pln("### Final Summary ###\n")
      Pln("Solved Voltages:\n")
      for s in solved(summary) do :
        Pln2("voltage of %_ is %_\n" % [item-name(s), voltage(s)])
        
      Pln("Unsolved Voltages:\n")
      for group in unsolved(summary) do :
        Pln2("Connected group %_:" % [id(group)])
        for item in items(group) do :
          match(readable-name?(item)) :
            (s:String) : Pln3(s)
            (f:False) : false
        Pln2("")        

;<doc>=======================================================
;===================== Report Example =======================
;============================================================
      
### Performing voltage progagation analysis ###

Detect which items are electrically connected together:

  Connected group 0:
    module pin r[3]
    component pin r[3]
    abstract pin r[4]
    net GND
    
  Connected group 1:
    module pin r[3]
    component pin r[3]
    abstract pin r[4]
    net GND
    
  etc...

### Starting Points ###

Voltage propagation starts by searching for items that have a
'.voltage' property of type 'Double' or 'Toleranced'.

The following starting points were found:

  module pin r[3] in group 0 has voltage 3.0V.

  abstract pin r[3] in group 1 has voltage 7.7V.

### Relative Voltages ###

Next, find all the pins and nets in the design whose voltage
is defined to be relative to something else.

The following relative voltages were found:

  module pin r[3] voltage is 3.0V + voltage of abstract pin r[4]

  module pin r[4] voltage is 3.0V + voltage of abstract pin r[6]

  unnamed net L1331/D137 voltage is 7.8V * voltage of abstract pin r[8]

### Propagation of Relative Voltages ###

From these relative voltages, we can compute the voltages of
other pins and nets. 

1) From knowing:

  voltage of module pin r[3] is 3.0V + voltage of abstract pin r[4]

and:

  abstract pin r[3] is in group 7

  abstract pin r[4] is in group 4

  voltage of group 4 is 3.0V

therefore:

  voltage of group 7 is 7.7V.

### Final Check for Inconsistencies ###

Finally, check whether all the computed voltages are consistent
with what was declared in the design.

1) Inconsistency -- The following is specified:

  voltage of module pin r[3] is 3.0V + voltage of abstract pin r[8]

However:

  voltage of module pin r[3] is 7.7V

  voltage of abstract pin r[8] is 9.8V

2) Inconsistency -- The following is specified:

etc.

;============================================================
;=======================================================<doc>