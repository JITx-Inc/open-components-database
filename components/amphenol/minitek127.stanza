#use-added-syntax(jitx)
defpackage ocdb/components/amphenol/minitek127 :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs

;<test>
n-pins: 6 8 10 12 14 16 18 20
<test>
public pcb-component component (n-pins:Int) :
  name = to-string("Minitek127 %_x2 Header" % [n-pins / 2])
  manufacturer = "Amphenol"
  val n-str = if n-pins < 10 : to-string("0%_" % [n-pins]) else: to-string(n-pins)
  mpn = to-string("20021321-000%_C4LF" % [n-str])
  description = "SMD Female 1.27mm pitch header"
  port p : pin[1 through n-pins]
  val pkg = amphenol-minitek127-pkg(n-pins)
  val sym = header-symbol(n-pins, 2)
  landpattern = pkg(for i in 1 through n-pins do: p[i] => pkg.p[i])
  symbol  = sym(for i in 1 through n-pins do: p[i] => sym.p[i])
  reference-prefix = "J"
  property(self.rated-temperature) = min-max(-40.0, 105.0)

pcb-landpattern amphenol-minitek127-pkg (n-pins:Int) :
  if not contains?([6 8 10 12 14 16 18 20], n-pins):
    fatal("amphenol-minitek127-pkg only supports n-pins in [6 8 10 12 14 16 18 20]")
  val pitch = 1.27
  val y = (to-double(n-pins) - 2.0) / 2.0 * pitch + 1.73
  for (l in grid-locs(n-pins / 2, 2, 3.55, 1.27), i in 1 through n-pins) do :
    pad p[i] : smd-pad(2.05, 0.76) at l

  layer(Courtyard(Top)) = Rectangle(5.6, y)
  layer(Silkscreen("f-silk", Top)) = Union([symmetric-about-y([Line(0.1, [Point(-1.5, y / 2.0) Point(1.5, y / 2.0)])])])
  layer(Silkscreen("pol", Top)) = Circle(-3.5, y / 2.0 - 0.865, 0.2)
  ref-label()
