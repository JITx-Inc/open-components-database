#use-added-syntax(jitx)
defpackage ocdb/components/espressif/esp32-wroom-32:
  import core
  import collections
  import jitx

  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/land-protrusions
  import ocdb/utils/design-vars
  import ocdb/utils/generic-components
  import ocdb/utils/property-structs

public pcb-enum ocdb/components/espressif/esp32-wroom-32/Antenna :
  Integrated
  UMCX

public pcb-enum ocdb/components/espressif/esp32-wroom-32/esp32-wroom-32mpn :
  ESP32-WROOM-32E-N4
  ESP32-WROOM-32E-N8
  ESP32-WROOM-32E-N16
  ESP32-WROOM-32E-H4
  ESP32-WROOM-32E-H8
  ESP32-WROOM-32E-N4R2
  ESP32-WROOM-32E-N8R2
  ESP32-WROOM-32E-N16R2
  ESP32-WROOM-32UE-N4
  ESP32-WROOM-32UE-N8
  ESP32-WROOM-32UE-N16
  ESP32-WROOM-32UE-H4
  ESP32-WROOM-32UE-H8
  ESP32-WROOM-32UE-N4R2
  ESP32-WROOM-32UE-N8R2
  ESP32-WROOM-32UE-N16R2
; ================================================== Component ==================================================
public pcb-component component (pn:esp32-wroom-32mpn) :
  name = "ESP32 Module"
  val [mpn antenna-type temperature description] = switch(pn) :
    ESP32-WROOM-32E-N4 :   ["ESP32-WROOM-32E-N4" Integrated min-max(-40.0, 85.0)     "Module, ESP32, PCB Antenna, 4MB Flash, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount" ]
    ESP32-WROOM-32E-N8 :   ["ESP32-WROOM-32E-N8" Integrated min-max(-40.0, 85.0)     "Module, ESP32, PCB Antenna, 8MB Flash, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32E-N16 :  ["ESP32-WROOM-32E-N16" Integrated min-max(-40.0, 85.0)    "Module, ESP32, PCB Antenna, 16MB Flash, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32E-H4 :   ["ESP32-WROOM-32E-H4" Integrated min-max(-40.0, 105.0)    "Module, ESP32, PCB Antenna, 4MB Flash, High Temperature, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32E-H8 :   ["ESP32-WROOM-32E-H8" Integrated min-max(-40.0, 105.0)    "Module, ESP32, PCB Antenna, 8MB Flash, High Temperature, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32E-N4R2 : ["ESP32-WROOM-32E-N4R2" Integrated min-max(-40.0, 85.0)   "Module, ESP32, PCB Antenna, 4MB Flash, 2MB PSRAM, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32E-N8R2 : ["ESP32-WROOM-32E-N8R2" Integrated min-max(-40.0, 85.0)   "Module, ESP32, PCB Antenna, 8MB Flash, 2MB PSRAM, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32E-N16R2 :["ESP32-WROOM-32E-N16R2" Integrated min-max(-40.0, 85.0)  "Module, ESP32, PCB Antenna, 16MB Flash, 2MB PSRAM, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-N4 :  ["ESP32-WROOM-32UE-N4" UMCX min-max(-40.0, 85.0)          "Module, ESP32, UMCX, 4MB Flash, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-N8 :  ["ESP32-WROOM-32UE-N8" UMCX min-max(-40.0, 85.0)          "Module, ESP32, UMCX, 8MB Flash, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-N16 : ["ESP32-WROOM-32UE-N16" UMCX min-max(-40.0, 85.0)         "Module, ESP32, UMCX, 16MB Flash, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-H4 :  ["ESP32-WROOM-32UE-H4" UMCX min-max(-40.0, 105.0)         "Module, ESP32, UMCX, 4MB Flash, High Temperature, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-H8 :  ["ESP32-WROOM-32UE-H8" UMCX min-max(-40.0, 105.0)         "Module, ESP32, UMCX, 8MB Flash, High Temperature, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-N4R2 :["ESP32-WROOM-32UE-N4R2" UMCX min-max(-40.0, 85.0)        "Module, ESP32, UMCX, 4MB Flash, 2MB PSRAM, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-N8R2 :["ESP32-WROOM-32UE-N8R2" UMCX min-max(-40.0, 85.0)        "Module, ESP32, UMCX, 8MB Flash, 2MB PSRAM, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
    ESP32-WROOM-32UE-N16R2 :  ["ESP32-WROOM-32UE-N16R2" UMCX min-max(-40.0, 85.0)     "Module, ESP32, UMCX, 16MB Flash, 2MB PSRAM, WiFi 802.11b/g/n, Bluetooth v4.2 +EDR, Class 1, 2 and 3 Transceiver, Surface Mount"]
  property(self.rated-temperature) = temperature
  mpn = mpn
  manufacturer = "Espressif" 
  reference-prefix = "U"
  datasheet = "https://www.espressif.com/sites/default/files/documentation/esp32-wroom-32e_esp32-wroom-32ue_datasheet_en.pdf"

  port IO : pin[[0 2 4 5 12 13 14 15 16 17 18 19 21 22 23 25 26 27 32 33 34 35]]
  pin-properties :
    [pin:Ref      | pads:Int ... | side:Dir ]
    [GND  |      1, 15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 |  Down ]
    [P3V3  |      2       |  Up ]
    [EN   |      3       |  Left ]
    [SENSOR_VP | 4       |  Left ]
    [SENSOR_VN | 5       |  Left ]
    [IO[0]  |      25      |  Left ]
    [IO[2]  |      24      |  Left ]
    [IO[4]  |      26      |  Left ]
    [IO[5]  |      29      |  Left ]
    [IO[12] |      14      |  Right ]
    [IO[13] |      16      |  Right ]
    [IO[14] |      13      |  Right ]
    [IO[15] |      23      |  Right ]
    [IO[16] |      27      |  Right ]
    [IO[17] |      28      |  Right ]
    [IO[18] |      30      |  Right ]
    [IO[19] |      31      |  Right ]
    [IO[21] |      33      |  Right ]
    [IO[22] |      36      |  Right ]
    [IO[23] |      37      |  Right ]
    [IO[25] |      10      |  Right ]
    [IO[26] |      11      |  Right ]
    [IO[27] |      12      |  Right ]
    [IO[32] |      8       |  Right ]
    [IO[33] |      9       |  Right ]
    [IO[34] |      6       |  Right ]
    [IO[35] |      7       |  Right ]
    [SD[2]  |      17      |  Right ]
    [SD[3]  |      18      |  Right ]
    [CMD    |      19      |  Right ]
    [CLK    |      20      |  Right ]
    [SD[0]  |      21      |  Right ]
    [SD[1]  |      22      |  Right ]
    [RXD0   |      34      |  Left ]
    [TXD0   |      35      |  Left ]
    [NC | 32 |  Left ]

  make-box-symbol()
  assign-landpattern(esp32-wroom(antenna-type))
  property(self.P3V3.power-pin) = PowerPin(min-max(1.8, 3.6))


  ; ESP supports crossbarred IO, so use generic supports
  val reserved-io = [IO[0] IO[16] IO[17] IO[32] IO[33] IO[34] IO[35]]
  for IO-pin in ports(IO) do :
    if not contains?(reserved-io, IO-pin) :
      supports io-pin:
        io-pin.p => IO-pin

  supports power:
    power.vdd => self.P3V3
    power.gnd => self.GND
  supports reset:
    reset.reset => self.EN

; Generic digital pin
pcb-bundle io-pin:
  pin p

; ================================================== Module ==================================================
public defn module (pn:esp32-wroom-32mpn) :
  module(pn, true)

public pcb-module module (pn:esp32-wroom-32mpn, add-serial-programming-circuit?:True|False) :
  public inst esp32 : ocdb/components/espressif/esp32-wroom-32/component(pn)
  port power : power
  pin boot
  pin en
  pin gnd
  place(esp32) at loc(0.0, 0.0) on Top
  cap-strap(esp32.P3V3 esp32.GND, 10.0e-6)
; RC enable delay
  inst en-r: chip-resistor(10.0e3)
  inst en-c: ceramic-cap(1.0e-6)
  net (power.gnd gnd esp32.GND en-c.p[1])
  net (power.vdd esp32.P3V3 en-r.p[1])
  net (esp32.EN en-c.p[2] en-r.p[2])

  supports reset:
    reset.reset => esp32.EN

  supports jtag([]) :
    jtag([]).tms => esp32.IO[14]
    jtag([]).tdi => esp32.IO[12]
    jtag([]).tck => esp32.IO[13]
    jtag([]).tdo => esp32.IO[15]

  net (esp32.IO[0], boot)
  net (esp32.EN en)
  if add-serial-programming-circuit? :
    port uart : uart([UART-DTR UART-RTS UART-RX UART-TX])
    net ESP-RX (esp32.RXD0, uart.rx)
    net ESP-TX (esp32.TXD0, uart.tx)
    public inst q : ocdb/components/nexperia/PMBT3904/component[2]
    res-strap(uart.dtr, q[0].b, 10.0e3)
    res-strap(uart.rts, q[1].b, 10.0e3)
    net ( q[1].c boot)
    net (uart.rts, q[0].e)
    net (uart.dtr, q[1].e)
    net ( q[0].c en)

  for a in [34 35 32 33 25 26 27 14 12 13 15 2 4] do :
    supports adc :
      adc.adc => esp32.IO[a]
  
  ; Digital logic levels
  val vol = min-max(0.0, 0.1 * 3.3)
  val voh = min-max(0.8 * 3.3, 3.3)
  val vih = typ(0.25 * 3.3)
  val vil = typ(0.75 * 3.3)

  let :
    val cmos = CMOSOutput(vol, voh)
    val dio  = DigitalIO(cmos, vil, vih, 
                         esp32.P3V3, esp32.GND, 50.0e-9)
    for i in 0 to 22 do:
      supports gpio:
        require io:io-pin from esp32
        gpio.gpio => io.p
        property(io.p.digital-io) = dio
    for i in 0 to 16 do:
      supports timer:
        require io:io-pin from esp32
        timer.timer => io.p
        property(io.p.digital-io) = dio
    for i in 0 to 2 do:
      val ocdb-uart = /uart()
      supports ocdb-uart:
        require io:io-pin[2] from esp32
        ocdb-uart.tx => io[0].p
        property(io[0].p.digital-output) = dio
        ocdb-uart.rx => io[1].p
        property(io[1].p.digital-input) = 
          DigitalInput(vil, vih, esp32.P3V3, esp32.GND, 50.0e-9)
  let :
    val oc  = OpenCollector(vol, 28.0e-3)
    val dio = DigitalIO(oc, vil, vih, esp32.P3V3, esp32.GND, 50.0e-9)
    for i in 0 to 2 do:
      supports i2c:
        require io:io-pin[2] from esp32
        i2c.sda => io[0].p
        i2c.scl => io[1].p
        property(io[0].p.digital-io) = dio
        property(io[1].p.digital-io) = dio

  schematic-group(self) = ESP32

; ================================================== Land Pattern ==================================================
pcb-landpattern esp32-wroom (antenna-type:Antenna) :
  val num-pins = 38                 ; number of pins of the component
  val pitch = 1.27                 ; pitch of the pins of the component
  val lead-span = tol(18.0, 0.15)  ; the overall length of the component, from terminal-edge to terminal-edge
  val package-x = 18.0    ; the x of the package 
  var package-y:Double     ; the y of the package
  val terminal-x = tol(0.85, 0.0)   ; the x of the terminals
  val terminal-y = tol(0.9, 0.0)    ; the y of the terminals
  val lead-fillets = lead-fillets(LeadlessConcaveCastellated, DENSITY-LEVEL)
  var offset:Double
  switch(antenna-type):
    Integrated :
      package-y = 25.5
      offset = (25.5 - 19.2) / 2.0
    UMCX :
      package-y = 19.2
      offset = 0.0
    else : fatal("Invalid antenna type passed to esp32-wroom-32. Valid antenna types are UMCX and Integrated.")

  inside pcb-landpattern:
    ;----------------------------------------------------
    ; Compute adjustments to dimensions using IPC formula
    val ipc = ipc-formula(
      lead-span, terminal-x, terminal-y, 
      lead-fillets
    )
    ;Change to package layer, when added layer(Silkscreen("cmp", Top)) = Rectangle(package-x, package-y)
    ;----------------------------------------------------
    ; compute our pad sizes
    val pad-sz  = pad-size(ipc)
    ;----------------------------------------------------
    val grid-sz = Dims(Gmin(ipc) + x(pad-sz), pitch)
    val edge-of-x = package-x / 2.0
    val edge-of-y = package-y / 2.0
    val x-loc = edge-of-x
    val neg-x-loc = -1.0 * x-loc
    val y-loc = -1.0 * edge-of-y
    var pad-move = 6.5 * pitch - offset
    ; draw the orientation marker
    val solder-mask-registration = clearance(current-rules(), SolderMaskRegistration)
    val pol-x = neg-x-loc - 0.5 * x(pad-sz) - 2.0 * solder-mask-registration
    val line-width  = clearance(current-rules(), MinSilkscreenWidth)
    layer(Silkscreen("pol", Top)) = loc(pol-x, pad-move) * Line(line-width, [Point(0.0, 0.0), Point(0.0, line-width * 5.0)])

    ; place the pads
    for i in 1 through 14 do : ; left side from top
      pad p[i] : smd-pad(Rectangle(pad-sz)) at loc(neg-x-loc, pad-move)
      pad-move = pad-move - pitch
    pad-move = -4.5 * pitch
    for i in 15 through 24 do : ; bottom side from left
      pad p[i] : smd-pad(Rectangle(pad-sz)) at loc(pad-move, y-loc, 270.0)
      pad-move = pad-move + pitch
    pad-move = -6.5 * pitch - offset
    for i in 25 through 38 do : ; right side from bottom
      pad p[i] : smd-pad(Rectangle(pad-sz)) at loc(x-loc, pad-move)
      pad-move = pad-move + pitch

; grid of 9 ground pads
    val pin-array-x = 7.5 - edge-of-x 
    val pin-array-y = 10.67 - edge-of-y
    val pin-array-step = 0.9 + 0.5
    var pad-num = 39
    for i in -1 through 1 do:
      for j in -1 through 1 do:
        pad p[pad-num] : smd-pad( Rectangle(0.9, 0.9)) at 
          loc(pin-array-x + to-double(i) * pin-array-step, pin-array-y + to-double(j) * pin-array-step)
        pad-num = pad-num + 1

    ;----------------------------------------------------
    ; compute the courtyard
    val courtyard-y = package-y + x(pad-sz) +  2.0 * (solder-mask-registration + courtyard-excess(lead-fillets)) ; pads are rotated 90, so use X here
    val edge-of-artwork = Rectangle(package-x + x(pad-sz) + 2.0 * ( solder-mask-registration + courtyard-excess(lead-fillets)), 
      courtyard-y)
    layer(Courtyard(Top)) = edge-of-artwork
        
    ;----------------------------------------------------
    ; place the reference label    
    val min-silkscreen-text-height = clearance(current-rules(), MinSilkscreenTextHeight)
    val text-y = 0.5 * courtyard-y + min-silkscreen-text-height
    ref-label(0.0, text-y)

    model3d = Model3D("WIFI-SMD_ESP32-WROOM-32E.wrl",
                      Vec3D(0.0, 0.0, 0.0)
                      Vec3D(1.0, 1.0, 1.0)
                      Vec3D(0.0, 0.0, 270.0))