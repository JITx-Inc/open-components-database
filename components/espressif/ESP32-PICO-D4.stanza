#use-added-syntax(jitx)
defpackage ocdb/components/espressif/ESP32-PICO-D4 :
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/symbol-utils
  import ocdb/utils/generic-components
  import ocdb/utils/bundles
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs
  
public pcb-component component :
  name = "ESP32 Pico D4 BLE/WiFi SoC"
  mpn = "ESP32-PICO-D4"
  datasheet = "https://www.espressif.com/sites/default/files/documentation/esp32-pico-d4_datasheet_en.pdf"
  pin EN 
  pin CLK 
  pin CMD 
  port SD : pin[4]
  port IO : pin[[0 2 4 5 12 13 14 15 16 17 18 19 21 22 23 25 26 27 32 33 34 35]]
  pin U0RXD 
  pin U0TXD 
  pin LNA-IN 
  pin GND 
  pin VDDA 
  pin VDDA3P3 
  pin VDD-SDIO 
  pin VDD3P3-CPU 
  pin VDD3P3-RTC 
  pin SENSOR-VN 
  pin SENSOR-VP 
  pin SENSOR-CAPN 
  pin SENSOR-CAPP 
  port nc : pin[4]

  val generic-props = GenericPin(min-max(-0.3, 3.6), 1500.0)

  pin-properties :
    [pin:Ref     | pads:Int ... | side:Dir| generic-pin:GenericPin]
    [EN          | 9            | Left    | generic-props ]
    [CLK         | 31           | Right   | generic-props ]
    [CMD         | 30           | Right   | generic-props ]
    [SD[0]       | 32           | Right   | generic-props ]
    [SD[1]       | 33           | Right   | generic-props ]
    [SD[2]       | 28           | Right   | generic-props ]
    [SD[3]       | 29           | Right   | generic-props ]
    [IO[0]       | 23           | Left    | generic-props ]
    [IO[2]       | 22           | Right   | generic-props ]
    [IO[4]       | 24           | Right   | generic-props ]
    [IO[5]       | 34           | Right   | generic-props ]
    [IO[12]      | 18           | Right   | generic-props ]
    [IO[13]      | 20           | Right   | generic-props ]
    [IO[14]      | 17           | Right   | generic-props ]
    [IO[15]      | 21           | Right   | generic-props ]
    [IO[16]      | 25           | Right   | generic-props ]
    [IO[17]      | 27           | Left    | generic-props ]
    [IO[18]      | 35           | Left    | generic-props ]
    [IO[19]      | 38           | Left    | generic-props ]
    [IO[21]      | 42           | Left    | generic-props ]
    [IO[22]      | 39           | Left    | generic-props ]
    [IO[23]      | 36           | Left    | generic-props ]
    [IO[25]      | 14           | Left    | generic-props ]
    [IO[26]      | 15           | Left    | generic-props ]
    [IO[27]      | 16           | Left    | generic-props ]
    [IO[32]      | 12           | Left    | generic-props ]
    [IO[33]      | 13           | Left    | generic-props ]
    [IO[34]      | 10           | Left    | generic-props ]
    [IO[35]      | 11           | Left    | generic-props ]
    [U0RXD       | 40           | Left    | generic-props ]
    [U0TXD       | 41           | Left    | generic-props ]
    [LNA-IN      | 2            | Right   | generic-props ]
    [GND         | 49           | Down    | - ]
    [VDDA        | 1, 43, 46    | Up      | generic-props ]
    [VDDA3P3     | 3, 4         | Up      | generic-props ]
    [VDD-SDIO    | 26           | Up      | generic-props ]
    [VDD3P3-CPU  | 37           | Up      | generic-props ]
    [VDD3P3-RTC  | 19           | Up      | generic-props ]
    [SENSOR-VN   | 8            | Left    | generic-props ]
    [SENSOR-VP   | 5            | Left    | generic-props ]
    [SENSOR-CAPN | 7            | Left    | generic-props ]
    [SENSOR-CAPP | 6            | Left    | generic-props ]
    [nc[0]       | 44           | Down    | - ]
    [nc[1]       | 45           | Down    | - ]
    [nc[2]       | 47           | Down    | - ]
    [nc[3]       | 48           | Down    | - ]

  make-box-symbol()
  assign-landpattern(pqfn50p700x700x104-49n)

  property(VDDA.power-pin)       = PowerPin(min-max(2.3, 3.6))
  property(VDDA3P3.power-pin)    = PowerPin(min-max(2.3, 3.6))
  property(VDD3P3-CPU.power-pin) = PowerPin(min-max(1.8, 3.6))
  property(VDD3P3-RTC.power-pin) = PowerPin(min-max(3.0, 3.6))

  val drive-props = 
    DigitalOutput(CMOSOutput(FractionalVoltage(0.1, self.VDD3P3-CPU)
                              FractionalVoltage(0.8, self.VDD3P3-CPU)),
                  false, VDD3P3-CPU, GND)
  val input-props = 
    DigitalInput(FractionalVoltage(0.25, VDD3P3-CPU),
                  FractionalVoltage(0.75, VDD3P3-CPU), 
                  VDD3P3-CPU, GND, 50.0e-9)

  property(U0TXD.digital-output) = drive-props
  property(U0RXD.digital-input) = input-props
  property(EN.reset-pin) = ResetPin(input-props)

  ; ESP supports crossbarred IO, so use generic supports
  val reserved-io = [IO[0] IO[16] IO[17] IO[32] IO[33] IO[34] IO[35]]
  for IO-pin in ports(IO) do :
    if not contains?(reserved-io, IO-pin) :
      supports io-pin:
        io-pin.p => IO-pin
        
  property(self.rated-temperature) = min-max(-40.0, 85.0)

; Generic digital pin
pcb-bundle io-pin:
  pin p


public pcb-module module :
  port uart : uart([UART-DTR UART-RTS UART-RX UART-TX])
  port power : power
  pin ant
  pin gnd
  pin en
  pin boot
  public inst mcu : ocdb/components/espressif/ESP32-PICO-D4/component

  net (gnd, mcu.GND, power.gnd)
  net (power.vdd, mcu.VDDA, mcu.VDDA3P3, mcu.VDD3P3-CPU, mcu.VDD3P3-RTC)
  bypass-cap-strap(mcu.VDDA3P3, gnd, 10.0e-6)
  bypass-cap-strap(mcu.VDDA3P3, gnd, 0.1e-6)
  net (mcu.LNA-IN, ant)

  ; UART programming interface using control pins
  net ESP-RX (mcu.U0RXD, uart.rx)
  net ESP-TX (mcu.U0TXD, uart.tx)
  public inst q : ocdb/components/nexperia/PMBT3904/component[2]
  res-strap(uart.dtr, q[0].b, 10.0e3)
  res-strap(uart.rts, q[1].b, 10.0e3)
  net (mcu.IO[0], q[1].c boot)
  net (uart.rts, q[0].e)
  net (uart.dtr, q[1].e)

  net (mcu.EN, q[0].c en)
  res-strap(en, power.vdd, 10.0e3)
  cap-strap(en, power.gnd, 0.1e-6)

  ; Digital logic levels
  val vol = min-max(0.0, 0.1 * 3.3)
  val voh = min-max(0.8 * 3.3, 3.3)
  val vih = typ(0.25 * 3.3)
  val vil = typ(0.75 * 3.3)

  ; Supports statements for digital peripherals
  supports reset:
    reset.reset => mcu.EN

  let :
    val cmos = CMOSOutput(vol, voh)
    val dio  = DigitalIO(cmos, vil, vih, 
                         mcu.VDD3P3-CPU, mcu.GND, 50.0e-9)
    for i in 0 to 22 do:
      supports gpio:
        require io:io-pin from mcu
        gpio.gpio => io.p
        property(io.p.digital-io) = dio
    for i in 0 to 16 do:
      supports timer:
        require io:io-pin from mcu
        timer.timer => io.p
        property(io.p.digital-io) = dio
    for i in 0 to 2 do:
      val ocdb-uart = /uart()
      supports ocdb-uart:
        require io:io-pin[2] from mcu
        ocdb-uart.tx => io[0].p
        property(io[0].p.digital-output) = dio
        ocdb-uart.rx => io[1].p
        property(io[1].p.digital-input) = 
          DigitalInput(vil, vih, mcu.VDD3P3-CPU, 
                       mcu.GND, 50.0e-9)  
  let :
    val oc  = OpenCollector(vol, 28.0e-3)
    val dio = DigitalIO(oc, vil, vih, 
                        mcu.VDD3P3-CPU, mcu.GND, 50.0e-9)
    for i in 0 to 2 do:
      supports i2c:
        require io:io-pin[2] from mcu
        i2c.sda => io[0].p
        i2c.scl => io[1].p
        property(io[0].p.digital-io) = dio
        property(io[1].p.digital-io) = dio

  schematic-group(self) = ESP32

pcb-landpattern pqfn50p700x700x104-49n :
  pad p[1] : smd-pad(0.45, 0.35) at loc(-3.265, 2.75, 0.0)
  pad p[2] : smd-pad(0.45, 0.35) at loc(-3.265, 2.25, 0.0)
  pad p[3] : smd-pad(0.45, 0.35) at loc(-3.265, 1.75, 0.0)
  pad p[4] : smd-pad(0.45, 0.35) at loc(-3.265, 1.25, 0.0)
  pad p[5] : smd-pad(0.45, 0.35) at loc(-3.265, 0.75, 0.0)
  pad p[6] : smd-pad(0.45, 0.35) at loc(-3.265, 0.25, 0.0)
  pad p[7] : smd-pad(0.45, 0.35) at loc(-3.265, -0.25, 0.0)
  pad p[8] : smd-pad(0.45, 0.35) at loc(-3.265, -0.75, 0.0)
  pad p[9] : smd-pad(0.45, 0.35) at loc(-3.265, -1.25, 0.0)
  pad p[10] : smd-pad(0.45, 0.35) at loc(-3.265, -1.75, 0.0)
  pad p[11] : smd-pad(0.45, 0.35) at loc(-3.265, -2.25, 0.0)
  pad p[12] : smd-pad(0.45, 0.35) at loc(-3.265, -2.75, 0.0)
  pad p[13] : smd-pad(0.35, 0.45) at loc(-2.75, -3.265, 0.0)
  pad p[14] : smd-pad(0.35, 0.45) at loc(-2.25, -3.265, 0.0)
  pad p[15] : smd-pad(0.35, 0.45) at loc(-1.75, -3.265, 0.0)
  pad p[16] : smd-pad(0.35, 0.45) at loc(-1.25, -3.265, 0.0)
  pad p[17] : smd-pad(0.35, 0.45) at loc(-0.75, -3.265, 0.0)
  pad p[18] : smd-pad(0.35, 0.45) at loc(-0.25, -3.265, 0.0)
  pad p[19] : smd-pad(0.35, 0.45) at loc(0.25, -3.265, 0.0)
  pad p[20] : smd-pad(0.35, 0.45) at loc(0.75, -3.265, 0.0)
  pad p[21] : smd-pad(0.35, 0.45) at loc(1.25, -3.265, 0.0)
  pad p[22] : smd-pad(0.35, 0.45) at loc(1.75, -3.265, 0.0)
  pad p[23] : smd-pad(0.35, 0.45) at loc(2.25, -3.265, 0.0)
  pad p[24] : smd-pad(0.35, 0.45) at loc(2.75, -3.265, 0.0)
  pad p[25] : smd-pad(0.45, 0.35) at loc(3.265, -2.75, 0.0)
  pad p[26] : smd-pad(0.45, 0.35) at loc(3.265, -2.25, 0.0)
  pad p[27] : smd-pad(0.45, 0.35) at loc(3.265, -1.75, 0.0)
  pad p[28] : smd-pad(0.45, 0.35) at loc(3.265, -1.25, 0.0)
  pad p[29] : smd-pad(0.45, 0.35) at loc(3.265, -0.75, 0.0)
  pad p[30] : smd-pad(0.45, 0.35) at loc(3.265, -0.25, 0.0)
  pad p[31] : smd-pad(0.45, 0.35) at loc(3.265, 0.25, 0.0)
  pad p[32] : smd-pad(0.45, 0.35) at loc(3.265, 0.75, 0.0)
  pad p[33] : smd-pad(0.45, 0.35) at loc(3.265, 1.25, 0.0)
  pad p[34] : smd-pad(0.45, 0.35) at loc(3.265, 1.75, 0.0)
  pad p[35] : smd-pad(0.45, 0.35) at loc(3.265, 2.25, 0.0)
  pad p[36] : smd-pad(0.45, 0.35) at loc(3.265, 2.75, 0.0)
  pad p[37] : smd-pad(0.35, 0.45) at loc(2.75, 3.265, 0.0)
  pad p[38] : smd-pad(0.35, 0.45) at loc(2.25, 3.265, 0.0)
  pad p[39] : smd-pad(0.35, 0.45) at loc(1.75, 3.265, 0.0)
  pad p[40] : smd-pad(0.35, 0.45) at loc(1.25, 3.265, 0.0)
  pad p[41] : smd-pad(0.35, 0.45) at loc(0.75, 3.265, 0.0)
  pad p[42] : smd-pad(0.35, 0.45) at loc(0.25, 3.265, 0.0)
  pad p[43] : smd-pad(0.35, 0.45) at loc(-0.25, 3.265, 0.0)
  pad p[44] : smd-pad(0.35, 0.45) at loc(-0.75, 3.265, 0.0)
  pad p[45] : smd-pad(0.35, 0.45) at loc(-1.25, 3.265, 0.0)
  pad p[46] : smd-pad(0.35, 0.45) at loc(-1.75, 3.265, 0.0)
  pad p[47] : smd-pad(0.35, 0.45) at loc(-2.25, 3.265, 0.0)
  pad p[48] : smd-pad(0.35, 0.45) at loc(-2.75, 3.265, 0.0)
  pad p[49] : smd-pad(5.4, 5.4) at loc(0.0, -0.0, 0.0)

  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(-3.55, 3.11), Point(-3.55, 3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(-3.55, 3.55), Point(-3.11, 3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(-3.55, -3.11), Point(-3.55, -3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(-3.55, -3.55), Point(-3.11, -3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(3.55, -3.11), Point(3.55, -3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(3.55, -3.55), Point(3.11, -3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(3.55, 3.11), Point(3.55, 3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.127, [ Point(3.55, 3.55), Point(3.11, 3.55) ])
  layer(Silkscreen("F-SilkS", Top)) = Circle(Point(-4.2, 2.8), 0.05)
  layer(Courtyard(Top)) = Rectangle(7.1, 7.1)
  ref-label()
