#use-added-syntax(jitx)
defpackage ocdb/components/microchip/MCP9600 :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults

  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components

public pcb-component component :
  manufacturer = "Microchip"
  mpn = "MCP9600"
  description = "Thermocouple EMF to Temperature Converter, ±1.5°C Maximum Accuracy"
  
  pin-properties :
    [pin:Ref      | pads:Int ...         | side:Dir     ]
    [GND      | 1, 3, 5, 6, 7, 9, 10, 13, 17, 18, 21 | Down  ]
    [Vin+     | 2               | Right   ]
    [Vin-     | 4               | Right   ]
    [Vdd      | 8               | Up      ]
    [Alert1   | 11              | Left    ]
    [Alert2   | 12              | Left    ]
    [Alert3   | 14              | Left    ]
    [Alert4   | 15              | Left    ]
    [ADDR     | 16              | Left    ]
    [SCL      | 19              | Left    ]
    [SDA      | 20              | Left    ]

  make-box-symbol()
  assign-landpattern(qfn-landpattern(0.65, 5.0, 20, 0.3, 0.4, [3.25 3.25]))

public pcb-module module (i2c-addr:Int):
  port power : power
  port i2c : i2c
  port alert : pin[4]
  pin addr
  port in : diff-pair

  inst therm : ocdb/components/microchip/MCP9600/component
  net gnd (therm.GND power.gnd)
  net (power.vdd, therm.Vdd)
  cap-strap(therm.Vdd, gnd, 1.0e-6)

  property(therm.Vdd.power-request) = [3.0 0.005 5.0e-3]
  property(therm.Vdd.gnd-ref) = therm.GND

  net (i2c.sda, therm.SDA)
  net (i2c.scl, therm.SCL)
  net (alert[0], therm.Alert1)
  net (alert[1], therm.Alert2)
  net (alert[2], therm.Alert3)
  net (alert[3], therm.Alert4)
  net (addr, therm.ADDR)
  net (therm.Vin- in.N)
  net (therm.Vin+ in.P)

  switch(i2c-addr) :
    0 :  net (therm.ADDR, gnd)
    7 :  net (therm.ADDR, therm.Vdd)
    else : fatal("Unsupported address for MCP9600: %_" % [i2c-addr])

public pcb-module module () :
  inst i : module(0)
