#use-added-syntax(jitx)
defpackage ocdb/identifiers :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/land-patterns
  import ocdb/generic-components
  import ocdb/symbols
; PCB Title
; can be on multiple layers (one bigger than other?) and have box on multiple layers

; outline can be none

; copper, silk, soldermask

; if text on copper
; outline only- copper
; if text on silk
; outline or rectangle on copper, rectangle on copper + solkermask, copper rectangle/soldermask outline, copper rectangle/silkscreen outline
; if text on  soldermask
; rectangle on copper only
; outline, none, rectangle, outlined rectangle
;layer - 
defstruct WildCard <: Equalable
defmethod equal? (wc:WildCard, e:Equalable) : true
defmethod equal? (e:Equalable, wc:WildCard) : true
public val *any* = WildCard()

defn check-valid-string (text-layer:String,to-check:Tuple<String>) :
  var is-match:True|False = false
  ; var i=0
  ; val le = length(to-check)
  ; for i in 0 to le do:
  for i in to-check do:
    if matches?(text-layer, 0, i) :
      is-match = true
  if not is-match :
    fatal("Invalid string passed to landpattern text-lp.")  

pcb-landpattern text-lp (text:String, size:Double, text-layer:String, outline-size:Double, outline-layer:String, rectangle-layer:String) :
  var outline-extend = 0.0
  var rectangle-extend = 0.0
  var rectangle-largest:True|False = true
  ; check inputs are valid
  check-valid-string(lower-case(text-layer),["copper" "silkscreen" "soldermask"])
  check-valid-string(lower-case(outline-layer),["none" "copper" "silkscreen" "soldermask"])
  check-valid-string(lower-case(rectangle-layer),["none" "copper" "silkscreen" "soldermask"])
  switch( lower-case(text-layer) ) :
    "copper" :
      fatal("Text on copper layer currently not supported.")
      ; copper(LayerIndex(0)) = Text(text, size, C, loc(0.0, 0.0))
    "soldermask" :
      layer(SolderMask(Top)) = Text(text, size, C, loc(0.0, 0.0))
    "silkscreen" :
      layer(Silkscreen("title", Top)) = Text(text, size, C, loc(0.0, 0.0))

  switch( [lower-case(text-layer), lower-case(outline-layer), lower-case(rectangle-layer)] ) :
  ; text only
    ["copper", "none", "none"] :
      ; copper(LayerIndex(0)) = Text(text, size, C, loc(0.0, 0.0))
      fatal("Text on copper layer currently not supported.")
    ["soldermask", "none", "none"] :
      layer(SolderMask(Top)) = Text(text, size, C, loc(0.0, 0.0))
    ["silkscreen", "none", "none"] :
      layer(Silkscreen("title", Top)) = Text(text, size, C, loc(0.0, 0.0))

  ; text and outline only
    ["copper", "copper", "none"] :
      outline-extend = clearance(current-rules(), MinCopperCopperSpace) + clearance(current-rules(), MinCopperWidth)
    ["copper", "silkscreen", "none"] :
      outline-extend = clearance(current-rules(), MinCopperCopperSpace) + clearance(current-rules(), MinCopperWidth)
    ["silkscreen", "copper", "none"] :
      outline-extend = clearance(current-rules(), MinCopperWidth)
    ["silkscreen", "silkscreen", "none"] :
      outline-extend = clearance(current-rules(), MinSolderMaskBridge) ; this needs to be silkscreen to silkscreen

  ; copper rectangles
    ["copper", *any*, "copper"] :
      fatal("Invalid input passed to text landpattern. Silkscreen rectangle on same layer as text - copper - and text wont be visible.")
    ["soldermask", "soldermask", "copper"] :
      outline-extend = clearance(current-rules(), MinSolderMaskBridge) 
      rectangle-extend = rectangle-extend clearance(current-rules(), SolderMaskRegistration) 
    ["silkscreen", "soldermask", "copper"] :
      outline-extend = clearance(current-rules(), MinSilkSolderMaskSpace)
      rectangle-extend = rectangle-extend + clearance(current-rules(), SolderMaskRegistration)
    ["soldermask", "silkscreen", "copper"] :
      outline-extend = clearance(current-rules(), MinSilkSolderMaskSpace)
      rectangle-extend = outline-extend
    ["silkscreen", "silkscreen", "copper"] :
      outline-extend = clearance(current-rules(), MinSolderMaskBridge) ; this needs to be silkscreen to silkscreen
      rectangle-extend = outline-extend 
    ["soldermask", "none", "copper"] :
      rectangle-extend = clearance(current-rules(), SolderMaskRegistration)
    ["silkscreen", "none", "copper"] :
      rectangle-extend = clearance(current-rules(), MinSilkscreenWidth)
    ["soldermask", "copper", "copper"] :
      rectangle-extend = clearance(current-rules(), SolderMaskRegistration) 
      outline-extend = rectangle-extend + clearance(current-rules(), MinCopperCopperSpace) + clearance(current-rules(), MinCopperWidth)
    ["silkscreen", "copper", "copper"] :
      rectangle-extend = clearance(current-rules(), MinSilkscreenWidth) ; needs to be silkscreen registration
      outline-extend = rectangle-extend + clearance(current-rules(), MinCopperCopperSpace) + clearance(current-rules(), MinCopperWidth)


    ["silkscreen", "copper", "soldermask"] :
      println("special case")
    ; soldermask and copper rectangle

    ["soldermask", *any*, "none"] :
      fatal("Invalid input passed to text landpattern. Text in soldermask must have a copper rectangle to protect PCB. ")
    [*any*, *any*, "silkscreen"] :
      fatal("Invalid input passed to text landpattern. Silkscreen rectangle will cover other layers and text wont be visible.")
    else:
      fatal("Invalid input passed to text landpattern, valid layers text are: copper, soldermask, silkscreen. 
        Valid layers for outline and rectangle are: none, copper, soldermask, silkscreen.")

  val text-dims = dims( Text(text, size, C, loc(0.0, 0.0)) )
  ; val width = clearance(current-rules(), MinSilkscreenWidth) + x(text-dims)
  var width = x(text-dims)
  var height = y(text-dims)
  println("x %_ y %_" % [width height])
  val outline-width = width + outline-extend
  val outline-height = height + outline-extend
  val rectangle-width = width + rectangle-extend
  val rectangle-height = height + rectangle-extend
  
    ; copper(LayerIndex(0)) = Line(clearance(current-rules(), MinCopperCopperSpace), [ Point(-1.00245,4.80933), Point(-1.00245,-0.57317), Point(-8.60245,-0.57317)]) 
  switch( lower-case(outline-layer) ) :
    "copper" :
      println("copper")
      ; copper(LayerIndex(0)) = Line(outline-size, [ Point(-1 * outline-width, -1 * outline-height), Point(-1 * outline-width, outline-height), 
      ;   Point(outline-width, outline-height), Point(outline-width, -1 * outline-height), Point(-1 * outline-width, -1 * outline-height) ])
    "soldermask" :
      println("soldermask")
      ; layer(SolderMask(Top)) = Line(outline-size, [ Point(-outline-width, -outline-height), Point(-outline-width, outline-height), 
      ;   Point(outline-width, outline-height), Point(outline-width, -outline-height), Point(-outline-width, -outline-height) ])
    "silkscreen" :
      println("silkscreen")
      ; layer(Silkscreen("title", Top)) = Line(outline-size, [ Point(-outline-width, -outline-height), Point(-outline-width, outline-height), 
      ;   Point(outline-width, outline-height), Point(outline-width, -outline-height), Point(-outline-width, -outline-height) ])

  switch( lower-case(rectangle-layer) ) :
    "copper" :
      copper(LayerIndex(0)) = Rectangle(19.0, 0.7696, loc(0.89755, -4.80397))
      println("copper rect %_ %_ "% [rectangle-width, rectangle-height])
      ; copper(LayerIndex(0)) = Rectangle(rectangle-width, rectangle-height, loc(0.0, 0.0))
    "soldermask" :
      println("soldermask rect %_ %_ "% [rectangle-width, rectangle-height])
      layer(SolderMask(Top)) = Rectangle(rectangle-width, rectangle-height, loc(0.0, 0.0))
    "silkscreen" :
      println("silkscreen rect %_ %_ "% [rectangle-width, rectangle-height])
      layer(Silkscreen("title", Top)) = Rectangle(rectangle-width, rectangle-height, loc(0.0, 0.0))
    else:
      rectangle-largest = false

  if rectangle-largest :
    layer(Courtyard(Top)) = Rectangle(rectangle-width, rectangle-height, loc(0.0, 0.0))
  else : 
    layer(Courtyard(Top)) = Rectangle(outline-width, outline-height, loc(0.0, 0.0))
  
pcb-symbol generic-symbol :
  layer("foreground") = Rectangle(5.08, 5.08, loc(0.0, 0.0))
  layer("foreground") = Text(">VALUE", 0.762, SW, loc(-2.54, 2.84))
  layer("foreground") = Text(">REF", 0.762, SW, loc(-2.54, 3.902))

public pcb-component title (title:String, size:Double, text-layer:String, outline-size:Double, outline-layer:String, rectangle-layer:String) :
  name = title
  description = title
  manufacturer = "non-BOM"
  mpn = "non-BOM"
  assign-landpattern(text-lp(title, size, text-layer, outline-size, outline-layer, rectangle-layer) )
  val sym = generic-symbol
  symbol = sym()
  reference-prefix = "TXT"

; Internal Part number, version, revision

; Engineer