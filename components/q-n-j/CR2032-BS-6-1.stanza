#use-added-syntax(jitx)
defpackage ocdb/q-n-j/CR2032-BS-6-1 :
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import ocdb/defaults
  import ocdb/land-patterns
  import ocdb/symbols
  import ocdb/symbol-utils
  import ocdb/generic-components

  import ocdb/bundles
  import ocdb/box-symbol
  import ocdb/property-structs
  import ocdb/generator-utils
  import ocdb/checks
  import ocdb/tolerance

pcb-landpattern CR2032-BS-6-1-landpattern :

  pad p[1] : smd-pad(4.2, 3.0) at loc(0.000,   14.500)
  pad p[2] : smd-pad(4.2, 3.0) at loc(0.000,  -14.500)

  layer(Silkscreen("f-silk", Top)) = Line(0.12, [ Point(0.0, 17.75), Point(0.0, 16.75) ])
  layer(Silkscreen("f-silk", Top)) = Line(0.12, [ Point(-0.5, 17.25), Point(0.5, 17.25) ])
  layer(Courtyard(Top)) = Rectangle(16.0, 32.0)
  ref-label()


public pcb-component component :
  port p : pin[1 through 2]

  manufacturer = "Q&J"
  description = "SMD Battery Box/Battery Holders ROHS"
  mpn = "CR2032-BS-6-1"
  reference-prefix = "B"
  ; public pcb-landpattern two-pin-landpattern (Z:Double, G:Double, X:Double, w:Double, h:Double):
  ; from IPC-SM-782 spec
  ; Z - width between outer pad edges
  ; G - width between inner pad edges
  ; X - pad height
  ; w, h - width and height of courtyard in mm
  ;val pkg = two-pin-landpattern(32.0, 26.0, 4.2, 32.0, 16.0)
  val pkg = CR2032-BS-6-1-landpattern
  val sym = header-symbol(2,1)
  symbol = sym(p[1] => sym.p[1], p[2] => sym.p[2])
  landpattern = pkg(p[1] => pkg.p[1], p[2] => pkg.p[2])
  property(self.rated-temperature) = RatedTemperature(min-max(-20.0, 70.0))
