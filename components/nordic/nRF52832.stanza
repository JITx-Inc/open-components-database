#use-added-syntax(jitx)
defpackage ocdb/components/nordic/nRF52832 :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults

  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/checks
  import ocdb/utils/passive-checks/resonator-checks

pcb-bundle io-pin : 
  pin p

public pcb-component component :
  manufacturer = "Nordic Semiconductor"
  mpn ="nRF52832-QFAA-R7"
  description = "NRF52 BLE SoC"
  datasheet = "https://infocenter.nordicsemi.com/pdf/nRF52832_PS_v1.4.pdf"
  port osc : crystal
  port lfosc : low-freq-oscillator

  pin-properties :
    [pin:Ref   | pads:Int ... | side:Dir | bank:Ref]
    [dcc       | 47           | Up       | power  ]
    [dec[0]    | 1            | Up       | power  ]
    [dec[1]    | 32           | Up       | power  ]
    [dec[2]    | 33           | Up       | power  ]
    [dec[3]    | 46           | Up       | power  ]
    [vdd       | 13 36 48     | Up       | power  ]
    [gnd       | 31 45 49     | Down     | power  ]
    [SWDIO     | 26           | Left     | io     ]
    [SWDCLK    | 25           | Left     | io     ]
    [osc.out   | 35           | Left     | io     ]
    [osc.in    | 34           | Left     | io     ]
    [ANT       | 30           | Right    | io     ]
    ; for i in 0 to 11 do : 
    [lfosc.in  | 2            | Right    | io     ]
    [lfosc.out | 3            | Right    | io     ]
    for i in 2 to 11 do : 
      [p0[i]   | i + 2        | Right    | io   ]
    for i in 11 to 22 do : 
      [p0[i]   | i + 3        | Right    | io   ]
    [p0[22]    | 27           | Right    | io     ]
    [p0[23]    | 28           | Right    | io     ]
    [p0[24]    | 29           | Right    | io     ]
    for i in 25 to 32 do : 
      [p0[i]   | i + 12       | Right    | io   ]

  ; for i in 0 to 32 do:
  for i in 2 to 32 do:
    supports io-pin :
      io-pin.p => self.p0[i]
  for i in 2 to 5 do :
    supports adc :
      adc.adc => self.p0[i]
  for i in 28 to 32 do :
    supports adc :
      adc.adc => self.p0[i]

  make-box-symbol()
  assign-landpattern(qfn-landpattern(0.4, 6.0, 48, 0.2, 0.4, [4.6 4.6]))

  ; Max critical gain for oscillator: 4*ESR*(2*PI*F)^2*(c-shunt + c-load)^2
  ; https://infocenter.nordicsemi.com/pdf/nRF52832_PS_v1.4.pdf -- Section 19.4.2
  property(osc.max-critical-gain) = 0.003 ; A/V
  property(osc.drive-level) = 13.0e-6 ; W. 250uA^2*ESR 
  property(osc.c) = 1.0e-12 ; Internal capacitance
  property(osc.frequency-tolerance) = 40.0e-6 * 32.0e6 ; 40ppm allowed from datasheet
  property(osc.frequency) = 32.0e6 

  property(lfosc.max-critical-gain) = 3.5e-6 ; A/V
  property(lfosc.drive-level) = 6.5e-9; W. 0.25uA^2*ESR 
  property(lfosc.c) = 4.0e-12 ; Internal capacitance
  property(lfosc.frequency-tolerance) = 50.0e-6 * 32.786e3; 50ppm allowed from datasheet
  property(lfosc.frequency) = 32.768e3 


pcb-module t-filter :
  pin in
  pin out
  pin gnd
  inst l1 : smd-inductor(["inductance" => 2.7e-9 "min-self-resonant-frequency" => 7.0e6 "min-quality-factor" => 8.0])
  inst l2 : smd-inductor(["inductance" => 3.9e-9 "min-self-resonant-frequency" => 7.0e6 "min-quality-factor" => 8.0])
  inst c : ceramic-cap(1.0e-12)
  net (c.p[1], in)
  net (c.p[2], l1.p[1], l2.p[1])
  net (l2.p[2], out)
  net (l1.p[2], gnd)
  place(l2) at loc(0.0, 0.0) on Top
  place(l1) at loc(-1.4, 0.6, 90.0) on Top (relative-to l2)
  place(c) at loc(-2.8, 0.0) on Top (relative-to l2)

public pcb-module module :
  port power : power
  pin ant
  pin gnd
  ; Chip antenna, with lpf, and t-filter matching network
  inst proc : ocdb/components/nordic/nRF52832/component
  net (gnd, proc.gnd, power.gnd)
  net (power.vdd, proc.vdd) 
  ; ; Decoupling caps
  bypass-cap-strap(proc.vdd, gnd, 4.7e-6)
  bypass-cap-strap(proc.vdd, gnd, 0.1e-6)
  bypass-cap-strap(proc.vdd, gnd, 0.1e-6)
  bypass-cap-strap(proc.dec[0], gnd, 0.1e-6)
  bypass-cap-strap(proc.dec[2], gnd, 0.1e-9)
  bypass-cap-strap(proc.dec[3], gnd, 1.0e-6)

  property(proc.vdd.power-request) = [3.0 0.1 5.0e-3]
  property(proc.vdd.gnd-ref) = gnd

  ; External 32 MHz crystal
  inst xtal : ocdb/components/abracon/ABM12-32-B2X-T3/component
  net (gnd, xtal.gnd)
  net XC1 (proc.osc.in, xtal.p[2])
  net XC2 (proc.osc.out, xtal.p[1])
  val load-cap = add-xtal-caps(xtal, gnd)
  check-resonator(xtal, property(proc.osc), load-cap)

  ; External 32.768 kHz crystal
  inst lfxtal : ocdb/components/epson/FC-135/component
  net (proc.lfosc.in lfxtal.p[1])
  net (proc.lfosc.out lfxtal.p[2])
  val lf-cap = add-xtal-caps(lfxtal, gnd)
  check-resonator(lfxtal, property(proc.lfosc), lf-cap)

  net (proc.ANT ant)
  ; inst ant : {ocdb/components/johanson/2450AT18A100/component}
  ; inst lpf : {ocdb/components/johanson/2450FM07A0029/component}
  ; net (proc.ANT, lpf.in)
  ; inst t : t-filter
  ; net (lpf.out, t.in)
  ; net (t.out, ant.feed)
  ; net (t.gnd, lpf.gnd gnd)
  ; place(proc) at loc(0.0, 0.0) on Top
  ; place(lpf) at loc(4.7, 0.0) on Top (relative-to proc)
  ; place(ant) at loc(12.9, 0.0) on Top (relative-to proc)
  ; place(t.l2) at loc(9.6, 0.0) on Top (relative-to proc)
  ; layer(Courtyard(Top)) = Rectangle(6.0, 3.0, loc(6.35, 0.0))

  for i in 0 to 32 do :
    supports gpio :
      require io:io-pin from proc
      gpio.gpio => io.p
  for i in 0 to 8 do :
    supports adc :
      require adc-pin:adc from proc
      adc.adc => adc-pin.adc
  for i in 0 to 2 do :
    supports i2c :
      require pins:io-pin[2] from proc
      i2c.sda => pins[0].p
      i2c.scl => pins[1].p
  for i in 0 to 3 do :
    supports spi-controller() :
      require pins:io-pin[4] from proc
      spi-controller().copi => pins[0].p
      spi-controller().cipo => pins[1].p
      spi-controller().sck => pins[2].p
      spi-controller().cs => pins[3].p
  for i in 0 to 2 do :
    supports uart() :
      require pins:io-pin[2] from proc
      uart().tx => pins[0].p
      uart().rx => pins[1].p
  supports swd() :
    swd().swdio => proc.SWDIO
    swd().swdclk => proc.SWDCLK

