#use-added-syntax(jitx)
defpackage ocdb/components/jst/JST-BxxB-PASK :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/symbol-utils
  import ocdb/utils/generic-components
  import ocdb/utils/bundles
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs

;<test>
n-pin: 2
B: 2.54
<test>
public pcb-landpattern JST-BxxB-PASK-pkg (n-pin:Int, B:Double) :
  val offset-x =  (5.3 / 2.0) - (1.7 + 0.8 / 2.0) ;Connector Dims
  make-pin-grid(n-pin, 1, 2.0, 0.0, pth-pad(0.4), offset-x, 0.0)
  layer(Courtyard(Top)) = Rectangle(5.4, B + 0.1)
  layer(Silkscreen("F-SilkS", Top)) = Line(0.2, [
    Point(5.3 / 2.0 + 0.1, B / 2.0),
    Point(5.3 / 2.0 + 0.1, B / 2.0 - 0.8)
  ])
  ref-label()

;<test>
n-pin: 2
<test>
public pcb-component component (n-pin:Int):
  var first-part : String = "B"
  var A = to-double((n-pin -2) * 2) + 2.0
  var B = to-double(n-pin * 2) + 2.0
  if (n-pin < 2 or n-pin > 16):
    println("Invalid n-pins for JST-BxxB-PASK/component: %_. n-pin must be in range [2, 16]")
   
  if n-pin < 10:
    first-part = "B0"
    pin-properties :
      [pin:Ref     | pads:Int ...   | side:Dir]
      for i in 1 through n-pin do :
        [p[i] | i | Left]  
  else:
    pin-properties :
      [pin:Ref     | pads:Int ...   | side:Dir]
      for i in 1 through n-pin by 2 do :
        [p[i] | i | Left]
        [p[i + 1] | (i + 1) | Right]

  reference-prefix = "J"
  name = string-join(["JST ", first-part, n-pin, "B-PASK Top Entry TH"])
  mpn = string-join([first-part n-pin "B-PASK-1(LF)(SN)"])
  assign-landpattern(JST-BxxB-PASK-pkg(n-pin, B))
  make-box-symbol()
