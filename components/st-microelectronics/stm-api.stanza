#use-added-syntax(jitx)
defpackage ocdb/st-microelectronics/stm-api :
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import ocdb/defaults
  import ocdb/land-patterns
  import ocdb/symbols
  import ocdb/symbol-utils
  import ocdb/generic-components
  import ocdb/generator-utils
  import ocdb/bundles
  import ocdb/box-symbol
  import ocdb/property-structs
  import ocdb/checks

; public pcb-struct ocdb/st-microelectronics/stm-api/STmicroConfigs :

public deftype Settings
public defmulti entries (s:Settings) -> Tuple<KeyValue<Symbol,?>>
public defmulti set (s:Settings, k:Symbol, value) -> False
public defmulti get (s:Settings, k:Symbol) -> ?
public defn Settings (initial-entries:Tuple<KeyValue<Symbol,?>>) :
  val table = to-hashtable<Symbol,?>(initial-entries)
  new Settings :
    defmethod entries (this) :
      val sorted-keys = qsort(keys(table))
      to-tuple $ for k in sorted-keys seq :
        k => table[k]
    defmethod set (this, k:Symbol, v) :
      table[k] = v
    defmethod get (this, k:Symbol) :
      table[k]

public val DEFAULT-SETTINGS = [
    `bypass-package => 4.7e-6
    `bypass-pin => 100.0e-9
    `boot-from => "flash"
    `debug-interface => swd
    `debug-connector => ocdb/tag-connect/TC2050-IDC-NL/module
    `HSE-freq => 16.0e6   `HSE-ppm => 30.0e-6 `HSE-source => "crystal"
    `LSE-freq => 32.768e3 `LSE-ppm => 0.05 `LSE-source => "crystal"]

defn power-pins (stm:JITXObject) -> Tuple<JITXObject> :
  val result = to-tuple $ for p in pins(stm) filter :
    substring?(lower-case(to-string(ref(p))), "vdd")
  if empty?(result):
    fatal("%_ is missing an identifiable power pin." % [ref(stm)])
  result
defn gnd-pins (stm:JITXObject) -> Tuple<JITXObject> :
  val result = to-tuple $ for p in pins(stm) filter :
    substring?(lower-case(to-string(ref(p))), "vss")
  if empty?(result):
    fatal("%_ is missing an identifiable ground pin." % [ref(stm)])
  result

public defn generate-bypass (stm:JITXObject, bypass-package:Double, bypass-pin:Double) :
  inside pcb-module :
    val power-pins = power-pins(stm)
    val gnd-pin = gnd-pins(stm)[0]
    if length(power-pins) > 0 :
      bypass-cap-strap(power-pins[0], gnd-pin, bypass-package)
      for p in power-pins do :
        bypass-cap-strap(p,  gnd-pin, bypass-pin)

public defn connect-power (stm:JITXObject) :
  inside pcb-module :
    val power-pins = power-pins(stm)
    val gnd-pins = gnd-pins(stm)
    port power : power
    for p in power-pins do : 
      net VDD (power.vdd p)
    for p in gnd-pins do   :
       net GND (p, power.gnd)

    val v-range = recommended-voltage(property(power-pins[0].power-pin))
    if contains?(v-range, 3.3):
      property(power-pins[0].power-request) = [3.3, 0.1, 3.3 * 0.03]
    else if contains?(v-range, 1.8):
      property(power-pins[0].power-request) = [1.8, 0.1, 1.8 * 0.03]

    property(power-pins[0].gnd-ref) = gnd-pins[0]

    ; TODO Add battery option to API, currently assumes none.
    if has-pin?(stm, "VBAT") :
      net (stm.VBAT power.vdd)

public defn connect-reset (stm:JITXObject) :
  inside pcb-module :
    pin reset
    net (stm.NRST reset)
    val power-pin = power-pins(stm)[0]
    val gnd-pin = gnd-pins(stm)[0]
    res-strap(power-pin, stm.NRST, 10.0e3)
    cap-strap(power-pin, stm.NRST, 10.0e-9)

    ; Look for power-on reset pins
    if has-pin?(stm, "NPOR") :
      val v-range = recommended-voltage(property(power-pin.power-pin))
      if contains?(v-range, 1.8):
        inst mon : ocdb/on-semiconductor/NCP30x/component(1.8)
        bypass-cap-strap(stm.NPOR, gnd-pin, 0.1e-6)
        net (mon.gnd, gnd-pin)
        net (mon.input, power-pin)
        net (mon.output, stm.NPOR)


defn has-pin? (stm:JITXObject, pin-q:String) :
  val t = to-tuple $ for p in pins(stm) filter :
    substring?(to-string(ref(p)), pin-q)
  not empty?(t)

defn has-port? (stm:JITXObject, port-q:String) :
  val t = to-tuple $ for p in ports(stm) filter :
    substring?(to-string(ref(p)), port-q)
  not empty?(t)

public defn set-boot (stm:JITXObject, boot-from:String) :
  inside pcb-module :
    val power-pin = power-pins(stm)[0]
    val gnd-pin = gnd-pins(stm)[0]
    switch(boot-from):
      "flash" :
        res-strap(stm.BOOT[0], gnd-pin, 10.0e3)
      "system" :
        if not has-pin?(stm, "BOOT[1]") : 
          println("system boot not supported on %_." % [ref(stm)])
        else :
          res-strap(stm.BOOT[1], gnd-pin, 10.0e3)
          res-strap(stm.BOOT[0], power-pin, 10.0e3)
      "sram" :
        if not has-pin?(stm, "BOOT[1]") : 
          println("system boot not supported on %_." % [ref(stm)])
        else:
          res-strap(stm.BOOT[1], power-pin, 10.0e3)
          res-strap(stm.BOOT[0], power-pin, 10.0e3)

    check connected(stm.BOOT[0])
    if has-pin?(stm, "BOOT[1]") : 
      check connected(stm.BOOT[1])

defn supports? (module:InstantiableType, bundle:PortType) -> True|False :
  pcb-module temp :
    inst i : module
    require r:bundle from i
  set-main-module(temp) ;uh oh
  val result = assign-pins?()
  result is-not False

public defn connect-debug (stm:JITXObject, debug-interface:PortType, connector:Instantiable) :
  inside pcb-module:
    if supports?(instantiable-type(stm), debug-interface) and supports?(connector, debug-interface):
      inst debug-con : connector
      require debug-m:debug-interface from stm
      require debug-c:debug-interface from debug-con
      net DEBUG (debug-m debug-c)
      schematic-group(debug-con) = debug
      if has-port?(debug-con, "power") :
        net (debug-con.power.vdd, power-pins(stm)[0])
        net (debug-con.power.gnd, gnd-pins(stm)[0])
    else :
      println("Unsupported debug-interface on %_" % [ref(stm)])

; defn select-crystal (freq:Double, ppm:double):

public defn setup-clocks (stm:JITXObject, HSE-freq:Double, HSE-ppm:Double, HSE-source:String, LSE-freq:Double, LSE-ppm:Double, LSE-source:String) :
  inside pcb-module:
    val power-pin = power-pins(stm)[0]
    val gnd-pin = gnd-pins(stm)[0]
    ; Can we add an external clock, and do we need one?
    if supports?(instantiable-type(stm), high-freq-oscillator) and HSE-ppm < 0.03 :
      switch(HSE-source):
        "crystal" :
            ; supported crystal oscillator frequencies
          val HSE-FREQS = [
            16.0e6,
            24.0e6,
            25.0e6,
            26.0e6,
            32.0e6,
          ]
          inst hf-xtal :
            if contains?(HSE-FREQS, HSE-freq): 
              ocdb/epson/TSX-3225/component(HSE-freq)
            else:
              ocdb/abracon/AMB7/component(HSE-freq)
          if contains?(HSE-FREQS, HSE-freq) :
            net (hf-xtal.gnd, gnd-pin)

          require hf-osc:high-freq-oscillator from stm
          net (hf-osc.in hf-xtal.p[1])
          net (hf-osc.out hf-xtal.p[2])
          val hf-cb = add-xtal-caps(hf-xtal, gnd-pin)
          check-oscillator(hf-xtal, CrystalOscillator(2.0e-3, 100.0e-6, 3.0e-12, HSE-ppm * HSE-freq, HSE-freq), hf-cb)
        "osc" :
          if HSE-ppm > 25.0e-6 :
            require hf-osc:high-freq-oscillator from stm
            inst osc :  ocdb/abracon/AMPM/module(HSE-freq)
            net (hf-osc.in osc.out)
            net (osc.power.gnd, gnd-pin)
            net (osc.power.vdd, power-pin)
          else : 
            println("MEMS oscillators in library can't meet ppm. Try a 'crystal' source.")
    if supports?(instantiable-type(stm), low-freq-oscillator) and LSE-ppm < 0.03 :
      switch(LSE-source):
        "crystal" :
          if LSE-freq == 32.768e3 :
            require lf-osc:low-freq-oscillator from stm
            inst losc : ocdb/epson/FC-135/component
            net (lf-osc.in losc.p[1])
            net (lf-osc.out losc.p[2])
            val lf-cb = add-xtal-caps(losc, gnd-pin)
            check-oscillator(losc, CrystalOscillator(3.1e-6, 0.5e-6, 4.0e-12, 50.0e-6 * 32.768e3, 32.768e3), lf-cb)
          else:
            println("Unsupported frequency for LSE: %_. Try 32.768e3." % [LSE-freq])
        else:
          println("Unsupported sourece for LSE. Try a 'crystal' source.")
    else if LSE-ppm < 0.03:
      println("%_ does not support an external LSE source." % [ref(stm)])





