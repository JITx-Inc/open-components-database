#use-added-syntax(jitx)
defpackage ocdb/components/st-microelectronics/stm-api :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/symbol-utils
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import ocdb/utils/bundles
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs
  import ocdb/utils/checks
  import ocdb/utils/passive-checks/resonator-checks

public deftype STMPinNames

public pcb-enum components/st-microelectronics/PwrPinNames <: STMPinNames :
  VDD
  VDDA
  VBAT
  VDD1V2
  VDD3V3USB
  VDD5V0USB
  VDDIO2
  ; V1V2PHYHS
  ; V1V5SMPS
  ; VDD1V2DSI
  ; VDD1V2DSIPHY
  ; VDD1V2DSIREG
  ; VDD1V2UNUSED
  ; VDDA1V1REG
  ; VDDA1V8DSI
  ; VDDA1V8REG
  ; VDDA1V8UNUSED
  ; VDDCAP
  ; VDDCORE
  ; VDDDSI
  ; VDDLDO
  ; VDDMMC
  ; VDDPA
  ; VDDPHYHS
  ; VDDQDDR
  ; VDDRF
  ; VDDRF1V55
  ; VDDSD
  ; VDDSD12
  ; VDDSD3
  ; VDDSDMMC
  ; VDDSMPS
  ; VDDUSB
  ; VDDPLL
  ; VDDPLL2
  ; VDDUNUSED
  ; VLCD
  ; VLXSMPS

public pcb-enum components/st-microelectronics/GndPinNames <: STMPinNames :
  VSS
  VSSA
  ; VSSDSI
  ; VSSRF
  ; VSSSD
  ; VSSSMPS
  ; VSSPLL
  ; VSSPLL2
  ; VSSUSBHS

public pcb-enum components/st-microelectronics/ResetPinNames <: STMPinNames :
  NRST
  NPOR

public pcb-enum components/st-microelectronics/BootPinNames <: STMPinNames :
  BOOT

public pcb-enum components/st-microelectronics/ReferencePinNames <: STMPinNames :
  VREF+


public deftype Settings
public defmulti entries (s:Settings) -> Tuple<KeyValue<Symbol,?>>
public defmulti set (s:Settings, k:Symbol, value) -> False
public defmulti get (s:Settings, k:Symbol) -> ?
public defn Settings (initial-entries:Tuple<KeyValue<Symbol,?>>) :
  val table = to-hashtable<Symbol,?>(initial-entries)
  new Settings :
    defmethod entries (this) :
      val sorted-keys = qsort(keys(table))
      to-tuple $ for k in sorted-keys seq :
        k => table[k]
    defmethod set (this, k:Symbol, v) :
      table[k] = v
    defmethod get (this, k:Symbol) :
      table[k]

public val DEFAULT-SETTINGS = [
    `cap-bypass-package => 4.7e-6
    `cap-bypass-pin => 100.0e-9
    `reset-pullup => 10.0e3
    `reset-cap => 10.0e-9
    `boot-from => "flash"
    `boot-resistor => 10.0e3
    `debug-interface => swd()
    `debug-connector => ocdb/components/tag-connect/TC2050-IDC/module
    `HSE-freq => 16.0e6   `HSE-ppm => 30.0e-6 `HSE-source => "crystal"
    `LSE-freq => 32.768e3 `LSE-ppm => 0.05 `LSE-source => "crystal"]

defn last (text: String, c: Char) -> Int|False :
  find({text[_] == c}, in-reverse(0 to length(text)))

defn ref-internal (text: String) -> Ref :
  if text[length(text) - 1] == ']' :
    val idx = last(text, '[') as Int
    IndexRef(ref-internal(text[0 to idx]), to-int!(text[(idx + 1) to (length(text) - 1)]))
  else :
    val idx = last(text, '.')
    match(idx: Int) :
      FieldRef(ref-internal(text[0 to idx]), Ref(text[(idx + 1) to length(text)]))
    else :
      Ref(text)

defn ref (text: String) -> Ref|False :
  if text == "false" :
    false
  else :
    ref-internal(text)

defn parse (my-ref: Ref) -> String :
   match(my-ref) :
     (v: VarRef) : to-string(v)
     (i: IndexRef) : parse(ref(i))
     (f: FieldRef) : to-string(field(f))

defn match-pin? (pin-ref:Ref, power:String) :
  val p-ref = parse(pin-ref)
  if p-ref == power :
    true

; return list of pins that match name (exactly) / don't check for empty
defn get-pin-list (obj:JITXObject, pin-id:?) :
  val pin-name = to-string(pin-id)
  val result = to-tuple $ for p in pins(obj) filter :
    if substring?(to-string(ref(p)), pin-name) :
      match-pin?(ref(p), pin-name)
  result

; find the pin exact match return a boolean
defn find-pin? (obj:JITXObject, my-pin:String|STMPinNames) :
  val result = get-pin-list(obj, my-pin)
  not empty?(result)

defn power-pins (stm:JITXObject, vdd-pin:PwrPinNames) -> Tuple<JITXObject> :
  val found-pins = get-pin-list(stm, vdd-pin)
  if empty?(found-pins) :
    fatal("%_ is missing an identifiable power pin (%_)." % [ref(stm), to-string(vdd-pin)])
  found-pins

defn power-pins (stm:JITXObject) -> Tuple<JITXObject> :
  power-pins(stm, VDD)

defn power-pins-list (stm:JITXObject, vdd-pin:PwrPinNames|ReferencePinNames) -> Tuple<JITXObject> :
  get-pin-list(stm, vdd-pin)

defn gnd-pins (stm:JITXObject, gnd-pin:GndPinNames) -> Tuple<JITXObject> :
  val found-pins = get-pin-list(stm, gnd-pin)
  if empty?(found-pins) :
    fatal("%_ is missing an identifiable ground pin (%_)." % [ref(stm), to-string(gnd-pin)])
  found-pins

defn gnd-pins (stm:JITXObject) -> Tuple<JITXObject> :
  gnd-pins(stm, VSS)

defn gnd-pins-list (stm:JITXObject, gnd-pin:GndPinNames) -> Tuple<JITXObject> :
  get-pin-list(stm, gnd-pin)

public defn generate-pin-bypass (stm:JITXObject, vdd-net:PwrPinNames|ReferencePinNames, gnd-net:GndPinNames, cap-bypass-pin:Double) :
  inside pcb-module :
    val power-pins = power-pins-list(stm, vdd-net)
    val gnd-pins = gnd-pins-list(stm, gnd-net)
    if not empty?(gnd-pins) :
      if not empty?(power-pins) : ; added this to allow a true/false return val
        for p in power-pins do :
          bypass-cap-strap(p, gnd-pins[0], cap-bypass-pin)
        true

public defn generate-pin-bypass (stm:JITXObject, cap-bypass-pin:Double) :
  generate-pin-bypass(stm, VDD, VSS, cap-bypass-pin)

public defn generate-pin-bypass (stm:JITXObject) :
  val settings = Settings(DEFAULT-SETTINGS)
  generate-pin-bypass(stm, VDD, VSS, settings[`cap-bypass-pin])

public defn generate-package-bypass (stm:JITXObject, vdd-net:PwrPinNames, gnd-net:GndPinNames, cap-bypass-package:Double) :
  inside pcb-module :
    val power-pins = power-pins-list(stm, vdd-net)
    val gnd-pins = gnd-pins-list(stm, gnd-net)
    if not empty?(power-pins) and not empty?(gnd-pins) :
      bypass-cap-strap(power-pins[0], gnd-pins[0], cap-bypass-package)
      true

public defn generate-package-bypass (stm:JITXObject, cap-bypass-package:Double) :
  generate-package-bypass(stm, VDD, VSS, cap-bypass-package)

public defn generate-package-bypass (stm:JITXObject) :
  val settings = Settings(DEFAULT-SETTINGS)
  generate-package-bypass(stm, VDD, VSS, settings[`cap-bypass-package])

public defn connect-power (stm:JITXObject, power-port-name:String, vdd-net:PwrPinNames, gnd-net:GndPinNames) :
  inside pcb-module :
    val vdd-pin-list = power-pins-list(stm, vdd-net)
    val gnd-pin-list = gnd-pins-list(stm, gnd-net)
    if not empty?(vdd-pin-list) :
      if not empty?(gnd-pin-list) :
        val power-port-symbol = to-symbol(power-port-name)
        make-port(power-port-symbol, power)
        for p in vdd-pin-list do :
          make-net(to-symbol(vdd-net), [self.(power-port-symbol).vdd, p])
        for p in gnd-pin-list do :
          make-net(to-symbol(gnd-net), [self.(power-port-symbol).gnd, p])
        property(vdd-pin-list[0].gnd-ref) = gnd-pin-list[0] 
        val v-range = recommended-voltage(property(vdd-pin-list[0].power-pin))
        match(v-range:Toleranced) :
          if in-range?(v-range, 3.3) :
            property(vdd-pin-list[0].power-request) = [3.3, 0.1, 3.3 * 0.03]
          else if in-range?(v-range, 2.5) :
            property(vdd-pin-list[0].power-request) = [2.5, 0.1, 2.5 * 0.03]
          else if in-range?(v-range, 1.8) :
            property(vdd-pin-list[0].power-request) = [1.8, 0.1, 1.8 * 0.03]
          else if in-range?(v-range, 1.2) :
            property(vdd-pin-list[0].power-request) = [1.2, 0.1, 1.2 * 0.03]
          true ; need this in order to check for missing pins in the outer if statements

public defn connect-power (stm:JITXObject) :
  connect-power(stm, "power", VDD, VSS)

public defn connect-battery (stm:JITXObject, bat-net:PwrPinNames, vdd-net:PwrPinNames) :
  inside pcb-module :
  ; TODO Add battery option to API, currently assumes none.
    val b-net = get-pin-list(stm, bat-net)
    if not empty?(b-net) :
      val p-pin = get-pin-list(stm, vdd-net)
      if not empty?(p-pin) :
        net (b-net p-pin[0])
        true

public defn connect-battery (stm:JITXObject, bat-net:PwrPinNames) :
  connect-battery(stm, bat-net, VDD)

public defn connect-battery (stm:JITXObject) :
  connect-battery(stm, VBAT, VDD)

public defn connect-reference (stm:JITXObject, ref-net:ReferencePinNames, vdd-net:PwrPinNames) :
  inside pcb-module :
  ; TODO Add reference option to API, currently assumes none.
    val r-net = get-pin-list(stm, ref-net)
    if not empty?(r-net) :
      val p-pin = get-pin-list(stm, vdd-net)
      if not empty?(p-pin) :
        net (r-net p-pin[0])
        true

public defn connect-reset (stm:JITXObject, reset-net:ResetPinNames, vdd-net:PwrPinNames, gnd-net:GndPinNames, reset-pullup:Double, reset-cap:Double) :
  inside pcb-module :
    pin reset
    val reset-pin-list = get-pin-list(stm, reset-net)
    if not empty?(reset-pin-list) :
      val power-pins = power-pins-list(stm, VDD)
      for p in reset-pin-list do :
        net (p reset)
        if not empty?(power-pins) :
          match(reset-pullup) :
            (r: Double) :
              res-strap(power-pins[0], p, r)
              true
          match(reset-cap) :
            (c: Double) :
              cap-strap(power-pins[0], p, c)
              true

public defn connect-reset (stm:JITXObject, reset-net:ResetPinNames, vdd-net:PwrPinNames, gnd-net:GndPinNames) :
  val settings = Settings(DEFAULT-SETTINGS)
  connect-reset(stm reset-net vdd-net gnd-net settings[`reset-pullup] settings[`reset-cap])

public defn connect-reset (stm:JITXObject, reset-net:ResetPinNames, reset-pullup:Double, reset-cap:Double) :
  connect-reset(stm reset-net VDD VSS reset-pullup reset-cap)

public defn connect-reset (stm:JITXObject, reset-net:ResetPinNames) :
  val settings = Settings(DEFAULT-SETTINGS)
  connect-reset(stm reset-net VDD VSS settings[`reset-pullup] settings[`reset-cap])

public defn connect-reset (stm:JITXObject, reset-pullup:Double, reset-cap:Double) :
  connect-reset(stm NRST VDD VSS reset-pullup reset-cap)

public defn connect-reset (stm:JITXObject) :
  val settings = Settings(DEFAULT-SETTINGS)
  connect-reset(stm NRST VDD VSS settings[`reset-pullup] settings[`reset-cap])

public defn connect-por (stm:JITXObject, por-net:ResetPinNames, vdd-net:PwrPinNames, gnd-net:GndPinNames) :
  inside pcb-module :
    pin por
    val por-pin = get-pin-list(stm, por-net)
    if not empty?(por-pin) :
      val power-pins = power-pins-list(stm, vdd-net)
      val gnd-pins = gnd-pins-list(stm, gnd-net)
      if not empty?(power-pins) and not empty?(gnd-pins) :
        ; TODO handle RelativeVoltage
        val v-range = recommended-voltage(property(power-pins[0].power-pin))
        match(v-range:Toleranced) :
          if in-range?(v-range, 1.8) :
            inst mon : ocdb/components/on-semiconductor/NCP30x/component(1.8)
            bypass-cap-strap(por-pin[0], gnd-pins[0], 0.1e-6) ; hardcoded value for now (eek)
            net (mon.gnd, gnd-pins[0])
            net (mon.input, power-pins[0])
            net (mon.output, por-pin[0])
            true

public defn connect-por (stm:JITXObject, por-net:ResetPinNames) :
  connect-por(stm, por-net, VDD, VSS)

public defn connect-por (stm:JITXObject) :
  connect-por(stm, NPOR, VDD, VSS)

defn has-pin? (stm:JITXObject, pin-q:String) :
  val t = to-tuple $ for p in pins(stm) filter :
    if to-string(ref(p)) == pin-q : true
  not empty?(t)

defn has-port? (stm:JITXObject, port-q:String) :
  val t = to-tuple $ for p in ports(stm) filter :
    substring?(to-string(ref(p)), port-q)
  not empty?(t)

public defn set-boot (stm:JITXObject, boot-net:BootPinNames, vdd-net:PwrPinNames, gnd-net:GndPinNames, boot-from:String, boot-resistor:Double) :
  inside pcb-module :
    val power-pins = power-pins-list(stm, vdd-net)
    val gnd-pins = gnd-pins-list(stm, gnd-net)
    val boot-pins = get-pin-list(stm, boot-net)
    val num-boot-pins = length(boot-pins)
    if num-boot-pins > 0 :
      switch(boot-from) :
        "flash" :
          if not empty?(gnd-pins) :
            res-strap(stm.BOOT[0], gnd-pins[0], boot-resistor)
        "system" :
          if num-boot-pins != 2 or empty?(power-pins) or empty?(gnd-pins) :
            fatal("system boot not supported on %_ due to boot config or power." % [ref(stm)])
          else :
            res-strap(stm.BOOT[1], gnd-pins[0], boot-resistor)
            res-strap(stm.BOOT[0], power-pins[0], boot-resistor)
        "sram" :
          if num-boot-pins != 2 and empty?(power-pins) :
            fatal("system boot not supported on %_ due to boot config or power." % [ref(stm)])
          else :
            res-strap(stm.BOOT[1], power-pins[0], boot-resistor)
            res-strap(stm.BOOT[0], power-pins[0], boot-resistor)
      check connected(stm.BOOT[0])
    if num-boot-pins > 1 :
      check connected(stm.BOOT[1])

public defn set-boot (stm:JITXObject, boot-net:BootPinNames, vdd-net:PwrPinNames, gnd-net:GndPinNames, boot-from:String) :
  val settings = Settings(DEFAULT-SETTINGS)
  set-boot(stm, boot-net, vdd-net, gnd-net, boot-from, settings[`boot-resistor])

public defn set-boot (stm:JITXObject, boot-net:BootPinNames, vdd-net:PwrPinNames, gnd-net:GndPinNames) :
  val settings = Settings(DEFAULT-SETTINGS)
  set-boot(stm, boot-net, vdd-net, gnd-net, settings[`boot-from], settings[`boot-resistor])

public defn set-boot (stm:JITXObject, boot-net:BootPinNames) :
  val settings = Settings(DEFAULT-SETTINGS)
  set-boot(stm, boot-net, VDD, VSS, settings[`boot-from], settings[`boot-resistor])

public defn set-boot (stm:JITXObject, boot-net:BootPinNames, boot-from:String, boot-resistor:Double) :
  val settings = Settings(DEFAULT-SETTINGS)
  set-boot(stm, boot-net, VDD, VSS, boot-from, boot-resistor)

public defn set-boot (stm:JITXObject, boot-from:String, boot-resistor:Double) :
  val settings = Settings(DEFAULT-SETTINGS)
  set-boot(stm, BOOT, VDD, VSS, boot-from, boot-resistor)

public defn set-boot (stm:JITXObject, boot-from:String) :
  val settings = Settings(DEFAULT-SETTINGS)
  set-boot(stm, BOOT, VDD, VSS, boot-from, settings[`boot-resistor])

defn supports? (module:InstantiableType, bundle:PortType) -> True|False :
  pcb-module temp :
    inst i : module
    require r:bundle from i
  set-main-module(temp) ;uh oh
  val result = assign-pins?()
  result is-not False

public defn connect-debug (stm:JITXObject, debug-interface:PortType, connector:Instantiable) :
  inside pcb-module:
    if supports?(instantiable-type(stm), debug-interface) and supports?(connector, debug-interface) :
      inst debug-con : connector
      require debug-m:debug-interface from stm
      require debug-c:debug-interface from debug-con
      net DEBUG (debug-m debug-c)
      schematic-group(debug-con) = debug
      val power-pins = power-pins-list(stm, VDD)
      val gnd-pins = gnd-pins-list(stm, VSS)
      if not empty?(power-pins) and not empty?(gnd-pins) :
        if has-port?(debug-con, "power") :
          net (debug-con.power.vdd, power-pins[0])
          net (debug-con.power.gnd, gnd-pins[0])
    else :
      fatal("Unsupported debug-interface on %_" % [ref(stm)])

; defn select-crystal (freq:Double, ppm:double) :
; this is janky code which needs to be optimized with a better crystal/osc selection
public defn setup-clocks (stm:JITXObject, HSE-freq:Double, HSE-ppm:Double, HSE-source:String, LSE-freq:Double, LSE-ppm:Double, LSE-source:String) :
  inside pcb-module :
    val power-pins = power-pins-list(stm, VDD)
    val gnd-pins = gnd-pins-list(stm, VSS)
    if not empty?(power-pins) and not empty?(gnd-pins) :
      val power-pin = power-pins[0]
      val gnd-pin = gnd-pins[0]
      ; Can we add an external clock, and do we need one?
      if supports?(instantiable-type(stm), high-freq-oscillator) and HSE-ppm < 0.03 :
        switch(HSE-source) :
          "crystal" :
              ; supported crystal oscillator frequencies
            val HSE-FREQS = [
              16.0e6,
              24.0e6,
              25.0e6,
              26.0e6,
              32.0e6,
            ]
            inst hf-xtal :
              if contains?(HSE-FREQS, HSE-freq) : 
                ocdb/components/epson/TSX-3225/component(HSE-freq)
              else :
                ocdb/components/abracon/AMB7/component(HSE-freq)
            if contains?(HSE-FREQS, HSE-freq) :
              net (hf-xtal.gnd, gnd-pin)

            require hf-osc:high-freq-oscillator from stm
            net (hf-osc.in hf-xtal.p[1])
            net (hf-osc.out hf-xtal.p[2])
            val hf-cb = add-xtal-caps(hf-xtal, gnd-pin)
            check-resonator(hf-xtal, CrystalOscillator(2.0e-3, 100.0e-6, 3.0e-12, HSE-ppm * HSE-freq, HSE-freq), hf-cb)
          "osc" :
            if HSE-ppm > 25.0e-6 :
              require hf-osc:high-freq-oscillator from stm
              inst osc :  ocdb/components/abracon/AMPM/module(HSE-freq)
              net (hf-osc.in osc.out)
              net (osc.power.gnd, gnd-pin)
              net (osc.power.vdd, power-pin)
            else : 
              fatal("Oscillators in library can't meet ppm target (%_). Try a 'crystal' source." % [HSE-ppm])
      if supports?(instantiable-type(stm), low-freq-oscillator) and LSE-ppm < 0.03 :
        switch(LSE-source) :
          "crystal" :
            if LSE-freq == 32.768e3 :
              require lf-osc:low-freq-oscillator from stm
              inst losc : ocdb/components/epson/FC-135/component
              net (lf-osc.in losc.p[1])
              net (lf-osc.out losc.p[2])
              val lf-cb = add-xtal-caps(losc, gnd-pin)
              check-resonator(losc, CrystalOscillator(3.1e-6, 0.5e-6, 4.0e-12, 50.0e-6 * 32.768e3, 32.768e3), lf-cb)
            else :
              fatal("Unsupported frequency for LSE: %_. Use 32.768e3 Hz." % [LSE-freq])
          else :
            fatal("Unsupported source for LSE. Try a 'crystal' source.")
      else if LSE-ppm < 0.03:
        fatal("%_ does not support an external LSE source." % [ref(stm)])

public defn connect-stm (stm:JITXObject, settings:?) :
  ; used to be in stm-to-jitx but it's better here
  if connect-power(stm, "power", VDD, VSS) :
    ; can generate the package bypass capacitor option
    if not generate-package-bypass(stm, VDD, VSS, settings[`cap-bypass-package]) :
      fatal("Unable to instantiate package bypass capacitor!")
    ; can generate the pin bypass capacitor option
    if not generate-pin-bypass(stm, VDD, VSS, settings[`cap-bypass-pin]) :
      fatal("Unable to instantiate pin bypass capacitor(s).")
  else :
    if not find-pin?(stm, VDD) :
      fatal("Unable to instantiate power port using VDD pins! Check VDD pin availability and usage.")
    else if not find-pin?(stm, VSS) :
      fatal("Unable to instantiate power port using VSS pins! Check VSS pin availability and usage.")

  if find-pin?(stm, VDDA) :
    if find-pin?(stm, VSSA) :
      connect-power(stm, "VDDA", VDDA, VSSA)
      if not generate-pin-bypass(stm, VDDA, VSSA, settings[`cap-bypass-pin]) :
        fatal("Unable to add pin bypass cap between VDDA/VSSA!")
    else if connect-power(stm, "VDDA", VDDA, VSS) :
      if not generate-pin-bypass(stm, VDDA, VSS, settings[`cap-bypass-pin]) :
        fatal("Unable to add pin bypass cap between VDDA/VSS!")
    else :
      fatal("Unable to instantiate power port on VDDA! Check VDDA/VSSA/VSS pin availability and usage.")

  if find-pin?(stm, VDDIO2) :
    if connect-power(stm, "VDDIO2", VDDIO2, VSS) :
      if not generate-pin-bypass(stm, VDDIO2, VSS, settings[`cap-bypass-pin]) :
        fatal("Unable to add pin bypass cap between VDDIO2/VSS!")
    else :
      fatal("Unable to instantiate power port on VDDIO2! Check VDDIO2/VSS pin availability and usage.")
  
  ; we offer many options to tweak the reset r&c customization
  if find-pin?(stm, NRST) :
    connect-reset(stm, NRST, VDD, VSS, settings[`reset-pullup], settings[`reset-cap])
  else :
    fatal("Unable to instantiate NRST circuit! Check NRST pin availability and usage.")

  ; power on reset has a few options for customization
  if find-pin?(stm, NPOR) :
    if not connect-por(stm, NPOR, VDD, VSS) :
      fatal("Unable to instantiate nPOR circuit! Check nPOR pin availability and usage.")

  ; battery connection has a no connectivity customization options
  if find-pin?(stm, VBAT) :
    if not connect-battery(stm, VBAT, VDD) :
      fatal("Unable to connect VBAT pin! Check VBAT pin availability and usage.")

  ; many customization options for boot configuration (which nets, resistor value, etc)
  if find-pin?(stm, BOOT) :
    set-boot(stm, BOOT, VDD, VSS, settings[`boot-from], settings[`boot-resistor])

  if find-pin?(stm, VREF+) :
    if find-pin?(stm, VDDA) :
      if not connect-reference(stm, VREF+, VDDA) :
        fatal("Unable to connect VREF+ to VDDA! Check VREF+ pin availability and usage.")
      if find-pin?(stm, VSSA) :
        if not generate-pin-bypass(stm, VREF+, VSSA, settings[`cap-bypass-pin]) :
          fatal("Unable to add pin bypass cap between VREF+ and VSSA!")
      else :
        if not generate-pin-bypass(stm, VREF+, VSS, settings[`cap-bypass-pin]) :
          fatal("Unable to add pin bypass cap between VREF+ and VSS!")
    else :
      if connect-reference(stm, VREF+, VDD) :
        if not generate-pin-bypass(stm, VREF+, VSS, settings[`cap-bypass-pin]) :
          fatal("Unable to add pin bypass cap between VREF+/VSS!")
      else :
        fatal("Unable to connect VREF+ to VDD! Check VREF+ pin availability and usage.")
  
  connect-debug(stm, settings[`debug-interface], settings[`debug-connector])

  setup-clocks(stm, settings[`HSE-freq], settings[`HSE-ppm], settings[`HSE-source], settings[`LSE-freq], settings[`LSE-ppm], settings[`LSE-source])




