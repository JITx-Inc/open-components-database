#use-added-syntax(jitx)
defpackage ocdb/components/st-microelectronics/LIS3DH :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/bundles
  import ocdb/utils/landpatterns
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/property-structs
  import ocdb/utils/checks

pcb-landpattern xdcr-lis3dhtr :
  pad p[1] : smd-pad(0.45, 0.35) at loc(-1.225, 1.0, 0.0)
  pad p[2] : smd-pad(0.45, 0.35) at loc(-1.225, 0.5, 0.0)
  pad p[3] : smd-pad(0.45, 0.35) at loc(-1.225, -0.0, 0.0)
  pad p[4] : smd-pad(0.45, 0.35) at loc(-1.225, -0.5, 0.0)
  pad p[5] : smd-pad(0.45, 0.35) at loc(-1.225, -1.0, 0.0)
  pad p[6] : smd-pad(0.35, 0.45) at loc(-0.5, -1.225, 0.0)
  pad p[7] : smd-pad(0.35, 0.45) at loc(0.0, -1.225, 0.0)
  pad p[8] : smd-pad(0.35, 0.45) at loc(0.5, -1.225, 0.0)
  pad p[9] : smd-pad(0.45, 0.35) at loc(1.225, -1.0, 0.0)
  pad p[10] : smd-pad(0.45, 0.35) at loc(1.225, -0.5, 0.0)
  pad p[11] : smd-pad(0.45, 0.35) at loc(1.225, -0.0, 0.0)
  pad p[12] : smd-pad(0.45, 0.35) at loc(1.225, 0.5, 0.0)
  pad p[13] : smd-pad(0.45, 0.35) at loc(1.225, 1.0, 0.0)
  pad p[14] : smd-pad(0.35, 0.45) at loc(0.5, 1.225, 0.0)
  pad p[15] : smd-pad(0.35, 0.45) at loc(0.0, 1.225, 0.0)
  pad p[16] : smd-pad(0.35, 0.45) at loc(-0.5, 1.225, 0.0)

  layer(Courtyard(Top)) = Rectangle(3.0, 3.0)
  layer(Silkscreen("F-SilkS", Top)) = Circle(Point(-2.0, 1.275), 0.1)
  ref-label()

public pcb-component component :
  pin-properties :
    [pin:Ref | pads:Int ... | side:Dir]
    [CS | 8 | Left]
    [GND | 5, 12 | Down]
    [RES | 10 | Right]
    [SA0 | 7 | Left]
    [SDO | 6 | Left]
    [SPC | 4 | Left]
    [VDD | 14 | Up]
    [ADC[1] | 16 | Left]
    [ADC[2] | 15 | Left]
    [ADC[3] | 13 | Left]
    [INT[1] | 11 | Right]
    [INT[2] | 9 | Right]
    [nc[0] | 2 | Down]
    [nc[1] | 3 | Down]
    [VDD-IO | 1 | Up]
  
  make-box-symbol()
  assign-landpattern(xdcr-lis3dhtr)

  name = "XDCR_LIS3DHTR"
  manufacturer = "STMicroelectronics"
  mpn = "LIS3DHTR"

  no-connect(self.nc[0])
  no-connect(self.nc[1])

  ; RES pin must be connected to GND for device operation
  check connected([self.RES self.GND])
  check connected(self.VDD-IO)

  property(self.VDD.power-pin) = PowerPin(min-typ-max(1.71, 2.5, 3.6))
  property(self.rated-temperature) = min-max(-40.0, 85.0)
  
  val drive-props = DigitalOutput(
    CMOSOutput(FractionalVoltage(0.1, self.VDD-IO)
               FractionalVoltage(0.9, self.VDD-IO)), 
               false, self.VDD-IO, self.GND)
  
  val input-props = DigitalInput(
    FractionalVoltage(0.2, self.VDD-IO)
    FractionalVoltage(0.8, self.VDD-IO)
    self.VDD-IO, self.GND, 50.0e-9)

  val oc-props = DigitalIO(OpenCollector(min-max(0.0, 0.4), 15.0e-3), FractionalVoltage(0.2, self.VDD-IO), FractionalVoltage(0.8, self.VDD-IO), self.VDD-IO, self.GND, 50.0e-9)

  property(self.SPC.digital-io) = oc-props
  property(self.SDO.digital-io) = oc-props

  property(self.INT[1].digital-output) = drive-props
  property(self.CS.digital-input) = input-props

public pcb-module module :

  port power:power
  port i2c:i2c
  port spi:spi-peripheral()
  port adc:pin[[1 2 3]]
  port int: pin[[1 2]]
  pin vio

  public inst acc : ocdb/components/st-microelectronics/LIS3DH/component

  net (power.gnd, acc.GND, acc.RES)
  net (power.vdd, acc.VDD)
  net (vio, acc.VDD-IO)

  bypass-cap-strap(acc.VDD, acc.GND, 10.0e-6)
  bypass-cap-strap(acc.VDD-IO, acc.GND, 0.1e-6)

  net (i2c.scl, spi.sck, acc.SPC)
  net (i2c.sda, spi.sdo, acc.SDO)
  net (spi.sdi, acc.SA0)
  net (spi.cs, acc.CS)

  for i in 1 through 3 do : net (adc[i] acc.ADC[i])
  for i in 1 through 2 do : net (int[i] acc.INT[i])

  schematic-group(self) = lis3dh
