; Autogenerated by ocdb/scripts/cubemx-importer
; Family: STM32F3, Package: LQFP48
#use-added-syntax(jitx)
defpackage ocdb/components/STM32F328C8Tx/supports:
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/bundles
  import ocdb/property-structs

public defn make-supports ():
  inside pcb-component:
    supports swd:
      swd.swdio  => self.PA[13]
      swd.swdclk => self.PA[14]

    supports jtag([JTAG-TRSTN]):
      jtag([JTAG-TRSTN]).tck => self.PA[14]
      jtag([JTAG-TRSTN]).tdi => self.PA[15]
      jtag([JTAG-TRSTN]).tdo => self.PB[3]
      jtag([JTAG-TRSTN]).tms => self.PA[13]
      jtag([JTAG-TRSTN]).trstn => self.PB[4]

    supports gpio:
      gpio.gpio => self.PC[13]

    supports gpio:
      gpio.gpio => self.PC[14]

    supports gpio:
      gpio.gpio => self.PC[15]

    supports gpio:
      gpio.gpio => self.PF[0]

    supports gpio:
      gpio.gpio => self.PF[1]

    supports gpio:
      gpio.gpio => self.PA[0]

    supports gpio:
      gpio.gpio => self.PA[1]

    supports gpio:
      gpio.gpio => self.PA[2]

    supports gpio:
      gpio.gpio => self.PA[3]

    supports gpio:
      gpio.gpio => self.PA[4]

    supports gpio:
      gpio.gpio => self.PA[5]

    supports gpio:
      gpio.gpio => self.PA[6]

    supports gpio:
      gpio.gpio => self.PA[7]

    supports gpio:
      gpio.gpio => self.PB[0]

    supports gpio:
      gpio.gpio => self.PB[1]

    supports gpio:
      gpio.gpio => self.PB[10]

    supports gpio:
      gpio.gpio => self.PB[11]

    supports gpio:
      gpio.gpio => self.PB[12]

    supports gpio:
      gpio.gpio => self.PB[13]

    supports gpio:
      gpio.gpio => self.PB[14]

    supports gpio:
      gpio.gpio => self.PB[15]

    supports gpio:
      gpio.gpio => self.PA[8]

    supports gpio:
      gpio.gpio => self.PA[9]

    supports gpio:
      gpio.gpio => self.PA[10]

    supports gpio:
      gpio.gpio => self.PA[11]

    supports gpio:
      gpio.gpio => self.PA[12]

    supports gpio:
      gpio.gpio => self.PA[13]

    supports gpio:
      gpio.gpio => self.PA[14]

    supports gpio:
      gpio.gpio => self.PA[15]

    supports gpio:
      gpio.gpio => self.PB[3]

    supports gpio:
      gpio.gpio => self.PB[4]

    supports gpio:
      gpio.gpio => self.PB[5]

    supports gpio:
      gpio.gpio => self.PB[6]

    supports gpio:
      gpio.gpio => self.PB[7]

    supports gpio:
      gpio.gpio => self.PB[8]

    supports gpio:
      gpio.gpio => self.PB[9]

    supports adc:
      adc.adc => self.PA[0]

    supports adc:
      adc.adc => self.PA[1]

    supports adc:
      adc.adc => self.PA[2]

    supports adc:
      adc.adc => self.PA[3]

    supports adc:
      adc.adc => self.PA[4]

    supports adc:
      adc.adc => self.PA[5]

    supports adc:
      adc.adc => self.PA[6]

    supports adc:
      adc.adc => self.PA[7]

    supports adc:
      adc.adc => self.PB[0]

    supports adc:
      adc.adc => self.PB[1]

    supports adc:
      adc.adc => self.PB[12]

    supports adc:
      adc.adc => self.PB[13]

    supports adc:
      adc.adc => self.PB[14]

    supports adc:
      adc.adc => self.PB[15]

    supports dac:
      dac.dac => self.PA[4]

    supports dac:
      dac.dac => self.PA[5]

    supports dac:
      dac.dac => self.PA[6]

    supports timer:
      timer.timer => self.PA[0]

    supports timer:
      timer.timer => self.PA[1]

    supports timer:
      timer.timer => self.PA[2]

    supports timer:
      timer.timer => self.PA[3]

    supports timer:
      timer.timer => self.PA[4]

    supports timer:
      timer.timer => self.PA[5]

    supports timer:
      timer.timer => self.PA[6]

    supports timer:
      timer.timer => self.PA[7]

    supports timer:
      timer.timer => self.PB[0]

    supports timer:
      timer.timer => self.PB[1]

    supports timer:
      timer.timer => self.PB[10]

    supports timer:
      timer.timer => self.PB[11]

    supports timer:
      timer.timer => self.PB[14]

    supports timer:
      timer.timer => self.PB[15]

    supports timer:
      timer.timer => self.PA[8]

    supports timer:
      timer.timer => self.PA[9]

    supports timer:
      timer.timer => self.PA[10]

    supports timer:
      timer.timer => self.PA[11]

    supports timer:
      timer.timer => self.PA[12]

    supports timer:
      timer.timer => self.PA[15]

    supports timer:
      timer.timer => self.PB[3]

    supports timer:
      timer.timer => self.PB[4]

    supports timer:
      timer.timer => self.PB[5]

    supports timer:
      timer.timer => self.PB[7]

    supports timer:
      timer.timer => self.PB[8]

    supports timer:
      timer.timer => self.PB[9]

    pcb-bundle I2C1_SDA:
      pin p
    pcb-bundle I2C1_SCL:
      pin p

    supports I2C1_SDA:
      I2C1_SDA.p => self.PA[14]
    supports I2C1_SCL:
      I2C1_SCL.p => self.PA[15]
    supports I2C1_SCL:
      I2C1_SCL.p => self.PB[6]
    supports I2C1_SDA:
      I2C1_SDA.p => self.PB[7]
    supports I2C1_SCL:
      I2C1_SCL.p => self.PB[8]
    supports I2C1_SDA:
      I2C1_SDA.p => self.PB[9]
    supports i2c:
      require sda-pin: I2C1_SDA
      require scl-pin: I2C1_SCL
      i2c.sda => sda-pin.p
      i2c.scl => scl-pin.p

    pcb-bundle CAN_RX:
      pin p
    pcb-bundle CAN_TX:
      pin p

    supports CAN_RX:
      CAN_RX.p => self.PA[11]
    supports CAN_TX:
      CAN_TX.p => self.PA[12]
    supports CAN_RX:
      CAN_RX.p => self.PB[8]
    supports CAN_TX:
      CAN_TX.p => self.PB[9]
    supports can-interface:
      require rx-pin: CAN_RX
      require tx-pin: CAN_TX
      can-interface.rx => rx-pin.p
      can-interface.tx => tx-pin.p

    pcb-bundle SPI1_MOSI:
      pin p
    pcb-bundle SPI1_MISO:
      pin p
    pcb-bundle SPI1_NSS:
      pin p
    pcb-bundle SPI1_SCK:
      pin p

    supports SPI1_NSS:
      SPI1_NSS.p => self.PA[4]
    supports SPI1_SCK:
      SPI1_SCK.p => self.PA[5]
    supports SPI1_MISO:
      SPI1_MISO.p => self.PA[6]
    supports SPI1_MOSI:
      SPI1_MOSI.p => self.PA[7]
    supports SPI1_NSS:
      SPI1_NSS.p => self.PA[15]
    supports SPI1_SCK:
      SPI1_SCK.p => self.PB[3]
    supports SPI1_MISO:
      SPI1_MISO.p => self.PB[4]
    supports SPI1_MOSI:
      SPI1_MOSI.p => self.PB[5]
    supports spi([SPI-SDO, SPI-SDI, SPI-CS]):
      require sdo-pin: SPI1_MOSI
      require sdi-pin: SPI1_MISO
      require cs-pin: SPI1_NSS
      require sck-pin: SPI1_SCK
      spi([SPI-SDO, SPI-SDI, SPI-CS]).sdo => sdo-pin.p
      spi([SPI-SDO, SPI-SDI, SPI-CS]).sdi => sdi-pin.p
      spi([SPI-SDO, SPI-SDI, SPI-CS]).cs => cs-pin.p
      spi([SPI-SDO, SPI-SDI, SPI-CS]).sck => sck-pin.p

    pcb-bundle USART1_CTS:
      pin p
    pcb-bundle USART1_RTS:
      pin p
    pcb-bundle USART1_CK:
      pin p
    pcb-bundle USART1_DE:
      pin p
    pcb-bundle USART1_RX:
      pin p
    pcb-bundle USART1_TX:
      pin p

    supports USART1_CK:
      USART1_CK.p => self.PA[8]
    supports USART1_TX:
      USART1_TX.p => self.PA[9]
    supports USART1_RX:
      USART1_RX.p => self.PA[10]
    supports USART1_CTS:
      USART1_CTS.p => self.PA[11]
    supports USART1_RTS:
      USART1_RTS.p => self.PA[12]
    supports USART1_DE:
      USART1_DE.p => self.PA[12]
    supports USART1_TX:
      USART1_TX.p => self.PB[6]
    supports USART1_RX:
      USART1_RX.p => self.PB[7]
    supports usart([UART-CTS, UART-RTS, UART-CK, UART-DE]):
      require cts-pin: USART1_CTS
      require rts-pin: USART1_RTS
      require ck-pin: USART1_CK
      require de-pin: USART1_DE
      require rx-pin: USART1_RX
      require tx-pin: USART1_TX
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).rts => rts-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).ck => ck-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).de => de-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).tx => tx-pin.p

    pcb-bundle USART2_CTS:
      pin p
    pcb-bundle USART2_RTS:
      pin p
    pcb-bundle USART2_CK:
      pin p
    pcb-bundle USART2_DE:
      pin p
    pcb-bundle USART2_RX:
      pin p
    pcb-bundle USART2_TX:
      pin p

    supports USART2_CTS:
      USART2_CTS.p => self.PA[0]
    supports USART2_RTS:
      USART2_RTS.p => self.PA[1]
    supports USART2_DE:
      USART2_DE.p => self.PA[1]
    supports USART2_TX:
      USART2_TX.p => self.PA[2]
    supports USART2_RX:
      USART2_RX.p => self.PA[3]
    supports USART2_CK:
      USART2_CK.p => self.PA[4]
    supports USART2_TX:
      USART2_TX.p => self.PA[14]
    supports USART2_RX:
      USART2_RX.p => self.PA[15]
    supports USART2_TX:
      USART2_TX.p => self.PB[3]
    supports USART2_RX:
      USART2_RX.p => self.PB[4]
    supports USART2_CK:
      USART2_CK.p => self.PB[5]
    supports usart([UART-CTS, UART-RTS, UART-CK, UART-DE]):
      require cts-pin: USART2_CTS
      require rts-pin: USART2_RTS
      require ck-pin: USART2_CK
      require de-pin: USART2_DE
      require rx-pin: USART2_RX
      require tx-pin: USART2_TX
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).rts => rts-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).ck => ck-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).de => de-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).tx => tx-pin.p

    pcb-bundle USART3_CTS:
      pin p
    pcb-bundle USART3_RTS:
      pin p
    pcb-bundle USART3_CK:
      pin p
    pcb-bundle USART3_DE:
      pin p
    pcb-bundle USART3_RX:
      pin p
    pcb-bundle USART3_TX:
      pin p

    supports USART3_TX:
      USART3_TX.p => self.PB[10]
    supports USART3_RX:
      USART3_RX.p => self.PB[11]
    supports USART3_CK:
      USART3_CK.p => self.PB[12]
    supports USART3_CTS:
      USART3_CTS.p => self.PB[13]
    supports USART3_RTS:
      USART3_RTS.p => self.PB[14]
    supports USART3_DE:
      USART3_DE.p => self.PB[14]
    supports USART3_CTS:
      USART3_CTS.p => self.PA[13]
    supports USART3_RX:
      USART3_RX.p => self.PB[8]
    supports USART3_TX:
      USART3_TX.p => self.PB[9]
    supports usart([UART-CTS, UART-RTS, UART-CK, UART-DE]):
      require cts-pin: USART3_CTS
      require rts-pin: USART3_RTS
      require ck-pin: USART3_CK
      require de-pin: USART3_DE
      require rx-pin: USART3_RX
      require tx-pin: USART3_TX
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).rts => rts-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).ck => ck-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).de => de-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-CK, UART-DE]).tx => tx-pin.p

    pcb-bundle RCC_OSC_IN:
      pin p
    pcb-bundle RCC_OSC_OUT:
      pin p

    supports RCC_OSC_IN:
      RCC_OSC_IN.p => self.PF[0]
    supports RCC_OSC_OUT:
      RCC_OSC_OUT.p => self.PF[1]
    supports high-freq-oscillator:
      require in-pin: RCC_OSC_IN
      require out-pin: RCC_OSC_OUT
      high-freq-oscillator.in => in-pin.p
      high-freq-oscillator.out => out-pin.p

    pcb-bundle RCC_OSC32_IN:
      pin p
    pcb-bundle RCC_OSC32_OUT:
      pin p

    supports RCC_OSC32_IN:
      RCC_OSC32_IN.p => self.PC[14]
    supports RCC_OSC32_OUT:
      RCC_OSC32_OUT.p => self.PC[15]
    supports low-freq-oscillator:
      require in-pin: RCC_OSC32_IN
      require out-pin: RCC_OSC32_OUT
      low-freq-oscillator.in => in-pin.p
      low-freq-oscillator.out => out-pin.p

