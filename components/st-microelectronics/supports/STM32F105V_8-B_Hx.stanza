; Autogenerated by ocdb/scripts/cubemx-importer
; Family: STM32F1, Package: LFBGA100
#use-added-syntax(jitx)
defpackage ocdb/components/st-microelectronics/supports/STM32F105V_8-B_Hx :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/bundles
  import ocdb/utils/property-structs

public defn make-supports ():
  inside pcb-component:
    supports swd():
      swd().swdio  => self.PA[13]
      swd().swdclk => self.PA[14]

    supports jtag():
      jtag().tck => self.PA[14]
      jtag().tdi => self.PA[15]
      jtag().tdo => self.PB[3]
      jtag().tms => self.PA[13]
      jtag().trstn => self.PB[4]

    supports gpio:
      gpio.gpio => self.PC[14]

    supports gpio:
      gpio.gpio => self.PC[13]

    supports gpio:
      gpio.gpio => self.PE[2]

    supports gpio:
      gpio.gpio => self.PB[9]

    supports gpio:
      gpio.gpio => self.PB[7]

    supports gpio:
      gpio.gpio => self.PB[4]

    supports gpio:
      gpio.gpio => self.PB[3]

    supports gpio:
      gpio.gpio => self.PA[15]

    supports gpio:
      gpio.gpio => self.PA[14]

    supports gpio:
      gpio.gpio => self.PA[13]

    supports gpio:
      gpio.gpio => self.PC[15]

    supports gpio:
      gpio.gpio => self.PE[3]

    supports gpio:
      gpio.gpio => self.PB[8]

    supports gpio:
      gpio.gpio => self.PB[6]

    supports gpio:
      gpio.gpio => self.PD[5]

    supports gpio:
      gpio.gpio => self.PD[2]

    supports gpio:
      gpio.gpio => self.PC[11]

    supports gpio:
      gpio.gpio => self.PC[10]

    supports gpio:
      gpio.gpio => self.PA[12]

    supports gpio:
      gpio.gpio => self.PE[4]

    supports gpio:
      gpio.gpio => self.PE[1]

    supports gpio:
      gpio.gpio => self.PB[5]

    supports gpio:
      gpio.gpio => self.PD[6]

    supports gpio:
      gpio.gpio => self.PD[3]

    supports gpio:
      gpio.gpio => self.PC[12]

    supports gpio:
      gpio.gpio => self.PA[9]

    supports gpio:
      gpio.gpio => self.PA[11]

    supports gpio:
      gpio.gpio => self.PE[5]

    supports gpio:
      gpio.gpio => self.PE[0]

    supports gpio:
      gpio.gpio => self.PD[7]

    supports gpio:
      gpio.gpio => self.PD[4]

    supports gpio:
      gpio.gpio => self.PD[0]

    supports gpio:
      gpio.gpio => self.PA[8]

    supports gpio:
      gpio.gpio => self.PA[10]

    supports gpio:
      gpio.gpio => self.PC[2]

    supports gpio:
      gpio.gpio => self.PE[6]

    supports gpio:
      gpio.gpio => self.PD[1]

    supports gpio:
      gpio.gpio => self.PC[9]

    supports gpio:
      gpio.gpio => self.PC[7]

    supports gpio:
      gpio.gpio => self.PC[0]

    supports gpio:
      gpio.gpio => self.PC[1]

    supports gpio:
      gpio.gpio => self.PC[3]

    supports gpio:
      gpio.gpio => self.PC[8]

    supports gpio:
      gpio.gpio => self.PC[6]

    supports gpio:
      gpio.gpio => self.PA[0]

    supports gpio:
      gpio.gpio => self.PA[4]

    supports gpio:
      gpio.gpio => self.PC[4]

    supports gpio:
      gpio.gpio => self.PB[2]

    supports gpio:
      gpio.gpio => self.PE[10]

    supports gpio:
      gpio.gpio => self.PE[14]

    supports gpio:
      gpio.gpio => self.PB[15]

    supports gpio:
      gpio.gpio => self.PD[11]

    supports gpio:
      gpio.gpio => self.PD[15]

    supports gpio:
      gpio.gpio => self.PA[1]

    supports gpio:
      gpio.gpio => self.PA[5]

    supports gpio:
      gpio.gpio => self.PC[5]

    supports gpio:
      gpio.gpio => self.PE[7]

    supports gpio:
      gpio.gpio => self.PE[11]

    supports gpio:
      gpio.gpio => self.PE[15]

    supports gpio:
      gpio.gpio => self.PB[14]

    supports gpio:
      gpio.gpio => self.PD[10]

    supports gpio:
      gpio.gpio => self.PD[14]

    supports gpio:
      gpio.gpio => self.PA[2]

    supports gpio:
      gpio.gpio => self.PA[6]

    supports gpio:
      gpio.gpio => self.PB[0]

    supports gpio:
      gpio.gpio => self.PE[8]

    supports gpio:
      gpio.gpio => self.PE[12]

    supports gpio:
      gpio.gpio => self.PB[10]

    supports gpio:
      gpio.gpio => self.PB[13]

    supports gpio:
      gpio.gpio => self.PD[9]

    supports gpio:
      gpio.gpio => self.PD[13]

    supports gpio:
      gpio.gpio => self.PA[3]

    supports gpio:
      gpio.gpio => self.PA[7]

    supports gpio:
      gpio.gpio => self.PB[1]

    supports gpio:
      gpio.gpio => self.PE[9]

    supports gpio:
      gpio.gpio => self.PE[13]

    supports gpio:
      gpio.gpio => self.PB[11]

    supports gpio:
      gpio.gpio => self.PB[12]

    supports gpio:
      gpio.gpio => self.PD[8]

    supports gpio:
      gpio.gpio => self.PD[12]

    supports adc:
      adc.adc => self.PC[2]

    supports adc:
      adc.adc => self.PC[0]

    supports adc:
      adc.adc => self.PC[1]

    supports adc:
      adc.adc => self.PC[3]

    supports adc:
      adc.adc => self.PA[0]

    supports adc:
      adc.adc => self.PA[4]

    supports adc:
      adc.adc => self.PC[4]

    supports adc:
      adc.adc => self.PA[1]

    supports adc:
      adc.adc => self.PA[5]

    supports adc:
      adc.adc => self.PC[5]

    supports adc:
      adc.adc => self.PA[2]

    supports adc:
      adc.adc => self.PA[6]

    supports adc:
      adc.adc => self.PB[0]

    supports adc:
      adc.adc => self.PA[3]

    supports adc:
      adc.adc => self.PA[7]

    supports adc:
      adc.adc => self.PB[1]

    supports dac:
      dac.dac => self.PA[4]

    supports dac:
      dac.dac => self.PA[5]

    pcb-bundle I2C1_SDA:
      pin p
    pcb-bundle I2C1_SCL:
      pin p

    supports I2C1_SDA:
      I2C1_SDA.p => self.PB[9]
    supports I2C1_SDA:
      I2C1_SDA.p => self.PB[7]
    supports I2C1_SCL:
      I2C1_SCL.p => self.PB[8]
    supports I2C1_SCL:
      I2C1_SCL.p => self.PB[6]
    supports i2c:
      require sda-pin: I2C1_SDA
      require scl-pin: I2C1_SCL
      i2c.sda => sda-pin.p
      i2c.scl => scl-pin.p

    pcb-bundle I2C2_SDA:
      pin p
    pcb-bundle I2C2_SCL:
      pin p

    supports I2C2_SCL:
      I2C2_SCL.p => self.PB[10]
    supports I2C2_SDA:
      I2C2_SDA.p => self.PB[11]
    supports i2c:
      require sda-pin: I2C2_SDA
      require scl-pin: I2C2_SCL
      i2c.sda => sda-pin.p
      i2c.scl => scl-pin.p

    pcb-bundle CAN1_RX:
      pin p
    pcb-bundle CAN1_TX:
      pin p

    supports CAN1_TX:
      CAN1_TX.p => self.PB[9]
    supports CAN1_RX:
      CAN1_RX.p => self.PB[8]
    supports CAN1_TX:
      CAN1_TX.p => self.PA[12]
    supports CAN1_RX:
      CAN1_RX.p => self.PA[11]
    supports CAN1_RX:
      CAN1_RX.p => self.PD[0]
    supports CAN1_TX:
      CAN1_TX.p => self.PD[1]
    supports can-interface:
      require rx-pin: CAN1_RX
      require tx-pin: CAN1_TX
      can-interface.rx => rx-pin.p
      can-interface.tx => tx-pin.p

    pcb-bundle CAN2_RX:
      pin p
    pcb-bundle CAN2_TX:
      pin p

    supports CAN2_TX:
      CAN2_TX.p => self.PB[6]
    supports CAN2_RX:
      CAN2_RX.p => self.PB[5]
    supports CAN2_TX:
      CAN2_TX.p => self.PB[13]
    supports CAN2_RX:
      CAN2_RX.p => self.PB[12]
    supports can-interface:
      require rx-pin: CAN2_RX
      require tx-pin: CAN2_TX
      can-interface.rx => rx-pin.p
      can-interface.tx => tx-pin.p

    pcb-bundle SPI1_MOSI:
      pin p
    pcb-bundle SPI1_MISO:
      pin p
    pcb-bundle SPI1_SCK:
      pin p
    pcb-bundle SPI1_NSS:
      pin p

    supports SPI1_MISO:
      SPI1_MISO.p => self.PB[4]
    supports SPI1_SCK:
      SPI1_SCK.p => self.PB[3]
    supports SPI1_NSS:
      SPI1_NSS.p => self.PA[15]
    supports SPI1_MOSI:
      SPI1_MOSI.p => self.PB[5]
    supports SPI1_NSS:
      SPI1_NSS.p => self.PA[4]
    supports SPI1_SCK:
      SPI1_SCK.p => self.PA[5]
    supports SPI1_MISO:
      SPI1_MISO.p => self.PA[6]
    supports SPI1_MOSI:
      SPI1_MOSI.p => self.PA[7]
    supports spi-controller():
      require sdo-pin: SPI1_MOSI
      require sdi-pin: SPI1_MISO
      require sck-pin: SPI1_SCK
      require cs-pin: SPI1_NSS
      spi-controller().cipo => sdo-pin.p
      spi-controller().copi => sdi-pin.p
      spi-controller().sck => sck-pin.p
      spi-controller().cs => cs-pin.p

    pcb-bundle SPI2_MOSI:
      pin p
    pcb-bundle SPI2_MISO:
      pin p
    pcb-bundle SPI2_SCK:
      pin p
    pcb-bundle SPI2_NSS:
      pin p

    supports SPI2_MOSI:
      SPI2_MOSI.p => self.PB[15]
    supports SPI2_MISO:
      SPI2_MISO.p => self.PB[14]
    supports SPI2_SCK:
      SPI2_SCK.p => self.PB[13]
    supports SPI2_NSS:
      SPI2_NSS.p => self.PB[12]
    supports spi-controller():
      require sdo-pin: SPI2_MOSI
      require sdi-pin: SPI2_MISO
      require sck-pin: SPI2_SCK
      require cs-pin: SPI2_NSS
      spi-controller().cipo => sdo-pin.p
      spi-controller().copi => sdi-pin.p
      spi-controller().sck => sck-pin.p
      spi-controller().cs => cs-pin.p

    pcb-bundle SPI3_MOSI:
      pin p
    pcb-bundle SPI3_MISO:
      pin p
    pcb-bundle SPI3_SCK:
      pin p
    pcb-bundle SPI3_NSS:
      pin p

    supports SPI3_MISO:
      SPI3_MISO.p => self.PB[4]
    supports SPI3_SCK:
      SPI3_SCK.p => self.PB[3]
    supports SPI3_NSS:
      SPI3_NSS.p => self.PA[15]
    supports SPI3_MISO:
      SPI3_MISO.p => self.PC[11]
    supports SPI3_SCK:
      SPI3_SCK.p => self.PC[10]
    supports SPI3_MOSI:
      SPI3_MOSI.p => self.PB[5]
    supports SPI3_MOSI:
      SPI3_MOSI.p => self.PC[12]
    supports SPI3_NSS:
      SPI3_NSS.p => self.PA[4]
    supports spi-controller():
      require sdo-pin: SPI3_MOSI
      require sdi-pin: SPI3_MISO
      require sck-pin: SPI3_SCK
      require cs-pin: SPI3_NSS
      spi-controller().cipo => sdo-pin.p
      spi-controller().copi => sdi-pin.p
      spi-controller().sck => sck-pin.p
      spi-controller().cs => cs-pin.p

    pcb-bundle UART4_TX:
      pin p
    pcb-bundle UART4_RX:
      pin p

    supports UART4_RX:
      UART4_RX.p => self.PC[11]
    supports UART4_TX:
      UART4_TX.p => self.PC[10]
    supports uart():
      require tx-pin: UART4_TX
      require rx-pin: UART4_RX
      uart().tx => tx-pin.p
      uart().rx => rx-pin.p

    pcb-bundle UART5_TX:
      pin p
    pcb-bundle UART5_RX:
      pin p

    supports UART5_RX:
      UART5_RX.p => self.PD[2]
    supports UART5_TX:
      UART5_TX.p => self.PC[12]
    supports uart():
      require tx-pin: UART5_TX
      require rx-pin: UART5_RX
      uart().tx => tx-pin.p
      uart().rx => rx-pin.p

    pcb-bundle USART1_TX:
      pin p
    pcb-bundle USART1_RX:
      pin p
    pcb-bundle USART1_CTS:
      pin p
    pcb-bundle USART1_RTS:
      pin p

    supports USART1_RX:
      USART1_RX.p => self.PB[7]
    supports USART1_TX:
      USART1_TX.p => self.PB[6]
    supports USART1_RTS:
      USART1_RTS.p => self.PA[12]
    supports USART1_TX:
      USART1_TX.p => self.PA[9]
    supports USART1_CTS:
      USART1_CTS.p => self.PA[11]
    supports USART1_RX:
      USART1_RX.p => self.PA[10]
    supports usart([UART-CTS, UART-RTS, UART-RX, UART-TX]):
      require tx-pin: USART1_TX
      require rx-pin: USART1_RX
      require cts-pin: USART1_CTS
      require rts-pin: USART1_RTS
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).tx => tx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rts => rts-pin.p

    pcb-bundle USART2_TX:
      pin p
    pcb-bundle USART2_RX:
      pin p
    pcb-bundle USART2_CTS:
      pin p
    pcb-bundle USART2_RTS:
      pin p

    supports USART2_TX:
      USART2_TX.p => self.PD[5]
    supports USART2_RX:
      USART2_RX.p => self.PD[6]
    supports USART2_CTS:
      USART2_CTS.p => self.PD[3]
    supports USART2_RTS:
      USART2_RTS.p => self.PD[4]
    supports USART2_CTS:
      USART2_CTS.p => self.PA[0]
    supports USART2_RTS:
      USART2_RTS.p => self.PA[1]
    supports USART2_TX:
      USART2_TX.p => self.PA[2]
    supports USART2_RX:
      USART2_RX.p => self.PA[3]
    supports usart([UART-CTS, UART-RTS, UART-RX, UART-TX]):
      require tx-pin: USART2_TX
      require rx-pin: USART2_RX
      require cts-pin: USART2_CTS
      require rts-pin: USART2_RTS
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).tx => tx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rts => rts-pin.p

    pcb-bundle USART3_TX:
      pin p
    pcb-bundle USART3_RX:
      pin p
    pcb-bundle USART3_CTS:
      pin p
    pcb-bundle USART3_RTS:
      pin p

    supports USART3_RX:
      USART3_RX.p => self.PC[11]
    supports USART3_TX:
      USART3_TX.p => self.PC[10]
    supports USART3_CTS:
      USART3_CTS.p => self.PD[11]
    supports USART3_RTS:
      USART3_RTS.p => self.PB[14]
    supports USART3_TX:
      USART3_TX.p => self.PB[10]
    supports USART3_CTS:
      USART3_CTS.p => self.PB[13]
    supports USART3_RX:
      USART3_RX.p => self.PD[9]
    supports USART3_RX:
      USART3_RX.p => self.PB[11]
    supports USART3_TX:
      USART3_TX.p => self.PD[8]
    supports USART3_RTS:
      USART3_RTS.p => self.PD[12]
    supports usart([UART-CTS, UART-RTS, UART-RX, UART-TX]):
      require tx-pin: USART3_TX
      require rx-pin: USART3_RX
      require cts-pin: USART3_CTS
      require rts-pin: USART3_RTS
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).tx => tx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rts => rts-pin.p

    pcb-bundle I2S2_WS:
      pin p
    pcb-bundle I2S2_CK:
      pin p
    pcb-bundle I2S2_SDO:
      pin p

    supports I2S2_CK:
      I2S2_CK.p => self.PB[13]
    supports I2S2_WS:
      I2S2_WS.p => self.PB[12]
    supports i2s():
      require ws-pin: I2S2_WS
      require ck-pin: I2S2_CK
      require sdmo-pin: I2S2_SDO
      i2s().ws => ws-pin.p
      i2s().ck => ck-pin.p
      i2s().sdmo => sdmo-pin.p

    pcb-bundle I2S3_WS:
      pin p
    pcb-bundle I2S3_CK:
      pin p
    pcb-bundle I2S3_SDO:
      pin p

    supports I2S3_CK:
      I2S3_CK.p => self.PB[3]
    supports I2S3_WS:
      I2S3_WS.p => self.PA[15]
    supports I2S3_CK:
      I2S3_CK.p => self.PC[10]
    supports I2S3_WS:
      I2S3_WS.p => self.PA[4]
    supports i2s():
      require ws-pin: I2S3_WS
      require ck-pin: I2S3_CK
      require sdmo-pin: I2S3_SDO
      i2s().ws => ws-pin.p
      i2s().ck => ck-pin.p
      i2s().sdmo => sdmo-pin.p

    pcb-bundle RCC_OSC_IN:
      pin p
    pcb-bundle RCC_OSC_OUT:
      pin p

    supports RCC_OSC_IN:
      RCC_OSC_IN.p => self.OSC_IN
    supports RCC_OSC_OUT:
      RCC_OSC_OUT.p => self.OSC_OUT
    supports high-freq-oscillator:
      require in-pin: RCC_OSC_IN
      require out-pin: RCC_OSC_OUT
      high-freq-oscillator.in => in-pin.p
      high-freq-oscillator.out => out-pin.p

    pcb-bundle RCC_OSC32_IN:
      pin p
    pcb-bundle RCC_OSC32_OUT:
      pin p

    supports RCC_OSC32_IN:
      RCC_OSC32_IN.p => self.PC[14]
    supports RCC_OSC32_OUT:
      RCC_OSC32_OUT.p => self.PC[15]
    supports low-freq-oscillator:
      require in-pin: RCC_OSC32_IN
      require out-pin: RCC_OSC32_OUT
      low-freq-oscillator.in => in-pin.p
      low-freq-oscillator.out => out-pin.p

