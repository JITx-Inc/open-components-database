#use-added-syntax(jitx)
defpackage ocdb/components/si-labs/CP2105 :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults
  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/utils/property-structs

public pcb-component component :
  manufacturer = "Silicon Labs"
  description  = "IC SGL USB-DL UART BRIDGE 24QFN"
  mpn          = "CP2105-F01-GM"

  pin-properties :
    [pin:Ref | pads:Int ... | side:Dir]
    [nRST    | 9  | Left]
    [VIO     | 5  | Left]
    [VDD     | 6  | Left]
    [REGIN   | 7  | Left]
    [GND     | 2  | Down]
    [VBUS    | 8  | Left]
    [D+      | 3  | Left]
    [D-      | 4  | Left]
    [RI_SCI  | 1  | Right]
    [CTS_ECI | 10 | Right]
    [RTS_ECI | 11 | Right]
    [RXD_ECI | 12 | Right]
    [TXD_ECI | 13 | Right]
    [DSR_ECI | 14 | Right]
    [DTR_ECI | 15 | Right]
    [VPP     | 16 | Right]
    [RI_ECI  | 17 | Right]
    [CTS_SCI | 18 | Right]
    [RTS_SCI | 19 | Right]
    [RXD_SCI | 20 | Right]
    [TXD_SCI | 21 | Right]
    [DSR_SCI | 22 | Right]
    [DTR_SCI | 23 | Right]
    [DCD_SCI | 24 | Right]
    [EPAD    | 25 | Down]

  make-box-symbol()
  assign-landpattern(qfn-landpattern(0.5, 4.0, 24, 0.25, 0.4, [2.7 2.7]))

  ; two power operating modes to handle: 
  ;  1) bus-powered with VBUS connected to REGIN, VDD is output
  ;  2) self-powered with REGIN connected to VDD, VBUS independent

  ; assume that REGIN has some power input in either mode
  property(self.REGIN.power-pin) = PowerPin(min-max(3.0, 5.25))
  property(self.rated-temperature) = min-max(-40.0, 85.0)

  val outs = [
    self.TXD_ECI,
    self.DTR_ECI,
    self.RTS_ECI,
    self.TXD_SCI,
    self.DTR_SCI,
    self.RTS_SCI
  ]

  val ins = [
    self.RXD_ECI,
    self.RXD_SCI
  ]

  val input-props = DigitalInput(typ(0.6), FractionalVoltage(0.7, self.VIO), 
                                  self.VIO, self.GND, 50.0e-6)
  
  for i in ins do :
    property(i.digital-input) = input-props

  var vio-v = min-max(0.0, 0.0)
  eval-when has-property?(self.VIO.voltage) :
    vio-v = property(self.VIO.voltage) 
    ; VIO can be independent of VDD/REGIN/VBUS
    val drive-props = DigitalOutput(CMOSOutput(min-max(0.0, 0.4),
                                    min-max(min-value(vio-v) - 0.2, max-value(vio-v))),
                                    false, self.VIO, self.GND)
    for o in outs do :
      property(o.digital-output) = drive-props


public pcb-module module (bus-powered?:True|False):
  port usb-2 : usb-2
  port e-uart : uart([UART-DTR, UART-RTS, UART-RX, UART-TX])
  port s-uart : uart([UART-DTR, UART-RTS, UART-RX, UART-TX])
  pin reset
  pin vio
  pin vdd
  pin gnd
  
  public inst xcvr : ocdb/components/si-labs/CP2105/component
  ; connected as bus-powered device?
  if bus-powered? :
    net (usb-2.vbus.vdd xcvr.VBUS xcvr.REGIN)
    cap-strap(xcvr.REGIN, gnd, 1.0e-6)
    property(xcvr.VDD.power-supply-pin) = PowerSupplyPin(min-max(3.3, 3.6), 0.0815) ; 100mA - 18.5mA
 
  else :
    net (usb-2.vbus.vdd xcvr.VBUS)
    net (xcvr.REGIN xcvr.VDD)
    property(xcvr.VDD.power-pin) = PowerPin(min-max(3.0, 3.6)) ; now an input

  net (xcvr.VIO vio) ; separate VDD and VIO
  net (xcvr.VDD vdd)

  cap-strap(xcvr.VPP, xcvr.GND, 4.7e-6) ; VPP capacitor to allow OTP ROM to be flashed over USB.

  net (usb-2.vbus.gnd xcvr.GND xcvr.EPAD gnd)
  net (xcvr.nRST reset)
  net (usb-2.data.P xcvr.D+)
  net (usb-2.data.N xcvr.D-)
  
  for cap_ in [4.7e-6] do :
    bypass-cap-strap(xcvr.VDD, gnd, cap_)
  res-strap(reset, vio, 4.7e3)

  net (e-uart.rx  xcvr.RXD_ECI)
  net (e-uart.tx  xcvr.TXD_ECI)
  net (e-uart.rts xcvr.RTS_ECI)
  net (e-uart.dtr xcvr.DTR_ECI)
  net (s-uart.rx  xcvr.RXD_SCI)
  net (s-uart.tx  xcvr.TXD_SCI)
  net (s-uart.rts xcvr.RTS_SCI)
  net (s-uart.dtr xcvr.DTR_SCI)

  schematic-group(self) = CP2105
