#use-added-syntax(esir)
defpackage ocdb/raytac/MDBT50Q :
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import ocdb/tests/default-harness

  import ocdb/land-patterns
  import ocdb/symbols
  import ocdb/box-symbol
  import ocdb/pinspec
  import ocdb/bundles
  import ocdb/generator-utils
  import ocdb/generic-components

  import jitpcb/visualizer

public pcb-component component (antenna:String) :
  manufacturer = "Raytac"
  mpn = switch(antenna):
    "chip" : "MDBT50Q-512K"
    "pcb"  : "MDBT50Q-P512K"
  description = "nRF52833 based module, with chip or PCB antenna"

  val ps = PinSpec $ #TABLE :
    [Ref    | Int ...                   | Dir   | Ref   ]
    [GND    | 1, 2, 15, 33, 55          | Down  | base  ]
    [NC     | 4, 31, 42, 45, 49, 59, 60 | Up    | base  ]
    [P0_25  | 3                         | Left  | base  ]
    [P0_23  | 5                         | Left  | base  ]
    [P1_05  | 6                         | Left  | base  ]
    [P1_03  | 7                         | Left  | base  ]
    [P0_19  | 8                         | Left  | base  ]
    [P0_03  | 9                         | Left  | base  ]
    [P0_29  | 10                        | Left  | base  ]
    [P0_02  | 11                        | Left  | base  ]
    [P0_31  | 12                        | Left  | base  ]
    [P0_28  | 13                        | Left  | base  ]
    [P0_30  | 14                        | Left  | base  ]
    [P0_27  | 16                        | Left  | base  ]
    [P0_00  | 17                        | Left  | base  ]
    [P0_01  | 18                        | Left  | base  ]
    [P0_26  | 19                        | Left  | base  ]
    [P0_04  | 20                        | Left  | base  ]
    [P0_05  | 21                        | Left  | base  ]
    [P0_06  | 22                        | Left  | base  ]
    [P0_07  | 23                        | Left  | base  ]
    [P0_08  | 24                        | Left  | base  ]
    [P1_08  | 25                        | Left  | base  ]
    [P1_09  | 26                        | Left  | base  ]
    [P0_11  | 27                        | Left  | base  ]
    [VDD    | 28                        | Right | base  ]
    [P0_12  | 29                        | Left  | base  ]
    [VDDH   | 30                        | Right | base  ]
    [VBUS   | 32                        | Right | base  ]
    [D-     | 34                        | Right | base  ]
    [D+     | 35                        | Right | base  ]
    [P0_14  | 36                        | Left  | base  ]
    [P0_13  | 37                        | Left  | base  ]
    [P0_16  | 38                        | Left  | base  ]
    [P0_15  | 39                        | Left  | base  ]
    [P0_18  | 40                        | Left  | base  ]
    [P0_17  | 41                        | Left  | base  ]
    [P0_21  | 43                        | Left  | base  ]
    [P0_20  | 44                        | Left  | base  ]
    [P0_22  | 46                        | Left  | base  ]
    [P1_00  | 47                        | Left  | base  ]
    [P0_24  | 48                        | Left  | base  ]
    [P1_02  | 50                        | Left  | base  ]
    [SWDIO  | 51                        | Right | base  ]
    [P0_09  | 52                        | Left  | base  ]
    [SWDCK  | 53                        | Right | base  ]
    [P0_10  | 54                        | Left  | base  ]
    [P1_04  | 56                        | Left  | base  ]
    [P1_06  | 57                        | Left  | base  ]
    [P1_07  | 58                        | Left  | base  ]
    [P1_01  | 61                        | Left  | base  ]

  make-pins(ps)
  make-box-symbol(ps)
  assign-package(module-pkg, ps)

pcb-package module-pkg:
  val padx = 0.6
  val pady = 0.4
  val pitch = 0.8
  val offset = 0.9

  pad p[1] : {smd-pad(padx, pady)} at loc(0.6, 11.5)
  pad p[2] : {smd-pad(padx, pady)} at loc(0.6, 10.4)
  pad p[3] : {smd-pad(padx, pady)} at loc(0.6, 9.6)
  for (i in 4 to 15) do :
    val div = to-double(i % 2)
    if (div > 0.0) :
      pad p[i] : {smd-pad(padx, pady)} at loc(0.6 + offset, 8.0 - ((to-double((i - 5) / 2) + 0.5) * pitch))
    else :
      pad p[i] : {smd-pad(padx, pady)} at loc(0.6, 8.0 - (to-double((i - 4) / 2) * pitch))

  for (i in 15 to 34) do :
    if (i >= 19 and i <=29) :
      val div = to-double(i % 2)
      if (div > 0.0) :
        pad p[i] : {smd-pad(pady, padx)} at loc(0.45 + ((to-double((i - 16 + 3) / 2) + 0.5) * pitch), 0.6 + offset)
      else :
        pad p[i] : {smd-pad(pady, padx)} at loc(0.45 + (to-double((i - 15 + 3) / 2) * pitch), 0.6)
    else :
      if (i > 29) : 
        pad p[i] : {smd-pad(pady, padx)} at loc(0.45 + to-double(i - 15 - 6) * pitch, 0.6)
      else :
        pad p[i] : {smd-pad(pady, padx)} at loc(0.45 + to-double(i - 15) * pitch, 0.6)

  pad p[34] : {smd-pad(padx, pady)} at loc(9.9, 1.6)

  for (i in 35 to 43) do :
    val div = to-double(i % 2)
    if (div < 1.0) :
      pad p[i] : {smd-pad(padx, pady)} at loc(9.9 - offset, 2.4 + ((to-double((i - 36) / 2) + 0.5) * pitch))
    else :
      pad p[i] : {smd-pad(padx, pady)} at loc(9.9, 2.4 + (to-double((i - 35) / 2) * pitch))

  for (i in 43 to 50) do :
    val div = to-double(i % 2)
    if (div > 0.0) :
      pad p[i] : {smd-pad(padx, pady)} at loc(9.9 - offset, 6.0 + (to-double((i - 45) / 2) + 1.0) * pitch)
    else :
      pad p[i] : {smd-pad(padx, pady)} at loc(9.9, 6.0 + (to-double((i - 46) / 2 ) + 1.5) * pitch)

  for (i in 50 to 55) do :
    val div = to-double(i % 2)
    if (div < 1.0) :
      pad p[i] : {smd-pad(padx, pady)} at loc(9.9 - offset, 9.2 + to-double((i - 50) / 2) * pitch)
    else :
      pad p[i] : {smd-pad(padx, pady)} at loc(9.9, 9.2 + (to-double((i - 51) / 2) + 0.5) * pitch)

  pad p[55] : {smd-pad(padx, pady)} at loc(9.9, 11.5)

  for (i in 56 to 62) do :
    pad p[i] : {smd-pad(pady, padx)} at loc(3.25 + to-double(i - 56) * pitch, 7.2)

  layer(Courtyard(Top)) = Rectangle(10.5, 15.5, loc(10.5 / 2.0, 15.5 / 2.0))
  layer(ForbidCopper(LayerIndex(0), LayerIndex(0, Bottom))) = Rectangle(12.4, 3.8, loc(10.5 / 2.0, 15.5 - 3.8 / 2.0))
  layer(ForbidCopper(LayerIndex(0), LayerIndex(0))) = Rectangle(1.6, 1.2, loc(2.95 + 1.6 / 2.0, 15.5 - 3.8 - 1.2 / 2.0))
  ref-label()

public pcb-module module (antenna) :
  pin gnd
  pin vcc
  pin vbus
  pin reset
  pin swdio
  pin swdck

  port spi-master : spi
  port i2c-master : i2c
  port uart-nrf : uart

  inst ble-module : {ocdb/raytac/MDBT50Q/component(antenna)}

  ; Power connections and decoupling caps
  net (gnd, ble-module.GND)
  net (vcc, ble-module.VDD)
  net (vcc, ble-module.VDDH)
  net (vbus, ble-module.VBUS)
  cap-strap(vcc, gnd, 10.0e-6)
  cap-strap(vbus, gnd, 10.0e-6)

  ; swd
  net (swdio, ble-module.SWDIO)
  net (swdck, ble-module.SWDCK)

  ; spi
  net (spi-master.mosi, ble-module.P0_28)
  net (spi-master.miso, ble-module.P0_30)
  net (spi-master.sck, ble-module.P0_31)
  net (spi-master.ss, ble-module.P0_02)

  ; i2c
  net (i2c-master.sda, ble-module.P0_11)
  net (i2c-master.scl, ble-module.P0_12)
  res-strap(i2c-master.sda, vcc, 1.2e3)
  res-strap(i2c-master.scl, vcc, 1.2e3)

  ; uart
  net (uart-nrf.rx, ble-module.P0_08)
  net (uart-nrf.tx, ble-module.P0_06)
  
  ; 32 kHz crystal
  inst lf-xtal : {ocdb/epson/FC-135/component}
  cap-strap(lf-xtal.p[1], gnd, 9.0e-12)
  cap-strap(lf-xtal.p[2], gnd, 9.0e-12)
  net (lf-xtal.p[1], ble-module.P0_00)
  net (lf-xtal.p[2], ble-module.P0_01)

  ; gpio
  ; nrf reset
  net (reset, ble-module.P0_18)
  res-strap(reset, vcc, 10.0e3)