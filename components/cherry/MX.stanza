#use-added-syntax(jitx)
defpackage ocdb/components/cherry/MX :
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/defaults

  import ocdb/utils/landpatterns 
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components
  import ocdb/scripts/kle-importer

pcb-landpattern kailh-pcb-socket-1u-cutout-pkg (k:KeyCap):
  pad p[1] : smd-pad(C, 3.0, 2.5) at loc(6.6, 5.08, 0.0) on Bottom
  pad p[2] : smd-pad(C, 3.0, 2.5) at loc(-7.8, 2.54, 0.0) on Bottom
  val bounds = bounds(k)
  val width = width(bounds)
  val height = height(bounds)
  layer(Courtyard(Top)) = Rectangle(width, height)
  val s = "" when length(string(k)) == 0 else string(k)[0]
  layer(Silkscreen("f-silk", Top)) = Text(s, 2.0, C, loc(0.0, -4.0))
  layer(Silkscreen("f-silk", Top)) = outline $ Rectangle(width - 1.0, height - 1.0)
  ref-label()

  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(-6.35, 6.35), Point(-4.572, 6.35) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(4.572, 6.35), Point(6.35, 6.35) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(6.35, 6.35), Point(6.35, 4.572) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(6.35, -4.572), Point(6.35, -6.35) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(6.35, -6.35), Point(4.572, -6.35) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(-4.572, -6.35), Point(-6.35, -6.35) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(-6.35, -6.35), Point(-6.35, -4.572) ])
  layer(Silkscreen("F-SilkS", Top)) = Line(0.381, [ Point(-6.35, 4.572), Point(-6.35, 6.35) ])
  layer(Silkscreen("B-SilkS", Bottom)) = Line(0.15, [ Point(3.7, 3.3), Point(-0.3, 3.3) ])
  layer(Silkscreen("B-SilkS", Bottom)) = Line(0.15, [ Point(4.3, 6.8), Point(4.3, 3.85) ])
  layer(Silkscreen("B-SilkS", Bottom)) = Line(0.15, [ Point(-3.3, 6.8), Point(4.3, 6.8) ])
  layer(Silkscreen("B-SilkS", Bottom)) = Line(0.15, [ Point(-5.5, 0.8), Point(-5.5, 4.6) ])
  layer(Silkscreen("B-SilkS", Bottom)) = Line(0.15, [ Point(-2.65, 0.8), Point(-5.5, 0.8) ])
  
  layer(Cutout()) = Circle(Point(0.0, 0.0), 1.9939)
  layer(Cutout()) = Circle(Point(-5.08, 0.0), 0.8509)
  layer(Cutout()) = Circle(Point(5.08, 0.0), 0.8509)
  layer(Cutout()) = Circle(Point(2.54, 5.08), 1.5)
  layer(Cutout()) = Circle(Point(-3.81, 2.54), 1.5)
  val w = width / UNIT
  if w >= 2.0 : 
    ;println("width: %_" % [width])
    val a = 
      if w  < 3.0 :
        23.876
      else if w  == 3.0: 
        38.1
      else if w == 6.25: 
        100.0
      else if w == 7.0:
        114.3
      else if w <= 10.0:
        133.35
      else: 
        0.0 ; unreachable
    ; Flip the Spacebar stabilizer to save vertical space
    if w >= 6.0 :
      layer(Cutout()) = Union([symmetric-about-x([
                    Circle(Point(a / 2.0, -6.985), 3.048 / 2.0) 
                    Circle(Point(a / 2.0, 8.255), 3.9878 / 2.0)
                    ])])
    else:
      layer(Cutout()) = Union([symmetric-about-x([
              Circle(Point(a / 2.0, 6.985), 3.048 / 2.0) 
              Circle(Point(a / 2.0, -8.255), 3.9878 / 2.0)
              ])])
  
  model3d = Model3D(
    "kailh_socket_mx.stp",
    Vec3D(-0.65, 3.8, -3.5),
    Vec3D(1.0, 1.0, 1.0),
    Vec3D(0.0, 0.0, 180.0))

  model3d = Model3D(
    "cherry-sw.wrl",
    Vec3D(0., 0., 0.),
    Vec3D(0.3937, 0.3937, 0.3937),
    Vec3D(0.0, 0.0, 0.0))

; Cherry Switch with a Kailh SMD socket, and stabilizers.
public pcb-component component (k:KeyCap): 
  mpn = "CPG151101S11"
  manufacturer = "Kailh"
  reference-prefix = "SW"
  port p: pin[[1 2]]
  val land = kailh-pcb-socket-1u-cutout-pkg(k)
  landpattern = land(p[1] => land.p[1], p[2] => land.p[2])
  val sym = spst(1, 1)
  symbol = sym(p[1] => sym.p[1], p[2] => sym.t[1])
